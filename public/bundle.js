/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@dead50f7/adbkit/lib/adb/protocol.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dead50f7/adbkit/lib/adb/protocol.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var Protocol = /** @class */ (function () {
    function Protocol() {
    }
    Protocol.decodeLength = function (length) {
        return parseInt(length, 16);
    };
    Protocol.encodeLength = function (length) {
        return ('0000' + length.toString(16)).slice(-4).toUpperCase();
    };
    Protocol.encodeData = function (data) {
        if (!Buffer.isBuffer(data)) {
            data = new Buffer(data);
        }
        return Buffer.concat([new Buffer(Protocol.encodeLength(data.length)), data]);
    };
    Protocol.OKAY = 'OKAY';
    Protocol.FAIL = 'FAIL';
    Protocol.STAT = 'STAT';
    Protocol.LIST = 'LIST';
    Protocol.DENT = 'DENT';
    Protocol.RECV = 'RECV';
    Protocol.DATA = 'DATA';
    Protocol.DONE = 'DONE';
    Protocol.SEND = 'SEND';
    Protocol.QUIT = 'QUIT';
    return Protocol;
}());
module.exports = Protocol;


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./src/public/images/multitouch/center_point.png":
/*!*******************************************************!*\
  !*** ./src/public/images/multitouch/center_point.png ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "1279f368b5bb729ca7b35990042f9928.png");

/***/ }),

/***/ "./src/public/images/multitouch/touch_point.png":
/*!******************************************************!*\
  !*** ./src/public/images/multitouch/touch_point.png ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "0adc36cf9cddfe4b6056c3ca47abaca0.png");

/***/ }),

/***/ "./vendor/Broadway/avc.wasm.asset":
/*!****************************************!*\
  !*** ./vendor/Broadway/avc.wasm.asset ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "avc.wasm");

/***/ }),

/***/ "./node_modules/h264-converter/dist/h264-parser.js":
/*!*********************************************************!*\
  !*** ./node_modules/h264-converter/dist/h264-parser.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var bit_stream_1 = __webpack_require__(/*! ./util/bit-stream */ "./node_modules/h264-converter/dist/util/bit-stream.js");
var debug = __webpack_require__(/*! ./util/debug */ "./node_modules/h264-converter/dist/util/debug.js");
var NALU_1 = __webpack_require__(/*! ./util/NALU */ "./node_modules/h264-converter/dist/util/NALU.js");
var H264Parser = (function () {
    function H264Parser(remuxer) {
        this.remuxer = remuxer;
        this.track = remuxer.mp4track;
    }
    H264Parser.prototype.parseSEI = function (sei) {
        var messages = H264Parser.readSEI(sei);
        for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
            var m = messages_1[_i];
            switch (m.type) {
                case 0:
                    this.track.seiBuffering = true;
                    break;
                case 5:
                    return true;
                default:
                    break;
            }
        }
        return false;
    };
    H264Parser.prototype.parseSPS = function (sps) {
        var config = H264Parser.readSPS(sps);
        this.track.width = config.width;
        this.track.height = config.height;
        this.track.sps = [sps];
        this.track.codec = 'avc1.';
        var codecArray = new DataView(sps.buffer, sps.byteOffset + 1, 4);
        for (var i = 0; i < 3; ++i) {
            var h = codecArray.getUint8(i).toString(16);
            if (h.length < 2) {
                h = '0' + h;
            }
            this.track.codec += h;
        }
    };
    H264Parser.prototype.parsePPS = function (pps) {
        this.track.pps = [pps];
    };
    H264Parser.prototype.parseNAL = function (unit) {
        if (!unit) {
            return false;
        }
        var push = false;
        switch (unit.type()) {
            case NALU_1.default.NDR:
            case NALU_1.default.IDR:
                push = true;
                break;
            case NALU_1.default.SEI:
                push = this.parseSEI(unit.getData().subarray(4));
                break;
            case NALU_1.default.SPS:
                this.parseSPS(unit.getData().subarray(4));
                debug.log(" Found SPS type NALU frame.");
                if (!this.remuxer.readyToDecode && this.track.pps.length > 0 && this.track.sps.length > 0) {
                    this.remuxer.readyToDecode = true;
                }
                break;
            case NALU_1.default.PPS:
                this.parsePPS(unit.getData().subarray(4));
                debug.log(" Found PPS type NALU frame.");
                if (!this.remuxer.readyToDecode && this.track.pps.length > 0 && this.track.sps.length > 0) {
                    this.remuxer.readyToDecode = true;
                }
                break;
            default:
                debug.log(" Found Unknown type NALU frame. type=" + unit.type());
                break;
        }
        return push;
    };
    H264Parser.skipScalingList = function (decoder, count) {
        var lastScale = 8;
        var nextScale = 8;
        for (var j = 0; j < count; j++) {
            if (nextScale !== 0) {
                var deltaScale = decoder.readEG();
                nextScale = (lastScale + deltaScale + 256) % 256;
            }
            lastScale = (nextScale === 0) ? lastScale : nextScale;
        }
    };
    H264Parser.readSPS = function (data) {
        var _a = this.parseSPS(data), pic_width_in_mbs_minus1 = _a.pic_width_in_mbs_minus1, frame_crop_left_offset = _a.frame_crop_left_offset, frame_crop_right_offset = _a.frame_crop_right_offset, frame_mbs_only_flag = _a.frame_mbs_only_flag, pic_height_in_map_units_minus1 = _a.pic_height_in_map_units_minus1, frame_crop_top_offset = _a.frame_crop_top_offset, frame_crop_bottom_offset = _a.frame_crop_bottom_offset, sar = _a.sar;
        var sarScale = sar[0] / sar[1];
        return {
            width: Math.ceil((((pic_width_in_mbs_minus1 + 1) * 16) - frame_crop_left_offset * 2 - frame_crop_right_offset * 2) * sarScale),
            height: ((2 - frame_mbs_only_flag) * (pic_height_in_map_units_minus1 + 1) * 16) -
                ((frame_mbs_only_flag ? 2 : 4) * (frame_crop_top_offset + frame_crop_bottom_offset)),
        };
    };
    H264Parser.parseSPS = function (data) {
        var decoder = new bit_stream_1.default(data);
        var frame_crop_left_offset = 0;
        var frame_crop_right_offset = 0;
        var frame_crop_top_offset = 0;
        var frame_crop_bottom_offset = 0;
        decoder.readUByte();
        var profile_idc = decoder.readUByte();
        var constraint_set_flags = decoder.readUByte();
        var level_idc = decoder.readBits(8);
        var seq_parameter_set_id = decoder.readUEG();
        if (profile_idc === 100 ||
            profile_idc === 110 ||
            profile_idc === 122 ||
            profile_idc === 244 ||
            profile_idc === 44 ||
            profile_idc === 83 ||
            profile_idc === 86 ||
            profile_idc === 118 ||
            profile_idc === 128 ||
            profile_idc === 138 ||
            profile_idc === 139 ||
            profile_idc === 134) {
            var chromaFormatIdc = decoder.readUEG();
            if (chromaFormatIdc === 3) {
                decoder.skipBits(1);
            }
            decoder.skipUEG();
            decoder.skipUEG();
            decoder.skipBits(1);
            if (decoder.readBoolean()) {
                var scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;
                for (var i = 0; i < scalingListCount; ++i) {
                    if (decoder.readBoolean()) {
                        if (i < 6) {
                            H264Parser.skipScalingList(decoder, 16);
                        }
                        else {
                            H264Parser.skipScalingList(decoder, 64);
                        }
                    }
                }
            }
        }
        decoder.skipUEG();
        var picOrderCntType = decoder.readUEG();
        if (picOrderCntType === 0) {
            decoder.readUEG();
        }
        else if (picOrderCntType === 1) {
            decoder.skipBits(1);
            decoder.skipEG();
            decoder.skipEG();
            var numRefFramesInPicOrderCntCycle = decoder.readUEG();
            for (var i = 0; i < numRefFramesInPicOrderCntCycle; ++i) {
                decoder.skipEG();
            }
        }
        decoder.skipUEG();
        decoder.skipBits(1);
        var pic_width_in_mbs_minus1 = decoder.readUEG();
        var pic_height_in_map_units_minus1 = decoder.readUEG();
        var frame_mbs_only_flag = decoder.readBits(1);
        if (frame_mbs_only_flag === 0) {
            decoder.skipBits(1);
        }
        decoder.skipBits(1);
        if (decoder.readBoolean()) {
            frame_crop_left_offset = decoder.readUEG();
            frame_crop_right_offset = decoder.readUEG();
            frame_crop_top_offset = decoder.readUEG();
            frame_crop_bottom_offset = decoder.readUEG();
        }
        var vui_parameters_present_flag = decoder.readBoolean();
        var aspect_ratio_info_present_flag = false;
        var sar = [1, 1];
        if (vui_parameters_present_flag) {
            aspect_ratio_info_present_flag = decoder.readBoolean();
            if (aspect_ratio_info_present_flag) {
                var aspectRatioIdc = decoder.readUByte();
                switch (aspectRatioIdc) {
                    case 1:
                        sar = [1, 1];
                        break;
                    case 2:
                        sar = [12, 11];
                        break;
                    case 3:
                        sar = [10, 11];
                        break;
                    case 4:
                        sar = [16, 11];
                        break;
                    case 5:
                        sar = [40, 33];
                        break;
                    case 6:
                        sar = [24, 11];
                        break;
                    case 7:
                        sar = [20, 11];
                        break;
                    case 8:
                        sar = [32, 11];
                        break;
                    case 9:
                        sar = [80, 33];
                        break;
                    case 10:
                        sar = [18, 11];
                        break;
                    case 11:
                        sar = [15, 11];
                        break;
                    case 12:
                        sar = [64, 33];
                        break;
                    case 13:
                        sar = [160, 99];
                        break;
                    case 14:
                        sar = [4, 3];
                        break;
                    case 15:
                        sar = [3, 2];
                        break;
                    case 16:
                        sar = [2, 1];
                        break;
                    case 255: {
                        sar = [decoder.readUByte() << 8 | decoder.readUByte(), decoder.readUByte() << 8 | decoder.readUByte()];
                        break;
                    }
                    default: {
                        debug.error("  H264: Unknown aspectRatioIdc=" + aspectRatioIdc);
                    }
                }
            }
            if (decoder.readBoolean()) {
                decoder.skipBits(1);
            }
            if (decoder.readBoolean()) {
                decoder.skipBits(4);
                if (decoder.readBoolean()) {
                    decoder.skipBits(24);
                }
            }
            if (decoder.readBoolean()) {
                decoder.skipUEG();
                decoder.skipUEG();
            }
            if (decoder.readBoolean()) {
                if (decoder.bitsAvailable > 64) {
                    var unitsInTick = decoder.readUInt();
                    var timeScale = decoder.readUInt();
                    var fixedFrameRate = decoder.readBoolean();
                    var frameDuration = timeScale / (2 * unitsInTick);
                    debug.log("timescale: " + timeScale + "; unitsInTick: " + unitsInTick + "; " +
                        ("fixedFramerate: " + fixedFrameRate + "; avgFrameDuration: " + frameDuration));
                }
                else {
                    debug.log("Truncated VUI (" + decoder.bitsAvailable + ")");
                }
            }
        }
        return {
            profile_idc: profile_idc,
            constraint_set_flags: constraint_set_flags,
            level_idc: level_idc,
            seq_parameter_set_id: seq_parameter_set_id,
            pic_width_in_mbs_minus1: pic_width_in_mbs_minus1,
            pic_height_in_map_units_minus1: pic_height_in_map_units_minus1,
            frame_mbs_only_flag: frame_mbs_only_flag,
            frame_crop_left_offset: frame_crop_left_offset,
            frame_crop_right_offset: frame_crop_right_offset,
            frame_crop_top_offset: frame_crop_top_offset,
            frame_crop_bottom_offset: frame_crop_bottom_offset,
            sar: sar,
        };
    };
    H264Parser.readSEI = function (data) {
        var decoder = new bit_stream_1.default(data);
        decoder.skipBits(8);
        var result = [];
        while (decoder.bitsAvailable > 3 * 8) {
            result.push(this.readSEIMessage(decoder));
        }
        return result;
    };
    H264Parser.readSEIMessage = function (decoder) {
        function get() {
            var result = 0;
            while (true) {
                var value = decoder.readUByte();
                result += value;
                if (value !== 0xff) {
                    break;
                }
            }
            return result;
        }
        var payloadType = get();
        var payloadSize = get();
        return this.readSEIPayload(decoder, payloadType, payloadSize);
    };
    H264Parser.readSEIPayload = function (decoder, type, size) {
        var result;
        switch (type) {
            default:
                result = { type: type };
                decoder.skipBits(size * 8);
        }
        decoder.skipBits(decoder.bitsAvailable % 8);
        return result;
    };
    return H264Parser;
}());
exports["default"] = H264Parser;


/***/ }),

/***/ "./node_modules/h264-converter/dist/h264-remuxer.js":
/*!**********************************************************!*\
  !*** ./node_modules/h264-converter/dist/h264-remuxer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var h264_parser_1 = __webpack_require__(/*! ./h264-parser */ "./node_modules/h264-converter/dist/h264-parser.js");
var debug = __webpack_require__(/*! ./util/debug */ "./node_modules/h264-converter/dist/util/debug.js");
var NALU_1 = __webpack_require__(/*! ./util/NALU */ "./node_modules/h264-converter/dist/util/NALU.js");
var trackId = 1;
var H264Remuxer = (function () {
    function H264Remuxer(fps, framePerFragment, timescale) {
        this.fps = fps;
        this.framePerFragment = framePerFragment;
        this.timescale = timescale;
        this.readyToDecode = false;
        this.totalDTS = 0;
        this.stepDTS = Math.round(this.timescale / this.fps);
        this.frameCount = 0;
        this.seq = 1;
        this.mp4track = {
            id: H264Remuxer.getTrackID(),
            type: 'video',
            len: 0,
            codec: '',
            sps: [],
            pps: [],
            seiBuffering: false,
            width: 0,
            height: 0,
            timescale: timescale,
            duration: timescale,
            samples: [],
            isKeyFrame: true,
        };
        this.unitSamples = [[]];
        this.parser = new h264_parser_1.default(this);
    }
    H264Remuxer.getTrackID = function () {
        return trackId++;
    };
    Object.defineProperty(H264Remuxer.prototype, "seqNum", {
        get: function () {
            return this.seq;
        },
        enumerable: true,
        configurable: true
    });
    H264Remuxer.prototype.remux = function (nalu) {
        if (this.mp4track.seiBuffering && nalu.type() === NALU_1.default.SEI) {
            return this.createNextFrame();
        }
        if (this.parser.parseNAL(nalu)) {
            this.unitSamples[this.unitSamples.length - 1].push(nalu);
            this.mp4track.len += nalu.getSize();
            this.mp4track.isKeyFrame = nalu.isKeyframe();
        }
        if (!this.mp4track.seiBuffering && (nalu.type() === NALU_1.default.IDR || nalu.type() === NALU_1.default.NDR)) {
            return this.createNextFrame();
        }
        return;
    };
    H264Remuxer.prototype.createNextFrame = function () {
        if (this.mp4track.len > 0) {
            this.frameCount++;
            if (this.frameCount % this.framePerFragment === 0) {
                var fragment = this.getFragment();
                if (fragment) {
                    var dts = this.totalDTS;
                    this.totalDTS = this.stepDTS * this.frameCount;
                    return [dts, fragment];
                }
                else {
                    debug.log("No mp4 sample data.");
                }
            }
            this.unitSamples.push([]);
        }
        return;
    };
    H264Remuxer.prototype.flush = function () {
        this.seq++;
        this.mp4track.len = 0;
        this.mp4track.samples = [];
        this.mp4track.isKeyFrame = false;
        this.unitSamples = [[]];
    };
    H264Remuxer.prototype.getFragment = function () {
        if (!this.checkReadyToDecode()) {
            return undefined;
        }
        var payload = new Uint8Array(this.mp4track.len);
        this.mp4track.samples = [];
        var offset = 0;
        for (var i = 0, len = this.unitSamples.length; i < len; i++) {
            var units = this.unitSamples[i];
            if (units.length === 0) {
                continue;
            }
            var mp4Sample = {
                size: 0,
                cts: this.stepDTS * i,
            };
            for (var _i = 0, units_1 = units; _i < units_1.length; _i++) {
                var unit = units_1[_i];
                mp4Sample.size += unit.getSize();
                payload.set(unit.getData(), offset);
                offset += unit.getSize();
            }
            this.mp4track.samples.push(mp4Sample);
        }
        if (offset === 0) {
            return undefined;
        }
        return payload;
    };
    H264Remuxer.prototype.checkReadyToDecode = function () {
        if (!this.readyToDecode || this.unitSamples.filter(function (array) { return array.length > 0; }).length === 0) {
            debug.log("Not ready to decode! readyToDecode(" + this.readyToDecode + ") is false or units is empty.");
            return false;
        }
        return true;
    };
    return H264Remuxer;
}());
exports["default"] = H264Remuxer;


/***/ }),

/***/ "./node_modules/h264-converter/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/h264-converter/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var h264_remuxer_1 = __webpack_require__(/*! ./h264-remuxer */ "./node_modules/h264-converter/dist/h264-remuxer.js");
var mp4_generator_1 = __webpack_require__(/*! ./mp4-generator */ "./node_modules/h264-converter/dist/mp4-generator.js");
var debug = __webpack_require__(/*! ./util/debug */ "./node_modules/h264-converter/dist/util/debug.js");
var nalu_stream_buffer_1 = __webpack_require__(/*! ./util/nalu-stream-buffer */ "./node_modules/h264-converter/dist/util/nalu-stream-buffer.js");
exports.mimeType = 'video/mp4; codecs="avc1.42E01E"';
var debug_1 = __webpack_require__(/*! ./util/debug */ "./node_modules/h264-converter/dist/util/debug.js");
exports.setLogger = debug_1.setLogger;
var VideoConverter = (function () {
    function VideoConverter(element, fps, fpf) {
        if (fps === void 0) { fps = 60; }
        if (fpf === void 0) { fpf = fps; }
        this.element = element;
        this.fps = fps;
        this.fpf = fpf;
        this.receiveBuffer = new nalu_stream_buffer_1.default();
        this.queue = [];
        if (!MediaSource || !MediaSource.isTypeSupported(exports.mimeType)) {
            throw new Error("Your browser is not supported: " + exports.mimeType);
        }
        this.reset();
    }
    Object.defineProperty(VideoConverter, "errorNotes", {
        get: function () {
            var _a;
            return _a = {},
                _a[MediaError.MEDIA_ERR_ABORTED] = 'fetching process aborted by user',
                _a[MediaError.MEDIA_ERR_NETWORK] = 'error occurred when downloading',
                _a[MediaError.MEDIA_ERR_DECODE] = 'error occurred when decoding',
                _a[MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED] = 'audio/video not supported',
                _a;
        },
        enumerable: true,
        configurable: true
    });
    VideoConverter.prototype.setup = function () {
        var _this = this;
        this.mediaReadyPromise = new Promise(function (resolve, _reject) {
            _this.mediaSource.addEventListener('sourceopen', function () {
                debug.log("Media Source opened.");
                _this.sourceBuffer = _this.mediaSource.addSourceBuffer(exports.mimeType);
                _this.sourceBuffer.addEventListener('updateend', function () {
                    debug.log("  SourceBuffer updateend");
                    debug.log("    sourceBuffer.buffered.length=" + _this.sourceBuffer.buffered.length);
                    for (var i = 0, len = _this.sourceBuffer.buffered.length; i < len; i++) {
                        debug.log("    sourceBuffer.buffered [" + i + "]: " +
                            (_this.sourceBuffer.buffered.start(i) + ", " + _this.sourceBuffer.buffered.end(i)));
                    }
                    debug.log("  mediasource.duration=" + _this.mediaSource.duration);
                    debug.log("  mediasource.readyState=" + _this.mediaSource.readyState);
                    debug.log("  video.duration=" + _this.element.duration);
                    debug.log("    video.buffered.length=" + _this.element.buffered.length);
                    if (debug.isEnable()) {
                        for (var i = 0, len = _this.element.buffered.length; i < len; i++) {
                            debug.log("    video.buffered [" + i + "]: " + _this.element.buffered.start(i) + ", " + _this.element.buffered.end(i));
                        }
                    }
                    debug.log("  video.currentTime=" + _this.element.currentTime);
                    debug.log("  video.readyState=" + _this.element.readyState);
                    if (_this.sourceBuffer.updating) {
                        return;
                    }
                    var data = _this.queue.shift();
                    if (data) {
                        _this.doAppend(data);
                    }
                });
                _this.sourceBuffer.addEventListener('error', function () {
                    debug.error('  SourceBuffer errored!');
                });
                _this.mediaReady = true;
                resolve();
            }, false);
            _this.mediaSource.addEventListener('sourceclose', function () {
                debug.log("Media Source closed.");
                _this.mediaReady = false;
            }, false);
            _this.element.src = URL.createObjectURL(_this.mediaSource);
        });
        return this.mediaReadyPromise;
    };
    VideoConverter.prototype.play = function () {
        var _this = this;
        if (!this.element.paused) {
            return;
        }
        if (this.mediaReady && this.element.readyState >= 2) {
            this.element.play();
        }
        else {
            var handler_1 = function () {
                _this.play();
                _this.element.removeEventListener('canplaythrough', handler_1);
            };
            this.element.addEventListener('canplaythrough', handler_1);
        }
    };
    VideoConverter.prototype.pause = function () {
        if (this.element.paused) {
            return;
        }
        this.element.pause();
    };
    VideoConverter.prototype.reset = function () {
        this.receiveBuffer.clear();
        if (this.mediaSource && this.mediaSource.readyState === 'open') {
            if (this.sourceBuffer.updating) {
                var mediaSource_1 = this.mediaSource;
                this.sourceBuffer.addEventListener('updateend', function () {
                    mediaSource_1.endOfStream();
                });
            }
        }
        this.mediaSource = new MediaSource();
        this.remuxer = new h264_remuxer_1.default(this.fps, this.fpf, this.fps * 60);
        this.mediaReady = false;
        this.mediaReadyPromise = undefined;
        this.queue = [];
        this.setup();
    };
    VideoConverter.prototype.appendRawData = function (data) {
        var nalus = this.receiveBuffer.append(data);
        for (var _i = 0, nalus_1 = nalus; _i < nalus_1.length; _i++) {
            var nalu = nalus_1[_i];
            var ret = this.remuxer.remux(nalu);
            if (ret) {
                this.writeFragment(ret[0], ret[1]);
            }
        }
    };
    VideoConverter.prototype.writeFragment = function (dts, pay) {
        var remuxer = this.remuxer;
        if (remuxer.mp4track.isKeyFrame) {
            this.writeBuffer(mp4_generator_1.default.initSegment([remuxer.mp4track], Infinity, remuxer.timescale));
        }
        if (pay && pay.byteLength) {
            debug.log(" Put fragment: " + remuxer.seqNum + ", frames=" + remuxer.mp4track.samples.length + ", size=" + pay.byteLength);
            var fragment = mp4_generator_1.default.fragmentSegment(remuxer.seqNum, dts, remuxer.mp4track, pay);
            this.writeBuffer(fragment);
            remuxer.flush();
        }
        else {
            debug.error("Nothing payload!");
        }
    };
    VideoConverter.prototype.writeBuffer = function (data) {
        var _this = this;
        if (this.mediaReady) {
            if (this.sourceBuffer.updating || this.queue.length) {
                this.queue.push(data);
            }
            else {
                this.doAppend(data);
            }
        }
        else {
            this.queue.push(data);
            if (this.mediaReadyPromise) {
                this.mediaReadyPromise.then(function () {
                    if (!_this.sourceBuffer.updating) {
                        var d = _this.queue.shift();
                        if (d) {
                            _this.doAppend(d);
                        }
                    }
                });
                this.mediaReadyPromise = undefined;
            }
        }
    };
    VideoConverter.prototype.doAppend = function (data) {
        var error = this.element.error;
        if (error) {
            debug.error("MSE Error Occured: " + VideoConverter.errorNotes[error.code]);
            this.element.pause();
            if (this.mediaSource.readyState === 'open') {
                this.mediaSource.endOfStream();
            }
        }
        else {
            try {
                this.sourceBuffer.appendBuffer(data);
                debug.log("  appended buffer: size=" + data.byteLength);
            }
            catch (err) {
                debug.error("MSE Error occured while appending buffer. " + err.name + ": " + err.message);
            }
        }
    };
    return VideoConverter;
}());
exports["default"] = VideoConverter;


/***/ }),

/***/ "./node_modules/h264-converter/dist/mp4-generator.js":
/*!***********************************************************!*\
  !*** ./node_modules/h264-converter/dist/mp4-generator.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var MP4 = (function () {
    function MP4() {
    }
    MP4.init = function () {
        MP4.initalized = true;
        MP4.types = {
            avc1: [],
            avcC: [],
            btrt: [],
            dinf: [],
            dref: [],
            esds: [],
            ftyp: [],
            hdlr: [],
            mdat: [],
            mdhd: [],
            mdia: [],
            mfhd: [],
            minf: [],
            moof: [],
            moov: [],
            mp4a: [],
            mvex: [],
            mvhd: [],
            sdtp: [],
            stbl: [],
            stco: [],
            stsc: [],
            stsd: [],
            stsz: [],
            stts: [],
            styp: [],
            tfdt: [],
            tfhd: [],
            traf: [],
            trak: [],
            trun: [],
            trep: [],
            trex: [],
            tkhd: [],
            vmhd: [],
            smhd: [],
        };
        for (var type in MP4.types) {
            if (MP4.types.hasOwnProperty(type)) {
                MP4.types[type] = [
                    type.charCodeAt(0),
                    type.charCodeAt(1),
                    type.charCodeAt(2),
                    type.charCodeAt(3),
                ];
            }
        }
        var hdlr = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x76, 0x69, 0x64, 0x65,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x56, 0x69, 0x64, 0x65,
            0x6f, 0x48, 0x61, 0x6e,
            0x64, 0x6c, 0x65, 0x72, 0x00,
        ]);
        var dref = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x0c,
            0x75, 0x72, 0x6c, 0x20,
            0x00,
            0x00, 0x00, 0x01,
        ]);
        var stco = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ]);
        MP4.STTS = MP4.STSC = MP4.STCO = stco;
        MP4.STSZ = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ]);
        MP4.VMHD = new Uint8Array([
            0x00,
            0x00, 0x00, 0x01,
            0x00, 0x00,
            0x00, 0x00,
            0x00, 0x00,
            0x00, 0x00,
        ]);
        MP4.SMHD = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00,
            0x00, 0x00,
        ]);
        MP4.STSD = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01
        ]);
        MP4.FTYP = MP4.box(MP4.types.ftyp, new Uint8Array([
            0x69, 0x73, 0x6f, 0x35,
            0x00, 0x00, 0x00, 0x01,
            0x61, 0x76, 0x63, 0x31,
            0x69, 0x73, 0x6f, 0x35,
            0x64, 0x61, 0x73, 0x68,
        ]));
        MP4.STYP = MP4.box(MP4.types.styp, new Uint8Array([
            0x6d, 0x73, 0x64, 0x68,
            0x00, 0x00, 0x00, 0x00,
            0x6d, 0x73, 0x64, 0x68,
            0x6d, 0x73, 0x69, 0x78,
        ]));
        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));
        MP4.HDLR = MP4.box(MP4.types.hdlr, hdlr);
    };
    MP4.box = function (type) {
        var payload = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            payload[_i - 1] = arguments[_i];
        }
        var size = 8;
        for (var _a = 0, payload_1 = payload; _a < payload_1.length; _a++) {
            var p = payload_1[_a];
            size += p.byteLength;
        }
        var result = new Uint8Array(size);
        result[0] = (size >> 24) & 0xff;
        result[1] = (size >> 16) & 0xff;
        result[2] = (size >> 8) & 0xff;
        result[3] = size & 0xff;
        result.set(type, 4);
        size = 8;
        for (var _b = 0, payload_2 = payload; _b < payload_2.length; _b++) {
            var box = payload_2[_b];
            result.set(box, size);
            size += box.byteLength;
        }
        return result;
    };
    MP4.mdat = function (data) {
        return MP4.box(MP4.types.mdat, data);
    };
    MP4.mdhd = function (timescale) {
        return MP4.box(MP4.types.mdhd, new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x02,
            (timescale >> 24) & 0xFF,
            (timescale >> 16) & 0xFF,
            (timescale >> 8) & 0xFF,
            timescale & 0xFF,
            0x00, 0x00, 0x00, 0x00,
            0x55, 0xc4,
            0x00, 0x00,
        ]));
    };
    MP4.mdia = function (track) {
        return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale), MP4.HDLR, MP4.minf(track));
    };
    MP4.mfhd = function (sequenceNumber) {
        return MP4.box(MP4.types.mfhd, new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            (sequenceNumber >> 24),
            (sequenceNumber >> 16) & 0xFF,
            (sequenceNumber >> 8) & 0xFF,
            sequenceNumber & 0xFF,
        ]));
    };
    MP4.minf = function (track) {
        return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));
    };
    MP4.moof = function (sn, baseMediaDecodeTime, track) {
        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));
    };
    MP4.moov = function (tracks, duration, timescale) {
        var boxes = [];
        for (var _i = 0, tracks_1 = tracks; _i < tracks_1.length; _i++) {
            var track = tracks_1[_i];
            boxes.push(MP4.trak(track));
        }
        return MP4.box.apply(MP4, [MP4.types.moov, MP4.mvhd(timescale, duration), MP4.mvex(tracks)].concat(boxes));
    };
    MP4.mvhd = function (timescale, duration) {
        var bytes = new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x02,
            (timescale >> 24) & 0xFF,
            (timescale >> 16) & 0xFF,
            (timescale >> 8) & 0xFF,
            timescale & 0xFF,
            (duration >> 24) & 0xFF,
            (duration >> 16) & 0xFF,
            (duration >> 8) & 0xFF,
            duration & 0xFF,
            0x00, 0x01, 0x00, 0x00,
            0x01, 0x00,
            0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02,
        ]);
        return MP4.box(MP4.types.mvhd, bytes);
    };
    MP4.mvex = function (tracks) {
        var boxes = [];
        for (var _i = 0, tracks_2 = tracks; _i < tracks_2.length; _i++) {
            var track = tracks_2[_i];
            boxes.push(MP4.trex(track));
        }
        return MP4.box.apply(MP4, [MP4.types.mvex].concat(boxes, [MP4.trep()]));
    };
    MP4.trep = function () {
        return MP4.box(MP4.types.trep, new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01,
        ]));
    };
    MP4.stbl = function (track) {
        return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));
    };
    MP4.avc1 = function (track) {
        var sps = [];
        var pps = [];
        for (var _i = 0, _a = track.sps; _i < _a.length; _i++) {
            var data = _a[_i];
            var len = data.byteLength;
            sps.push((len >>> 8) & 0xFF);
            sps.push((len & 0xFF));
            sps = sps.concat(Array.prototype.slice.call(data));
        }
        for (var _b = 0, _c = track.pps; _b < _c.length; _b++) {
            var data = _c[_b];
            var len = data.byteLength;
            pps.push((len >>> 8) & 0xFF);
            pps.push((len & 0xFF));
            pps = pps.concat(Array.prototype.slice.call(data));
        }
        var avcc = MP4.box(MP4.types.avcC, new Uint8Array([
            0x01,
            sps[3],
            sps[4],
            sps[5],
            0xfc | 3,
            0xE0 | track.sps.length,
        ].concat(sps).concat([
            track.pps.length,
        ]).concat(pps)));
        var width = track.width;
        var height = track.height;
        return MP4.box(MP4.types.avc1, new Uint8Array([
            0x00, 0x00, 0x00,
            0x00, 0x00, 0x00,
            0x00, 0x01,
            0x00, 0x00,
            0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            (width >> 8) & 0xFF,
            width & 0xff,
            (height >> 8) & 0xFF,
            height & 0xff,
            0x00, 0x48, 0x00, 0x00,
            0x00, 0x48, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x01,
            0x12,
            0x62, 0x69, 0x6E, 0x65,
            0x6C, 0x70, 0x72, 0x6F,
            0x2E, 0x72, 0x75, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00,
            0x00, 0x18,
            0x11, 0x11
        ]), avcc, MP4.box(MP4.types.btrt, new Uint8Array([
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x2d, 0xc6, 0xc0,
            0x00, 0x2d, 0xc6, 0xc0,
        ])));
    };
    MP4.stsd = function (track) {
        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));
    };
    MP4.tkhd = function (track) {
        var id = track.id;
        var width = track.width;
        var height = track.height;
        return MP4.box(MP4.types.tkhd, new Uint8Array([
            0x00,
            0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x02,
            (id >> 24) & 0xFF,
            (id >> 16) & 0xFF,
            (id >> 8) & 0xFF,
            id & 0xFF,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
            0x00, 0x00,
            (track.type === 'audio' ? 0x01 : 0x00), 0x00,
            0x00, 0x00,
            0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x00,
            (width >> 8) & 0xFF,
            width & 0xFF,
            0x00, 0x00,
            (height >> 8) & 0xFF,
            height & 0xFF,
            0x00, 0x00,
        ]));
    };
    MP4.traf = function (track, baseMediaDecodeTime) {
        var id = track.id;
        return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([
            0x00,
            0x02, 0x00, 0x00,
            (id >> 24),
            (id >> 16) & 0XFF,
            (id >> 8) & 0XFF,
            (id & 0xFF),
        ])), MP4.box(MP4.types.tfdt, new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            (baseMediaDecodeTime >> 24),
            (baseMediaDecodeTime >> 16) & 0XFF,
            (baseMediaDecodeTime >> 8) & 0XFF,
            (baseMediaDecodeTime & 0xFF),
        ])), MP4.trun(track, 16 +
            16 +
            8 +
            16 +
            8 +
            8));
    };
    MP4.trak = function (track) {
        track.duration = track.duration || 0xffffffff;
        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));
    };
    MP4.trex = function (track) {
        var id = track.id;
        return MP4.box(MP4.types.trex, new Uint8Array([
            0x00,
            0x00, 0x00, 0x00,
            (id >> 24),
            (id >> 16) & 0XFF,
            (id >> 8) & 0XFF,
            (id & 0xFF),
            0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x3c,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00,
        ]));
    };
    MP4.trun = function (track, offset) {
        var samples = track.samples || [];
        var len = samples.length;
        var additionalLen = track.isKeyFrame ? 4 : 0;
        var arraylen = 12 + additionalLen + (4 * len);
        var array = new Uint8Array(arraylen);
        offset += 8 + arraylen;
        array.set([
            0x00,
            0x00, 0x02, (track.isKeyFrame ? 0x05 : 0x01),
            (len >>> 24) & 0xFF,
            (len >>> 16) & 0xFF,
            (len >>> 8) & 0xFF,
            len & 0xFF,
            (offset >>> 24) & 0xFF,
            (offset >>> 16) & 0xFF,
            (offset >>> 8) & 0xFF,
            offset & 0xFF,
        ], 0);
        if (track.isKeyFrame) {
            array.set([
                0x00, 0x00, 0x00, 0x00,
            ], 12);
        }
        for (var i = 0; i < len; i++) {
            var sample = samples[i];
            var size = sample.size;
            array.set([
                (size >>> 24) & 0xFF,
                (size >>> 16) & 0xFF,
                (size >>> 8) & 0xFF,
                size & 0xFF,
            ], 12 + additionalLen + 4 * i);
        }
        return MP4.box(MP4.types.trun, array);
    };
    MP4.initSegment = function (tracks, duration, timescale) {
        if (!MP4.initalized) {
            MP4.init();
        }
        var movie = MP4.moov(tracks, duration, timescale);
        var result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);
        result.set(MP4.FTYP);
        result.set(movie, MP4.FTYP.byteLength);
        return result;
    };
    MP4.fragmentSegment = function (sn, baseMediaDecodeTime, track, payload) {
        var moof = MP4.moof(sn, baseMediaDecodeTime, track);
        var mdat = MP4.mdat(payload);
        var result = new Uint8Array(MP4.STYP.byteLength + moof.byteLength + mdat.byteLength);
        result.set(MP4.STYP);
        result.set(moof, MP4.STYP.byteLength);
        result.set(mdat, MP4.STYP.byteLength + moof.byteLength);
        return result;
    };
    MP4.types = {};
    MP4.initalized = false;
    return MP4;
}());
exports["default"] = MP4;


/***/ }),

/***/ "./node_modules/h264-converter/dist/util/NALU.js":
/*!*******************************************************!*\
  !*** ./node_modules/h264-converter/dist/util/NALU.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var NALU = (function () {
    function NALU(data) {
        this.data = data;
        this.nri = (data[0] & 0x60) >> 5;
        this.ntype = data[0] & 0x1f;
    }
    Object.defineProperty(NALU, "NDR", {
        get: function () { return 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NALU, "IDR", {
        get: function () { return 5; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NALU, "SEI", {
        get: function () { return 6; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NALU, "SPS", {
        get: function () { return 7; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NALU, "PPS", {
        get: function () { return 8; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NALU, "TYPES", {
        get: function () {
            var _a;
            return _a = {},
                _a[NALU.IDR] = 'IDR',
                _a[NALU.SEI] = 'SEI',
                _a[NALU.SPS] = 'SPS',
                _a[NALU.PPS] = 'PPS',
                _a[NALU.NDR] = 'NDR',
                _a;
        },
        enumerable: true,
        configurable: true
    });
    NALU.type = function (nalu) {
        if (nalu.ntype in NALU.TYPES) {
            return NALU.TYPES[nalu.ntype];
        }
        else {
            return 'UNKNOWN';
        }
    };
    NALU.prototype.type = function () {
        return this.ntype;
    };
    NALU.prototype.isKeyframe = function () {
        return this.ntype === NALU.IDR;
    };
    NALU.prototype.getSize = function () {
        return 4 + this.data.byteLength;
    };
    NALU.prototype.getData = function () {
        var result = new Uint8Array(this.getSize());
        var view = new DataView(result.buffer);
        view.setUint32(0, this.getSize() - 4);
        result.set(this.data, 4);
        return result;
    };
    return NALU;
}());
exports["default"] = NALU;


/***/ }),

/***/ "./node_modules/h264-converter/dist/util/bit-stream.js":
/*!*************************************************************!*\
  !*** ./node_modules/h264-converter/dist/util/bit-stream.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var BitStream = (function () {
    function BitStream(data) {
        this.data = data;
        this.index = 0;
        this.bitLength = data.byteLength * 8;
    }
    Object.defineProperty(BitStream.prototype, "bitsAvailable", {
        get: function () {
            return this.bitLength - this.index;
        },
        enumerable: true,
        configurable: true
    });
    BitStream.prototype.skipBits = function (size) {
        if (this.bitsAvailable < size) {
            throw new Error('no bytes available');
        }
        this.index += size;
    };
    BitStream.prototype.readBits = function (size) {
        var result = this.getBits(size, this.index);
        return result;
    };
    BitStream.prototype.getBits = function (size, offsetBits, moveIndex) {
        if (moveIndex === void 0) { moveIndex = true; }
        if (this.bitsAvailable < size) {
            throw new Error('no bytes available');
        }
        var offset = offsetBits % 8;
        var byte = this.data[(offsetBits / 8) | 0] & (0xff >>> offset);
        var bits = 8 - offset;
        if (bits >= size) {
            if (moveIndex) {
                this.index += size;
            }
            return byte >> (bits - size);
        }
        else {
            if (moveIndex) {
                this.index += bits;
            }
            var nextSize = size - bits;
            return (byte << nextSize) | this.getBits(nextSize, offsetBits + bits, moveIndex);
        }
    };
    BitStream.prototype.skipLZ = function () {
        var leadingZeroCount;
        for (leadingZeroCount = 0; leadingZeroCount < this.bitLength - this.index; ++leadingZeroCount) {
            if (0 !== this.getBits(1, this.index + leadingZeroCount, false)) {
                this.index += leadingZeroCount;
                return leadingZeroCount;
            }
        }
        return leadingZeroCount;
    };
    BitStream.prototype.skipUEG = function () {
        this.skipBits(1 + this.skipLZ());
    };
    BitStream.prototype.skipEG = function () {
        this.skipBits(1 + this.skipLZ());
    };
    BitStream.prototype.readUEG = function () {
        var prefix = this.skipLZ();
        return this.readBits(prefix + 1) - 1;
    };
    BitStream.prototype.readEG = function () {
        var value = this.readUEG();
        if (0x01 & value) {
            return (1 + value) >>> 1;
        }
        else {
            return -1 * (value >>> 1);
        }
    };
    BitStream.prototype.readBoolean = function () {
        return 1 === this.readBits(1);
    };
    BitStream.prototype.readUByte = function () {
        return this.readBits(8);
    };
    BitStream.prototype.readUShort = function () {
        return this.readBits(16);
    };
    BitStream.prototype.readUInt = function () {
        return this.readBits(32);
    };
    return BitStream;
}());
exports["default"] = BitStream;


/***/ }),

/***/ "./node_modules/h264-converter/dist/util/debug.js":
/*!********************************************************!*\
  !*** ./node_modules/h264-converter/dist/util/debug.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var mLogger;
var mErrorLogger;
function setLogger(logger, errorLogger) {
    mLogger = logger;
    mErrorLogger = errorLogger != null ? errorLogger : logger;
}
exports.setLogger = setLogger;
function isEnable() {
    return mLogger != null;
}
exports.isEnable = isEnable;
function log(message) {
    var optionalParams = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionalParams[_i - 1] = arguments[_i];
    }
    if (mLogger) {
        mLogger.apply(void 0, [message].concat(optionalParams));
    }
}
exports.log = log;
function error(message) {
    var optionalParams = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionalParams[_i - 1] = arguments[_i];
    }
    if (mErrorLogger) {
        mErrorLogger.apply(void 0, [message].concat(optionalParams));
    }
}
exports.error = error;


/***/ }),

/***/ "./node_modules/h264-converter/dist/util/nalu-stream-buffer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/h264-converter/dist/util/nalu-stream-buffer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var NALU_1 = __webpack_require__(/*! ./NALU */ "./node_modules/h264-converter/dist/util/NALU.js");
var VideoStreamBuffer = (function () {
    function VideoStreamBuffer() {
    }
    VideoStreamBuffer.prototype.clear = function () {
        this.buffer = undefined;
    };
    VideoStreamBuffer.prototype.append = function (value) {
        var nextNalHeader = function (b) {
            var i = 3;
            return function () {
                var count = 0;
                for (; i < b.length; i++) {
                    switch (b[i]) {
                        case 0:
                            count++;
                            break;
                        case 1:
                            if (count === 3) {
                                return i - 3;
                            }
                        default:
                            count = 0;
                    }
                }
                return;
            };
        };
        var result = [];
        var buffer;
        if (this.buffer) {
            if (value[3] === 1 && value[2] === 0 && value[1] === 0 && value[0] === 0) {
                result.push(new NALU_1.default(this.buffer.subarray(4)));
                buffer = Uint8Array.from(value);
            }
        }
        if (buffer == null) {
            buffer = this.mergeBuffer(value);
        }
        var lastIndex = 0;
        var f = nextNalHeader(buffer);
        for (var index = f(); index != null; index = f()) {
            result.push(new NALU_1.default(buffer.subarray(lastIndex + 4, index)));
            lastIndex = index;
        }
        this.buffer = buffer.subarray(lastIndex);
        return result;
    };
    VideoStreamBuffer.prototype.mergeBuffer = function (value) {
        if (this.buffer == null) {
            return Uint8Array.from(value);
        }
        else {
            var newBuffer = new Uint8Array(this.buffer.byteLength + value.length);
            if (this.buffer.byteLength > 0) {
                newBuffer.set(this.buffer, 0);
            }
            newBuffer.set(value, this.buffer.byteLength);
            return newBuffer;
        }
    };
    return VideoStreamBuffer;
}());
exports["default"] = VideoStreamBuffer;


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/xterm/css/xterm.css":
/*!******************************************!*\
  !*** ./node_modules/xterm/css/xterm.css ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/app.css":
/*!***************************!*\
  !*** ./src/style/app.css ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/devicelist.css":
/*!**********************************!*\
  !*** ./src/style/devicelist.css ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/devtools.css":
/*!********************************!*\
  !*** ./src/style/devtools.css ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/dialog.css":
/*!******************************!*\
  !*** ./src/style/dialog.css ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/filelisting.css":
/*!***********************************!*\
  !*** ./src/style/filelisting.css ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/style/morebox.css":
/*!*******************************!*\
  !*** ./src/style/morebox.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;


/***/ }),

/***/ "./src/public/images/buttons/arrow_back.svg":
/*!**************************************************!*\
  !*** ./src/public/images/buttons/arrow_back.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/cancel.svg":
/*!**********************************************!*\
  !*** ./src/public/images/buttons/cancel.svg ***!
  \**********************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12,2C6.47,2 2,6.47 2,12s4.47,10 10,10 10,-4.47 10,-10S17.53,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM15.59,7L12,10.59 8.41,7 7,8.41 10.59,12 7,15.59 8.41,17 12,13.41 15.59,17 17,15.59 13.41,12 17,8.41z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/menu.svg":
/*!********************************************!*\
  !*** ./src/public/images/buttons/menu.svg ***!
  \********************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3,18h18v-2L3,16v2zM3,13h18v-2L3,11v2zM3,6v2h18L21,6L3,6z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/offline.svg":
/*!***********************************************!*\
  !*** ./src/public/images/buttons/offline.svg ***!
  \***********************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12,2.02c-5.51,0 -9.98,4.47 -9.98,9.98s4.47,9.98 9.98,9.98 9.98,-4.47 9.98,-9.98S17.51,2.02 12,2.02zM12,19.98c-4.4,0 -7.98,-3.58 -7.98,-7.98S7.6,4.02 12,4.02 19.98,7.6 19.98,12 16.4,19.98 12,19.98zM12.75,5l-4.5,8.5h3.14L11.39,19l4.36,-8.5h-3z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/refresh.svg":
/*!***********************************************!*\
  !*** ./src/public/images/buttons/refresh.svg ***!
  \***********************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/settings.svg":
/*!************************************************!*\
  !*** ./src/public/images/buttons/settings.svg ***!
  \************************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.43,12.98c0.04,-0.32 0.07,-0.64 0.07,-0.98 0,-0.34 -0.03,-0.66 -0.07,-0.98l2.11,-1.65c0.19,-0.15 0.24,-0.42 0.12,-0.64l-2,-3.46c-0.09,-0.16 -0.26,-0.25 -0.44,-0.25 -0.06,0 -0.12,0.01 -0.17,0.03l-2.49,1c-0.52,-0.4 -1.08,-0.73 -1.69,-0.98l-0.38,-2.65C14.46,2.18 14.25,2 14,2h-4c-0.25,0 -0.46,0.18 -0.49,0.42l-0.38,2.65c-0.61,0.25 -1.17,0.59 -1.69,0.98l-2.49,-1c-0.06,-0.02 -0.12,-0.03 -0.18,-0.03 -0.17,0 -0.34,0.09 -0.43,0.25l-2,3.46c-0.13,0.22 -0.07,0.49 0.12,0.64l2.11,1.65c-0.04,0.32 -0.07,0.65 -0.07,0.98 0,0.33 0.03,0.66 0.07,0.98l-2.11,1.65c-0.19,0.15 -0.24,0.42 -0.12,0.64l2,3.46c0.09,0.16 0.26,0.25 0.44,0.25 0.06,0 0.12,-0.01 0.17,-0.03l2.49,-1c0.52,0.4 1.08,0.73 1.69,0.98l0.38,2.65c0.03,0.24 0.24,0.42 0.49,0.42h4c0.25,0 0.46,-0.18 0.49,-0.42l0.38,-2.65c0.61,-0.25 1.17,-0.59 1.69,-0.98l2.49,1c0.06,0.02 0.12,0.03 0.18,0.03 0.17,0 0.34,-0.09 0.43,-0.25l2,-3.46c0.12,-0.22 0.07,-0.49 -0.12,-0.64l-2.11,-1.65zM17.45,11.27c0.04,0.31 0.05,0.52 0.05,0.73 0,0.21 -0.02,0.43 -0.05,0.73l-0.14,1.13 0.89,0.7 1.08,0.84 -0.7,1.21 -1.27,-0.51 -1.04,-0.42 -0.9,0.68c-0.43,0.32 -0.84,0.56 -1.25,0.73l-1.06,0.43 -0.16,1.13 -0.2,1.35h-1.4l-0.19,-1.35 -0.16,-1.13 -1.06,-0.43c-0.43,-0.18 -0.83,-0.41 -1.23,-0.71l-0.91,-0.7 -1.06,0.43 -1.27,0.51 -0.7,-1.21 1.08,-0.84 0.89,-0.7 -0.14,-1.13c-0.03,-0.31 -0.05,-0.54 -0.05,-0.74s0.02,-0.43 0.05,-0.73l0.14,-1.13 -0.89,-0.7 -1.08,-0.84 0.7,-1.21 1.27,0.51 1.04,0.42 0.9,-0.68c0.43,-0.32 0.84,-0.56 1.25,-0.73l1.06,-0.43 0.16,-1.13 0.2,-1.35h1.39l0.19,1.35 0.16,1.13 1.06,0.43c0.43,0.18 0.83,0.41 1.23,0.71l0.91,0.7 1.06,-0.43 1.27,-0.51 0.7,1.21 -1.07,0.85 -0.89,0.7 0.14,1.13zM12,8c-2.21,0 -4,1.79 -4,4s1.79,4 4,4 4,-1.79 4,-4 -1.79,-4 -4,-4zM12,14c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2 2,0.9 2,2 -0.9,2 -2,2z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/toggle_off.svg":
/*!**************************************************!*\
  !*** ./src/public/images/buttons/toggle_off.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17,7H7c-2.76,0 -5,2.24 -5,5s2.24,5 5,5h10c2.76,0 5,-2.24 5,-5s-2.24,-5 -5,-5zM7,15c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/buttons/toggle_on.svg":
/*!*************************************************!*\
  !*** ./src/public/images/buttons/toggle_on.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17,7L7,7c-2.76,0 -5,2.24 -5,5s2.24,5 5,5h10c2.76,0 5,-2.24 5,-5s-2.24,-5 -5,-5zM17,15c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/System_Back_678.svg":
/*!**********************************************************!*\
  !*** ./src/public/images/skin-light/System_Back_678.svg ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = "<svg viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>Artboard 1</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"Artboard-1\" sketch:type=\"MSArtboardGroup\"><g id=\"System_Back\" sketch:type=\"MSLayerGroup\"><g id=\"Page-1\" sketch:type=\"MSShapeGroup\"><g id=\"System_Back\"><g id=\"Rectangle-118-+-back-12-Copy-11\"><rect id=\"Rectangle-118\" x=\"0\" y=\"0\" width=\"48\" height=\"48\"></rect><path d=\"M36.7088473,10.9494765 L36.7088478,37.6349688 C36.7088478,39.4039498 35.4820844,40.0949115 33.9646508,39.1757647 L12.1373795,25.9544497 C10.6218013,25.0364267 10.6199459,23.5491414 12.1373794,22.6299946 L33.9646503,9.40868054 C35.4802284,8.49065763 36.7088473,9.16835511 36.7088473,10.9494765 Z M33.5088482,13.4305237 L33.5088482,35.1305245 L15.5088482,24.2805241 L33.5088482,13.4305237 Z\" id=\"Shape\" fill=\"var(--svg-button-fill)\"></path></g></g></g></g></g></g></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/System_Home_678.svg":
/*!**********************************************************!*\
  !*** ./src/public/images/skin-light/System_Home_678.svg ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = "<svg viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>System_Home</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"System_Home\" sketch:type=\"MSArtboardGroup\"><g id=\"Rectangle-119-+-home-12-Copy-11\" sketch:type=\"MSLayerGroup\"><rect id=\"Rectangle-119\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"48\" height=\"48\"></rect><path d=\"M24,35.2 L24,35.2 C30.1855892,35.2 35.2,30.1855892 35.2,24 C35.2,17.8144108 30.1855892,12.8 24,12.8 C17.8144108,12.8 12.8,17.8144108 12.8,24 C12.8,30.1855892 17.8144108,35.2 24,35.2 L24,35.2 Z M24,38.4 L24,38.4 C16.0470996,38.4 9.6,31.9529004 9.6,24 C9.6,16.0470996 16.0470996,9.6 24,9.6 C31.9529004,9.6 38.4,16.0470996 38.4,24 C38.4,31.9529004 31.9529004,38.4 24,38.4 L24,38.4 Z\" id=\"Shape\" fill=\"var(--svg-button-fill)\" sketch:type=\"MSShapeGroup\"></path></g></g></g></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/System_Overview_678.svg":
/*!**************************************************************!*\
  !*** ./src/public/images/skin-light/System_Overview_678.svg ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "<svg viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>System_Overview</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"System_Overview\" sketch:type=\"MSArtboardGroup\"><g id=\"Rectangle-120-+-recent-12-Copy-11\" sketch:type=\"MSLayerGroup\"><rect id=\"Rectangle-120\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"48\" height=\"48\"></rect><path d=\"M12.7921429,12.8 L12.7921429,12.8 C12.7959945,12.8 12.8,12.7959954 12.8,12.7921429 L12.8,35.2078571 C12.8,35.2040055 12.7959954,35.2 12.7921429,35.2 L35.2078571,35.2 C35.2040055,35.2 35.2,35.2040046 35.2,35.2078571 L35.2,12.7921429 C35.2,12.7959945 35.2040046,12.8 35.2078571,12.8 L12.7921429,12.8 Z M12.7921429,9.6 L12.7921429,9.6 L35.2078571,9.6 C36.9718035,9.6 38.4,11.029171 38.4,12.7921429 L38.4,35.2078571 C38.4,36.9718035 36.970829,38.4 35.2078571,38.4 L12.7921429,38.4 C11.0281965,38.4 9.6,36.970829 9.6,35.2078571 L9.6,12.7921429 C9.6,11.0281965 11.029171,9.6 12.7921429,9.6 L12.7921429,9.6 Z\" id=\"Shape\" fill=\"var(--svg-button-fill)\" sketch:type=\"MSShapeGroup\"></path></g></g></g></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_keyboard_678_48dp.svg":
/*!***************************************************************!*\
  !*** ./src/public/images/skin-light/ic_keyboard_678_48dp.svg ***!
  \***************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" fill=\"var(--svg-button-fill)\"><path d=\"M40 10H8c-2.21 0-3.98 1.79-3.98 4L4 34c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V14c0-2.21-1.79-4-4-4zm-18 6h4v4h-4v-4zm0 6h4v4h-4v-4zm-6-6h4v4h-4v-4zm0 6h4v4h-4v-4zm-2 4h-4v-4h4v4zm0-6h-4v-4h4v4zm18 14H16v-4h16v4zm0-8h-4v-4h4v4zm0-6h-4v-4h4v4zm6 6h-4v-4h4v4zm0-6h-4v-4h4v4z\"></path><path d=\"M0 0h48v48H0zm0 0h48v48H0z\" fill=\"none\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_more_horiz_678_48dp.svg":
/*!*****************************************************************!*\
  !*** ./src/public/images/skin-light/ic_more_horiz_678_48dp.svg ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" fill=\"var(--svg-button-fill)\"><path d=\"M0 0h48v48H0z\" fill=\"none\"></path><path d=\"M12 20c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm24 0c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-12 0c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_photo_camera_678_48dp.svg":
/*!*******************************************************************!*\
  !*** ./src/public/images/skin-light/ic_photo_camera_678_48dp.svg ***!
  \*******************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" fill=\"var(--svg-button-fill)\"><circle cx=\"24\" cy=\"24\" r=\"6.4\"></circle><path d=\"M18 4l-3.66 4H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4h-6.34L30 4H18zm6 30c-5.52 0-10-4.48-10-10s4.48-10 10-10 10 4.48 10 10-4.48 10-10 10z\"></path><path d=\"M0 0h48v48H0z\" fill=\"none\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_power_settings_new_678_48px.svg":
/*!*************************************************************************!*\
  !*** ./src/public/images/skin-light/ic_power_settings_new_678_48px.svg ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"none\" d=\"M0 0h48v48H0z\"></path><path d=\"M26 6h-4v20h4V6zm9.67 4.33l-2.83 2.83C35.98 15.73 38 19.62 38 24c0 7.73-6.27 14-14 14s-14-6.27-14-14c0-4.38 2.02-8.27 5.16-10.84l-2.83-2.83C8.47 13.63 6 18.52 6 24c0 9.94 8.06 18 18 18s18-8.06 18-18c0-5.48-2.47-10.37-6.33-13.67z\" fill=\"var(--svg-button-fill)\" stroke=\"var(--svg-button-fill)\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_volume_down_678_48px.svg":
/*!******************************************************************!*\
  !*** ./src/public/images/skin-light/ic_volume_down_678_48px.svg ***!
  \******************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path d=\"M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z\" fill=\"var(--svg-button-fill)\" stroke=\"var(--svg-button-fill)\"></path><path d=\"M0 0h48v48H0z\" fill=\"none\"></path></svg>"

/***/ }),

/***/ "./src/public/images/skin-light/ic_volume_up_678_48px.svg":
/*!****************************************************************!*\
  !*** ./src/public/images/skin-light/ic_volume_up_678_48px.svg ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path d=\"M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z\" fill=\"var(--svg-button-fill)\" stroke=\"var(--svg-button-fill)\"></path><path d=\"M0 0h48v48H0z\" fill=\"none\"></path></svg>"

/***/ }),

/***/ "./node_modules/sylvester.js/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/sylvester.js/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel

var global = (Function('return this'))();

exports.Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
global.$V = exports.Vector.create;
exports.Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
global.$M = exports.Matrix.create;
exports.Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");
global.$L = exports.Line.create;
exports.Plane = __webpack_require__(/*! ./plane */ "./node_modules/sylvester.js/lib/plane.js");
global.$P = exports.Plane.create;
exports.Line.Segment = __webpack_require__(/*! ./line.segment */ "./node_modules/sylvester.js/lib/line.segment.js");
exports.Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");


/***/ }),

/***/ "./node_modules/sylvester.js/lib/line.js":
/*!***********************************************!*\
  !*** ./node_modules/sylvester.js/lib/line.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
var Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
var Plane = __webpack_require__(/*! ./plane */ "./node_modules/sylvester.js/lib/plane.js");
var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");

// Line class - depends on Vector, and some methods require Matrix and Plane.

function Line() {}
Line.prototype = {

  // Returns true if the argument occupies the same space as the line
  eql: function(line) {
    return (this.isParallelTo(line) && this.contains(line.anchor));
  },

  // Returns a copy of the line
  dup: function() {
    return Line.create(this.anchor, this.direction);
  },

  // Returns the result of translating the line by the given vector/array
  translate: function(vector) {
    var V = vector.elements || vector;
    return Line.create([
      this.anchor.elements[0] + V[0],
      this.anchor.elements[1] + V[1],
      this.anchor.elements[2] + (V[2] || 0)
    ], this.direction);
  },

  // Returns true if the line is parallel to the argument. Here, 'parallel to'
  // means that the argument's direction is either parallel or antiparallel to
  // the line's own direction. A line is parallel to a plane if the two do not
  // have a unique intersection.
  isParallelTo: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }
    var theta = this.direction.angleFrom(obj.direction);
    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);
  },

  // Returns the line's perpendicular distance from the argument,
  // which can be a point, a line or a plane
  distanceFrom: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }
    if (obj.direction) {
      // obj is a line
      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }
      var N = this.direction.cross(obj.direction).toUnitVector().elements;
      var A = this.anchor.elements, B = obj.anchor.elements;
      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      var A = this.anchor.elements, D = this.direction.elements;
      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];
      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);
      if (modPA === 0) return 0;
      // Assumes direction vector is normalized
      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;
      var sin2 = 1 - cosTheta*cosTheta;
      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));
    }
  },

  // Returns true iff the argument is a point on the line, or if the argument
  // is a line segment lying within the receiver
  contains: function(obj) {
    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
    var dist = this.distanceFrom(obj);
    return (dist !== null && dist <= Sylvester.precision);
  },

  // Returns the distance from the anchor of the given point. Negative values are
  // returned for points that are in the opposite direction to the line's direction from
  // the line's anchor point.
  positionOf: function(point) {
    if (!this.contains(point)) { return null; }
    var P = point.elements || point;
    var A = this.anchor.elements, D = this.direction.elements;
    return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];
  },

  // Returns true iff the line lies in the given plane
  liesIn: function(plane) {
    return plane.contains(this);
  },

  // Returns true iff the line has a unique point of intersection with the argument
  intersects: function(obj) {
    if (obj.normal) { return obj.intersects(this); }
    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);
  },

  // Returns the unique intersection point with the argument, if one exists
  intersectionWith: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }
    if (!this.intersects(obj)) { return null; }
    var P = this.anchor.elements, X = this.direction.elements,
        Q = obj.anchor.elements, Y = obj.direction.elements;
    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];
    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];
    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;
    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;
    var XdotX = X1*X1 + X2*X2 + X3*X3;
    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;
    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;
    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);
    return Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);
  },

  // Returns the point on the line that is closest to the given point or line/line segment
  pointClosestTo: function(obj) {
    if (obj.start && obj.end) {
      // obj is a line segment
      var P = obj.pointClosestTo(this);
      return (P === null) ? null : this.pointClosestTo(P);
    } else if (obj.direction) {
      // obj is a line
      if (this.intersects(obj)) { return this.intersectionWith(obj); }
      if (this.isParallelTo(obj)) { return null; }
      var D = this.direction.elements, E = obj.direction.elements;
      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];
      // Create plane containing obj and the shared normal and intersect this with it
      // Thank you: http://www.cgafaq.info/wiki/Line-line_distance
      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);
      var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];
      var P = Plane.create(obj.anchor, N);
      return P.intersectionWith(this);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      if (this.contains(P)) { return Vector.create(P); }
      var A = this.anchor.elements, D = this.direction.elements;
      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];
      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),
          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);
      var V = Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);
      var k = this.distanceFrom(P) / V.modulus();
      return Vector.create([
        P[0] + V.elements[0] * k,
        P[1] + V.elements[1] * k,
        (P[2] || 0) + V.elements[2] * k
      ]);
    }
  },

  // Returns a copy of the line rotated by t radians about the given line. Works by
  // finding the argument's closest point to this line's anchor point (call this C) and
  // rotating the anchor about C. Also rotates the line's direction about the argument's.
  // Be careful with this - the rotation axis' direction affects the outcome!
  rotate: function(t, line) {
    // If we're working in 2D
    if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), Vector.k); }
    var R = Matrix.Rotation(t, line.direction).elements;
    var C = line.pointClosestTo(this.anchor).elements;
    var A = this.anchor.elements, D = this.direction.elements;
    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
    return Line.create([
      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
    ], [
      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],
      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],
      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]
    ]);
  },

  // Returns a copy of the line with its direction vector reversed.
  // Useful when using lines for rotations.
  reverse: function() {
    return Line.create(this.anchor, this.direction.x(-1));
  },

  // Returns the line's reflection in the given point or line
  reflectionIn: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var A = this.anchor.elements, D = this.direction.elements;
      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];
      var newA = this.anchor.reflectionIn(obj).elements;
      // Add the line's direction vector to its anchor, then mirror that in the plane
      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;
      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;
      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];
      return Line.create(newA, newD);
    } else if (obj.direction) {
      // obj is a line - reflection obtained by rotating PI radians about obj
      return this.rotate(Math.PI, obj);
    } else {
      // obj is a point - just reflect the line's anchor in it
      var P = obj.elements || obj;
      return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);
    }
  },

  // Set the line's anchor point and direction.
  setVectors: function(anchor, direction) {
    // Need to do this so that line's properties are not
    // references to the arguments passed in
    anchor = Vector.create(anchor);
    direction = Vector.create(direction);
    if (anchor.elements.length == 2) {anchor.elements.push(0); }
    if (direction.elements.length == 2) { direction.elements.push(0); }
    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }
    var mod = direction.modulus();
    if (mod === 0) { return null; }
    this.anchor = anchor;
    this.direction = Vector.create([
      direction.elements[0] / mod,
      direction.elements[1] / mod,
      direction.elements[2] / mod
    ]);
    return this;
  }
};

// Constructor function
Line.create = function(anchor, direction) {
  var L = new Line();
  return L.setVectors(anchor, direction);
};

// Axes
Line.X = Line.create(Vector.Zero(3), Vector.i);
Line.Y = Line.create(Vector.Zero(3), Vector.j);
Line.Z = Line.create(Vector.Zero(3), Vector.k);

module.exports = Line;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/line.segment.js":
/*!*******************************************************!*\
  !*** ./node_modules/sylvester.js/lib/line.segment.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Line.Segment class - depends on Line and its dependencies.

var Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");

Line.Segment = function() {};
Line.Segment.prototype = {

  // Returns true iff the line segment is equal to the argument
  eql: function(segment) {
    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||
        (this.start.eql(segment.end) && this.end.eql(segment.start));
  },

  // Returns a copy of the line segment
  dup: function() {
    return Line.Segment.create(this.start, this.end);
  },

  // Returns the length of the line segment
  length: function() {
    var A = this.start.elements, B = this.end.elements;
    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];
    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);
  },

  // Returns the line segment as a vector equal to its
  // end point relative to its endpoint
  toVector: function() {
    var A = this.start.elements, B = this.end.elements;
    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);
  },

  // Returns the segment's midpoint as a vector
  midpoint: function() {
    var A = this.start.elements, B = this.end.elements;
    return Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);
  },

  // Returns the plane that bisects the segment
  bisectingPlane: function() {
    return Plane.create(this.midpoint(), this.toVector());
  },

  // Returns the result of translating the line by the given vector/array
  translate: function(vector) {
    var V = vector.elements || vector;
    var S = this.start.elements, E = this.end.elements;
    return Line.Segment.create(
      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],
      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]
    );
  },

  // Returns true iff the line segment is parallel to the argument. It simply forwards
  // the method call onto its line property.
  isParallelTo: function(obj) {
    return this.line.isParallelTo(obj);
  },

  // Returns the distance between the argument and the line segment's closest point to the argument
  distanceFrom: function(obj) {
    var P = this.pointClosestTo(obj);
    return (P === null) ? null : P.distanceFrom(obj);
  },

  // Returns true iff the given point lies on the segment
  contains: function(obj) {
    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
    var P = (obj.elements || obj).slice();
    if (P.length == 2) { P.push(0); }
    if (this.start.eql(P)) { return true; }
    var S = this.start.elements;
    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);
    var vect = this.toVector();
    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();
  },

  // Returns true iff the line segment intersects the argument
  intersects: function(obj) {
    return (this.intersectionWith(obj) !== null);
  },

  // Returns the unique point of intersection with the argument
  intersectionWith: function(obj) {
    if (!this.line.intersects(obj)) { return null; }
    var P = this.line.intersectionWith(obj);
    return (this.contains(P) ? P : null);
  },

  // Returns the point on the line segment closest to the given object
  pointClosestTo: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var V = this.line.intersectionWith(obj);
      if (V === null) { return null; }
      return this.pointClosestTo(V);
    } else {
      // obj is a line (segment) or point
      var P = this.line.pointClosestTo(obj);
      if (P === null) { return null; }
      if (this.contains(P)) { return P; }
      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();
    }
  },

  // Set the start and end-points of the segment
  setPoints: function(startPoint, endPoint) {
    startPoint = Vector.create(startPoint).to3D();
    endPoint = Vector.create(endPoint).to3D();
    if (startPoint === null || endPoint === null) { return null; }
    this.line = Line.create(startPoint, endPoint.subtract(startPoint));
    this.start = startPoint;
    this.end = endPoint;
    return this;
  }
};

// Constructor function
Line.Segment.create = function(v1, v2) {
  var S = new Line.Segment();
  return S.setPoints(v1, v2);
};

module.exports = Line.Segment;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/matrix.js":
/*!*************************************************!*\
  !*** ./node_modules/sylvester.js/lib/matrix.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Matrix class - depends on Vector.

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");

// augment a matrix M with identity rows/cols
function identSize(M, m, n, k) {
    var e = M.elements;
    var i = k - 1;

    while(i--) {
	var row = [];
	
	for(var j = 0; j < n; j++)
	    row.push(j == i ? 1 : 0);
	
        e.unshift(row);
    }
    
    for(var i = k - 1; i < m; i++) {
        while(e[i].length < n)
            e[i].unshift(0);
    }

    return $M(e);
}

function pca(X) {
    var Sigma = X.transpose().x(X).x(1 / X.rows());
    var svd = Sigma.svd();
    return {U: svd.U, S: svd.S};
}

// singular value decomposition in pure javascript
function svdJs() {
    var A = this;
    var V = Matrix.I(A.rows());
    var S = A.transpose();
    var U = Matrix.I(A.cols());
    var err = Number.MAX_VALUE;
    var i = 0;
    var maxLoop = 100;

    while(err > 2.2737e-13 && i < maxLoop) {
        var qr = S.transpose().qrJs();
        S = qr.R;
        V = V.x(qr.Q);
        qr = S.transpose().qrJs();
        U = U.x(qr.Q);
        S = qr.R;

        var e = S.triu(1).unroll().norm();
        var f = S.diagonal().norm();

        if(f == 0)
            f = 1;

        err = e / f;

        i++;
    }

    var ss = S.diagonal();
    var s = [];

    for(var i = 1; i <= ss.cols(); i++) {
        var ssn = ss.e(i);
        s.push(Math.abs(ssn));

        if(ssn < 0) {
            for(var j = 0; j < U.rows(); j++) {
                V.elements[j][i - 1] = -(V.elements[j][i - 1]);
            }
        }
    }

    return {U: U, S: $V(s).toDiagonalMatrix(), V: V};
}



// QR decomposition in pure javascript
function qrJs() {
    var m = this.rows();
    var n = this.cols();
    var Q = Matrix.I(m);
    var A = this;
    
    for(var k = 1; k < Math.min(m, n); k++) {
	var ak = A.slice(k, 0, k, k).col(1);
	var oneZero = [1];
	
	while(oneZero.length <=  m - k)
	    oneZero.push(0);
	
	oneZero = $V(oneZero);
	var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));
	var Vk = $M(vk);
	var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));
	var Qk = identSize(Hk, m, n, k);
	A = Qk.x(A);
	// slow way to compute Q
	Q = Q.x(Qk);
    }
    
    return {Q: Q, R: A};
}




function Matrix() {}
Matrix.prototype = {
    // solve a system of linear equations (work in progress)
    solve: function(b) {
	var lu = this.lu();
	b = lu.P.x(b);
	var y = lu.L.forwardSubstitute(b);
	var x = lu.U.backSubstitute(y);
	return lu.P.x(x);
	//return this.inv().x(b);
    },

    // project a matrix onto a lower dim
    pcaProject: function(k, U) {
	var U = U || pca(this).U;
	var Ureduce= U.slice(1, U.rows(), 1, k);
	return {Z: this.x(Ureduce), U: U};
    },

    // recover a matrix to a higher dimension
    pcaRecover: function(U) {
	var k = this.cols();
	var Ureduce = U.slice(1, U.rows(), 1, k);
	return this.x(Ureduce.transpose());
    },    

    // grab the upper triangular part of the matrix
    triu: function(k) {
	if(!k)
	    k = 0;
	
	return this.map(function(x, i, j) {
	    return j - i >= k ? x : 0;
	});
    },

    // unroll a matrix into a vector
    unroll: function() {
	var v = [];
	
	for(var i = 1; i <= this.cols(); i++) {
	    for(var j = 1; j <= this.rows(); j++) {
		v.push(this.e(j, i));
	    }
	}

	return $V(v);
    },

    // return a sub-block of the matrix
    slice: function(startRow, endRow, startCol, endCol) {
	var x = [];
	
	if(endRow == 0)
	    endRow = this.rows();
	
	if(endCol == 0)
	    endCol = this.cols();

	for(i = startRow; i <= endRow; i++) {
	    var row = [];

	    for(j = startCol; j <= endCol; j++) {
		row.push(this.e(i, j));
	    }

	    x.push(row);
	}

	return $M(x);
    },

    // Returns element (i,j) of the matrix
    e: function(i,j) {
	if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
	return this.elements[i - 1][j - 1];
    },

    // Returns row k of the matrix as a vector
    row: function(i) {
	if (i > this.elements.length) { return null; }
	return $V(this.elements[i - 1]);
    },

    // Returns column k of the matrix as a vector
    col: function(j) {
	if (j > this.elements[0].length) { return null; }
	var col = [], n = this.elements.length;
	for (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }
	return $V(col);
    },

    // Returns the number of rows/columns the matrix has
    dimensions: function() {
	return {rows: this.elements.length, cols: this.elements[0].length};
    },

    // Returns the number of rows in the matrix
    rows: function() {
	return this.elements.length;
    },

    // Returns the number of columns in the matrix
    cols: function() {
	return this.elements[0].length;
    },

    approxEql: function(matrix) {
	return this.eql(matrix, Sylvester.approxPrecision);
    },

    // Returns true iff the matrix is equal to the argument. You can supply
    // a vector as the argument, in which case the receiver must be a
    // one-column matrix equal to the vector.
    eql: function(matrix, precision) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	if (this.elements.length != M.length ||
            this.elements[0].length != M[0].length) { return false; }
	var i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) { j = nj;
		      while (j--) {
			  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) { return false; }
		      }
		    }
	return true;
    },

    // Returns a copy of the matrix
    dup: function() {
	return Matrix.create(this.elements);
    },

    // Maps the matrix to another matrix (of the same dimensions) according to the given function
    map: function(fn) {
    var els = [], i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) { j = nj;
		      els[i] = [];
		      while (j--) {
			  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);
		      }
		    }
	return Matrix.create(els);
    },

    // Returns true iff the argument has the same dimensions as the matrix
    isSameSizeAs: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	return (this.elements.length == M.length &&
		this.elements[0].length == M[0].length);
    },

    // Returns the result of adding the argument to the matrix
    add: function(matrix) {
	if(typeof(matrix) == 'number') {
	    return this.map(function(x, i, j) { return x + matrix});
	} else {
	    var M = matrix.elements || matrix;
	    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	    if (!this.isSameSizeAs(M)) { return null; }
	    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });
	}
    },

    // Returns the result of subtracting the argument from the matrix
    subtract: function(matrix) {
	if(typeof(matrix) == 'number') {
	    return this.map(function(x, i, j) { return x - matrix});
	} else {
	    var M = matrix.elements || matrix;
	    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	    if (!this.isSameSizeAs(M)) { return null; }
	    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });
	}
    },

    // Returns true iff the matrix can multiply the argument from the left
    canMultiplyFromLeft: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	// this.columns should equal matrix.rows
	return (this.elements[0].length == M.length);
    },

    // Returns the result of a multiplication-style operation the matrix from the right by the argument.
    // If the argument is a scalar then just operate on all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    mulOp: function(matrix, op) {
	if (!matrix.elements) {
	    return this.map(function(x) { return op(x, matrix); });
	}

	var returnVector = matrix.modulus ? true : false;
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') 
	    M = Matrix.create(M).elements;
	if (!this.canMultiplyFromLeft(M)) 
	    return null; 
	var e = this.elements, rowThis, rowElem, elements = [],
        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;

	while (i--) {
            rowElem = [];
            rowThis = e[i];
            j = n;

            while (j--) {
		sum = 0;
		k = o;

		while (k--) {
                    sum += op(rowThis[k], M[k][j]);
		}

		rowElem[j] = sum;
            }

            elements[i] = rowElem;
	}

	var M = Matrix.create(elements);
	return returnVector ? M.col(1) : M;
    },

    // Returns the result of dividing the matrix from the right by the argument.
    // If the argument is a scalar then just divide all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    div: function(matrix) {
	return this.mulOp(matrix, function(x, y) { return x / y});
    },

    // Returns the result of multiplying the matrix from the right by the argument.
    // If the argument is a scalar then just multiply all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    multiply: function(matrix) {
	return this.mulOp(matrix, function(x, y) { return x * y});
    },

    x: function(matrix) { return this.multiply(matrix); },

    elementMultiply: function(v) {
        return this.map(function(k, i, j) {
            return v.e(i, j) * k;
        });
    },

    // sum all elements in the matrix
    sum: function() {
        var sum = 0;

        this.map(function(x) { sum += x;});

        return sum;
    },

    // Returns a Vector of each colum averaged.
    mean: function() {
      var dim = this.dimensions();
      var r = [];
      for (var i = 1; i <= dim.cols; i++) {
        r.push(this.col(i).sum() / dim.rows);
      }
      return $V(r);
    },

    column: function(n) {
	return this.col(n);
    },

    // element-wise log
    log: function() {
	return this.map(function(x) { return Math.log(x); });
    },

    // Returns a submatrix taken from the matrix
    // Argument order is: start row, start col, nrows, ncols
    // Element selection wraps if the required index is outside the matrix's bounds, so you could
    // use this to perform row/column cycling or copy-augmenting.
    minor: function(a, b, c, d) {
	var elements = [], ni = c, i, nj, j;
	var rows = this.elements.length, cols = this.elements[0].length;
	while (ni--) {
	    i = c - ni - 1;
	    elements[i] = [];
	    nj = d;
	    while (nj--) {
		j = d - nj - 1;
		elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];
	    }
	}
	return Matrix.create(elements);
    },

    // Returns the transpose of the matrix
    transpose: function() {
    var rows = this.elements.length, i, cols = this.elements[0].length, j;
	var elements = [], i = cols;
	while (i--) {
	    j = rows;
	    elements[i] = [];
	    while (j--) {
		elements[i][j] = this.elements[j][i];
	    }
	}
	return Matrix.create(elements);
    },

    // Returns true iff the matrix is square
    isSquare: function() {
	return (this.elements.length == this.elements[0].length);
    },

    // Returns the (absolute) largest element of the matrix
    max: function() {
	var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) {
	    j = nj;
	    while (j--) {
		if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
	    }
	}
	return m;
    },

    // Returns the indeces of the first match found by reading row-by-row from left to right
    indexOf: function(x) {
	var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;
	for (i = 0; i < ni; i++) {
	    for (j = 0; j < nj; j++) {
		if (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }
	    }
	}
	return null;
    },

    // If the matrix is square, returns the diagonal elements as a vector.
    // Otherwise, returns null.
    diagonal: function() {
	if (!this.isSquare) { return null; }
	var els = [], n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    els.push(this.elements[i][i]);
	}
	return $V(els);
    },

    // Make the matrix upper (right) triangular by Gaussian elimination.
    // This method only adds multiples of rows to other rows. No rows are
    // scaled up or switched, and the determinant is preserved.
    toRightTriangular: function() {
	var M = this.dup(), els;
	var n = this.elements.length, i, j, np = this.elements[0].length, p;
	for (i = 0; i < n; i++) {
	    if (M.elements[i][i] == 0) {
		for (j = i + 1; j < n; j++) {
		    if (M.elements[j][i] != 0) {
			els = [];
			for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }
			M.elements[i] = els;
			break;
		    }
		}
	    }
	    if (M.elements[i][i] != 0) {
		for (j = i + 1; j < n; j++) {
		    var multiplier = M.elements[j][i] / M.elements[i][i];
		    els = [];
		    for (p = 0; p < np; p++) {
			// Elements with column numbers up to an including the number
			// of the row that we're subtracting can safely be set straight to
			// zero, since that's the point of this routine and it avoids having
			// to loop over and correct rounding errors later
			els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
		    }
		    M.elements[j] = els;
		}
	    }
	}
	return M;
    },

    toUpperTriangular: function() { return this.toRightTriangular(); },

    // Returns the determinant for square matrices
    determinant: function() {
	if (!this.isSquare()) { return null; }
	if (this.cols == 1 && this.rows == 1) { return this.row(1); }
	if (this.cols == 0 && this.rows == 0) { return 1; }
	var M = this.toRightTriangular();
	var det = M.elements[0][0], n = M.elements.length;
	for (var i = 1; i < n; i++) {
	    det = det * M.elements[i][i];
	}
	return det;
    },
    det: function() { return this.determinant(); },

    // Returns true iff the matrix is singular
    isSingular: function() {
	return (this.isSquare() && this.determinant() === 0);
    },

    // Returns the trace for square matrices
    trace: function() {
	if (!this.isSquare()) { return null; }
	var tr = this.elements[0][0], n = this.elements.length;
	for (var i = 1; i < n; i++) {
	    tr += this.elements[i][i];
	}
	return tr;
    },

    tr: function() { return this.trace(); },

    // Returns the rank of the matrix
    rank: function() {
	var M = this.toRightTriangular(), rank = 0;
	var i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) {
	    j = nj;
	    while (j--) {
		if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }
	    }
	}
	return rank;
    },

    rk: function() { return this.rank(); },

    // Returns the result of attaching the given argument to the right-hand side of the matrix
    augment: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	var T = this.dup(), cols = T.elements[0].length;
	var i = T.elements.length, nj = M[0].length, j;
	if (i != M.length) { return null; }
	while (i--) {
	    j = nj;
	    while (j--) {
		T.elements[i][cols + j] = M[i][j];
	    }
	}
	return T;
    },

    // Returns the inverse (if one exists) using Gauss-Jordan
    inverse: function() {
	if (!this.isSquare() || this.isSingular()) { return null; }
	var n = this.elements.length, i = n, j;
	var M = this.augment(Matrix.I(n)).toRightTriangular();
	var np = M.elements[0].length, p, els, divisor;
	var inverse_elements = [], new_element;
	// Matrix is non-singular so there will be no zeros on the diagonal
	// Cycle through rows from last to first
	while (i--) {
	    // First, normalise diagonal elements to 1
	    els = [];
	    inverse_elements[i] = [];
	    divisor = M.elements[i][i];
	    for (p = 0; p < np; p++) {
        new_element = M.elements[i][p] / divisor;
		els.push(new_element);
		// Shuffle off the current row of the right hand side into the results
		// array as it will not be modified by later runs through this loop
		if (p >= n) { inverse_elements[i].push(new_element); }
	    }
	    M.elements[i] = els;
	    // Then, subtract this row from those above it to
	    // give the identity matrix on the left hand side
	    j = i;
	    while (j--) {
		els = [];
		for (p = 0; p < np; p++) {
		    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
		}
		M.elements[j] = els;
	    }
	}
	return Matrix.create(inverse_elements);
    },

    inv: function() { return this.inverse(); },

    // Returns the result of rounding all the elements
    round: function() {
	return this.map(function(x) { return Math.round(x); });
    },

    // Returns a copy of the matrix with elements set to the given value if they
    // differ from it by less than Sylvester.precision
    snapTo: function(x) {
	return this.map(function(p) {
	    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;
	});
    },

    // Returns a string representation of the matrix
    inspect: function() {
	var matrix_rows = [];
	var n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    matrix_rows.push($V(this.elements[i]).inspect());
	}
	return matrix_rows.join('\n');
    },

    // Returns a array representation of the matrix
    toArray: function() {
    	var matrix_rows = [];
    	var n = this.elements.length;
    	for (var i = 0; i < n; i++) {
        matrix_rows.push(this.elements[i]);
    	}
      return matrix_rows;
    },


    // Set the matrix's elements from an array. If the argument passed
    // is a vector, the resulting matrix will be a single column.
    setElements: function(els) {
	var i, j, elements = els.elements || els;
	if (typeof(elements[0][0]) != 'undefined') {
	    i = elements.length;
	    this.elements = [];
	    while (i--) {
		j = elements[i].length;
		this.elements[i] = [];
		while (j--) {
		    this.elements[i][j] = elements[i][j];
		}
	    }
	    return this;
	}
	var n = elements.length;
	this.elements = [];
	for (i = 0; i < n; i++) {
	    this.elements.push([elements[i]]);
	}
	return this;
    },

    // return the indexes of the columns with the largest value
    // for each row
    maxColumnIndexes: function() {
	var maxes = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var max = null;
	    var maxIndex = -1;

	    for(var j = 1; j <= this.cols(); j++) {
		if(max === null || this.e(i, j) > max) {
		    max = this.e(i, j);
		    maxIndex = j;
		}
	    }

	    maxes.push(maxIndex);
	}

	return $V(maxes);
    },

    // return the largest values in each row
    maxColumns: function() {
	var maxes = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var max = null;

	    for(var j = 1; j <= this.cols(); j++) {
		if(max === null || this.e(i, j) > max) {
		    max = this.e(i, j);
		}
	    }

	    maxes.push(max);
	}

	return $V(maxes);
    },

    // return the indexes of the columns with the smallest values
    // for each row
    minColumnIndexes: function() {
	var mins = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var min = null;
	    var minIndex = -1;

	    for(var j = 1; j <= this.cols(); j++) {
		if(min === null || this.e(i, j) < min) {
		    min = this.e(i, j);
		    minIndex = j;
		}
	    }

	    mins.push(minIndex);
	}

	return $V(mins);
    },

    // return the smallest values in each row
    minColumns: function() {
	var mins = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var min = null;

	    for(var j = 1; j <= this.cols(); j++) {
		if(min === null || this.e(i, j) < min) {
		    min = this.e(i, j);
		}
	    }

	    mins.push(min);
	}

	return $V(mins);
    },
    
    // perorm a partial pivot on the matrix. essentially move the largest
    // row below-or-including the pivot and replace the pivot's row with it.
    // a pivot matrix is returned so multiplication can perform the transform.
    partialPivot: function(k, j, P, A, L) {
	var maxIndex = 0;
	var maxValue = 0;

	for(var i = k; i <= A.rows(); i++) {
	    if(Math.abs(A.e(i, j)) > maxValue) {
		maxValue = Math.abs(A.e(k, j));
		maxIndex = i;
	    }
	}

	if(maxIndex != k) {
	    var tmp = A.elements[k - 1];
	    A.elements[k - 1] = A.elements[maxIndex - 1];
	    A.elements[maxIndex - 1] = tmp;
	    
	    P.elements[k - 1][k - 1] = 0;
	    P.elements[k - 1][maxIndex - 1] = 1;
	    P.elements[maxIndex - 1][maxIndex - 1] = 0;
	    P.elements[maxIndex - 1][k - 1] = 1;
	}
	
	return P;
    },

    // solve lower-triangular matrix * x = b via forward substitution
    forwardSubstitute: function(b) {
	var xa = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var w = 0;

	    for(var j = 1; j < i; j++) {
		w += this.e(i, j) * xa[j - 1];
	    }

	    xa.push((b.e(i) - w) / this.e(i, i));
	}

	return $V(xa);
    },

    // solve an upper-triangular matrix * x = b via back substitution
    backSubstitute: function(b) {
	var xa = [];

	for(var i = this.rows(); i > 0; i--) {
	    var w = 0;

	    for(var j = this.cols(); j > i; j--) {
		w += this.e(i, j) * xa[this.rows() - j];
	    }

	    xa.push((b.e(i) - w) / this.e(i, i));
	}

	return $V(xa.reverse());
    },
    
    luJs: luJs,
    svdJs: svdJs,
    qrJs: qrJs,
};


var tolerance =  1.4901e-08;

// pure Javascript LU factorization
function luJs() {
    var A = this.dup();
    var L = Matrix.I(A.rows());
    var P = Matrix.I(A.rows());
    var U = Matrix.Zeros(A.rows(), A.cols());
    var p = 1;

    for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {
	P = A.partialPivot(k, p, P, A, L);
	
	for(var i = k + 1; i <= A.rows(); i++) {
	    var l = A.e(i, p) / A.e(k, p);
	    L.elements[i - 1][k - 1] = l;
	    
	    for(var j = k + 1 ; j <= A.cols(); j++) {
		A.elements[i - 1][j - 1] -= A.e(k, j) * l;
	    }
	}
	
	for(var j = k; j <= A.cols(); j++) {
	    U.elements[k - 1][j - 1] = A.e(k, j);
	}

	if(p < A.cols())
	    p++;
    }    
    
    return {L: L, U: U, P: P};
}



Matrix.prototype.svd = svdJs;
Matrix.prototype.qr = qrJs;
Matrix.prototype.lu = luJs;

// Constructor function
Matrix.create = function(aElements) {
    var M = new Matrix().setElements(aElements);
    return M;
};

// Identity matrix of size n
Matrix.I = function(n) {
    var els = [], i = n, j;
    while (i--) {
	j = n;
	els[i] = [];
	while (j--) {
	    els[i][j] = (i == j) ? 1 : 0;
	}
    }
    return Matrix.create(els);
};

Matrix.loadFile = function(file) {
    var fs = __webpack_require__(/*! fs */ "fs");
    var contents = fs.readFileSync(file, 'utf-8');
    var matrix = [];

    var rowArray = contents.split('\n');
    for (var i = 0; i < rowArray.length; i++) {
	var d = rowArray[i].split(',');
	if (d.length > 1) {
	    matrix.push(d);
	}
    }

    var M = new Matrix();
    return M.setElements(matrix);
};

// Diagonal matrix - all off-diagonal elements are zero
Matrix.Diagonal = function(elements) {
    var i = elements.length;
    var M = Matrix.I(i);
    while (i--) {
	M.elements[i][i] = elements[i];
    }
    return M;
};

// Rotation matrix about some axis. If no axis is
// supplied, assume we're after a 2D transform
Matrix.Rotation = function(theta, a) {
    if (!a) {
	return Matrix.create([
	    [Math.cos(theta), -Math.sin(theta)],
	    [Math.sin(theta), Math.cos(theta)]
	]);
    }
    var axis = a.dup();
    if (axis.elements.length != 3) { return null; }
    var mod = axis.modulus();
    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;
    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;
    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp
    // That proof rotates the co-ordinate system so theta
    // becomes -theta and sin becomes -sin here.
    return Matrix.create([
	[t * x * x + c, t * x * y - s * z, t * x * z + s * y],
	[t * x * y + s * z, t * y * y + c, t * y * z - s * x],
	[t * x * z - s * y, t * y * z + s * x, t * z * z + c]
    ]);
};

// Special case rotations
Matrix.RotationX = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[1, 0, 0],
	[0, c, -s],
	[0, s, c]
    ]);
};

Matrix.RotationY = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[c, 0, s],
	[0, 1, 0],
	[-s, 0, c]
    ]);
};

Matrix.RotationZ = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[c, -s, 0],
	[s, c, 0],
	[0, 0, 1]
    ]);
};

// Random matrix of n rows, m columns
Matrix.Random = function(n, m) {
    if (arguments.length === 1) m = n;
    return Matrix.Zero(n, m).map(
	function() { return Math.random(); }
  );
};

Matrix.Fill = function(n, m, v) {
    if (arguments.length === 2) {
	v = m;
	m = n;
    }

    var els = [], i = n, j;

    while (i--) {
	j = m;
	els[i] = [];

	while (j--) {
	    els[i][j] = v;
	}
    }

    return Matrix.create(els);
};

// Matrix filled with zeros
Matrix.Zero = function(n, m) {
    return Matrix.Fill(n, m, 0);
};

// Matrix filled with zeros
Matrix.Zeros = function(n, m) {
    return Matrix.Zero(n, m);
};

// Matrix filled with ones
Matrix.One = function(n, m) {
    return Matrix.Fill(n, m, 1);
};

// Matrix filled with ones
Matrix.Ones = function(n, m) {
    return Matrix.One(n, m);
};

module.exports = Matrix;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/plane.js":
/*!************************************************!*\
  !*** ./node_modules/sylvester.js/lib/plane.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Plane class - depends on Vector. Some methods require Matrix and Line.
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
var Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
var Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");

function Plane() {}
Plane.prototype = {

  // Returns true iff the plane occupies the same space as the argument
  eql: function(plane) {
    return (this.contains(plane.anchor) && this.isParallelTo(plane));
  },

  // Returns a copy of the plane
  dup: function() {
    return Plane.create(this.anchor, this.normal);
  },

  // Returns the result of translating the plane by the given vector
  translate: function(vector) {
    var V = vector.elements || vector;
    return Plane.create([
      this.anchor.elements[0] + V[0],
      this.anchor.elements[1] + V[1],
      this.anchor.elements[2] + (V[2] || 0)
    ], this.normal);
  },

  // Returns true iff the plane is parallel to the argument. Will return true
  // if the planes are equal, or if you give a line and it lies in the plane.
  isParallelTo: function(obj) {
    var theta;
    if (obj.normal) {
      // obj is a plane
      theta = this.normal.angleFrom(obj.normal);
      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);
    } else if (obj.direction) {
      // obj is a line
      return this.normal.isPerpendicularTo(obj.direction);
    }
    return null;
  },

  // Returns true iff the receiver is perpendicular to the argument
  isPerpendicularTo: function(plane) {
    var theta = this.normal.angleFrom(plane.normal);
    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);
  },

  // Returns the plane's distance from the given object (point, line or plane)
  distanceFrom: function(obj) {
    if (this.intersects(obj) || this.contains(obj)) { return 0; }
    if (obj.anchor) {
      // obj is a plane or line
      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;
      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      var A = this.anchor.elements, N = this.normal.elements;
      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);
    }
  },

  // Returns true iff the plane contains the given point or line
  contains: function(obj) {
    if (obj.normal) { return null; }
    if (obj.direction) {
      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));
    } else {
      var P = obj.elements || obj;
      var A = this.anchor.elements, N = this.normal.elements;
      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));
      return (diff <= Sylvester.precision);
    }
  },

  // Returns true iff the plane has a unique point/line of intersection with the argument
  intersects: function(obj) {
    if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }
    return !this.isParallelTo(obj);
  },

  // Returns the unique intersection with the argument, if one exists. The result
  // will be a vector if a line is supplied, and a line if a plane is supplied.
  intersectionWith: function(obj) {
    if (!this.intersects(obj)) { return null; }
    if (obj.direction) {
      // obj is a line
      var A = obj.anchor.elements, D = obj.direction.elements,
          P = this.anchor.elements, N = this.normal.elements;
      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);
      return Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);
    } else if (obj.normal) {
      // obj is a plane
      var direction = this.normal.cross(obj.normal).toUnitVector();
      // To find an anchor point, we find one co-ordinate that has a value
      // of zero somewhere on the intersection, and remember which one we picked
      var N = this.normal.elements, A = this.anchor.elements,
          O = obj.normal.elements, B = obj.anchor.elements;
      var solver = Matrix.Zero(2,2), i = 0;
      while (solver.isSingular()) {
        i++;
        solver = Matrix.create([
          [ N[i%3], N[(i+1)%3] ],
          [ O[i%3], O[(i+1)%3]  ]
        ]);
      }
      // Then we solve the simultaneous equations in the remaining dimensions
      var inverse = solver.inverse().elements;
      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];
      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];
      var intersection = [
        inverse[0][0] * x + inverse[0][1] * y,
        inverse[1][0] * x + inverse[1][1] * y
      ];
      var anchor = [];
      for (var j = 1; j <= 3; j++) {
        // This formula picks the right element from intersection by
        // cycling depending on which element we set to zero above
        anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);
      }
      return Line.create(anchor, direction);
    }
  },

  // Returns the point in the plane closest to the given point
  pointClosestTo: function(point) {
    var P = point.elements || point;
    var A = this.anchor.elements, N = this.normal.elements;
    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];
    return Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);
  },

  // Returns a copy of the plane, rotated by t radians about the given line
  // See notes on Line#rotate.
  rotate: function(t, line) {
    var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;
    var C = line.pointClosestTo(this.anchor).elements;
    var A = this.anchor.elements, N = this.normal.elements;
    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
    return Plane.create([
      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
    ], [
      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],
      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],
      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]
    ]);
  },

  // Returns the reflection of the plane in the given point, line or plane.
  reflectionIn: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var A = this.anchor.elements, N = this.normal.elements;
      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];
      var newA = this.anchor.reflectionIn(obj).elements;
      // Add the plane's normal to its anchor, then mirror that in the other plane
      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;
      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;
      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];
      return Plane.create(newA, newN);
    } else if (obj.direction) {
      // obj is a line
      return this.rotate(Math.PI, obj);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      return Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);
    }
  },

  // Sets the anchor point and normal to the plane. If three arguments are specified,
  // the normal is calculated by assuming the three points should lie in the same plane.
  // If only two are sepcified, the second is taken to be the normal. Normal vector is
  // normalised before storage.
  setVectors: function(anchor, v1, v2) {
    anchor = Vector.create(anchor);
    anchor = anchor.to3D(); if (anchor === null) { return null; }
    v1 = Vector.create(v1);
    v1 = v1.to3D(); if (v1 === null) { return null; }
    if (typeof(v2) == 'undefined') {
      v2 = null;
    } else {
      v2 = Vector.create(v2);
      v2 = v2.to3D(); if (v2 === null) { return null; }
    }
    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];
    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];
    var normal, mod;
    if (v2 !== null) {
      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];
      normal = Vector.create([
        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),
        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),
        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)
      ]);
      mod = normal.modulus();
      if (mod === 0) { return null; }
      normal = Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);
    } else {
      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);
      if (mod === 0) { return null; }
      normal = Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);
    }
    this.anchor = anchor;
    this.normal = normal;
    return this;
  }
};

// Constructor function
Plane.create = function(anchor, v1, v2) {
  var P = new Plane();
  return P.setVectors(anchor, v1, v2);
};

// X-Y-Z planes
Plane.XY = Plane.create(Vector.Zero(3), Vector.k);
Plane.YZ = Plane.create(Vector.Zero(3), Vector.i);
Plane.ZX = Plane.create(Vector.Zero(3), Vector.j);
Plane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;

// Returns the plane containing the given points (can be arrays as
// well as vectors). If the points are not coplanar, returns null.
Plane.fromPoints = function(points) {
  var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Vector.Zero(3);
  for (i = 0; i < np; i++) {
    P = Vector.create(points[i]).to3D();
    if (P === null) { return null; }
    list.push(P);
    n = list.length;
    if (n > 2) {
      // Compute plane normal for the latest three points
      A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;
      N = Vector.create([
        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
      ]).toUnitVector();
      if (n > 3) {
        // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.
        // This might be a slightly long-winded way of doing things, but we need the sum of all the normals
        // to find which way the plane normal should point so that the points form an anticlockwise list.
        theta = N.angleFrom(prevN);
        if (theta !== null) {
          if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) { return null; }
        }
      }
      totalN = totalN.add(N);
      prevN = N;
    }
  }
  // We need to add in the normals at the start and end points, which the above misses out
  A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;
  totalN = totalN.add(Vector.create([
    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
  ]).toUnitVector()).add(Vector.create([
    (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),
    (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),
    (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])
  ]).toUnitVector());
  return Plane.create(list[0], totalN);
};

module.exports = Plane;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/sylvester.js":
/*!****************************************************!*\
  !*** ./node_modules/sylvester.js/lib/sylvester.js ***!
  \****************************************************/
/***/ ((module) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
// This file is required in order for any other classes to work. Some Vector methods work with the
// other Sylvester classes and are useless unless they are included. Other classes such as Line and
// Plane will not function at all without Vector being loaded first.           

Math.sign = function(x) {
    return x < 0 ? -1: 1;
}
                                              
var Sylvester = {
    precision: 1e-6,
    approxPrecision: 1e-5
};

module.exports = Sylvester;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/vector.js":
/*!*************************************************!*\
  !*** ./node_modules/sylvester.js/lib/vector.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright (c) 2011, Chris Umbel, James Coglan
// This file is required in order for any other classes to work. Some Vector methods work with the
// other Sylvester classes and are useless unless they are included. Other classes such as Line and
// Plane will not function at all without Vector being loaded first.

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js"),
Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");

function Vector() {}
Vector.prototype = {

    norm: function() {
	var n = this.elements.length;
	var sum = 0;

	while (n--) {
	    sum += Math.pow(this.elements[n], 2);
	}

	return Math.sqrt(sum);
    },

    // Returns element i of the vector
    e: function(i) {
      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
    },

    // Returns the number of rows/columns the vector has
    dimensions: function() {
      return {rows: 1, cols: this.elements.length};
    },

    // Returns the number of rows in the vector
    rows: function() {
      return 1;
    },

    // Returns the number of columns in the vector
    cols: function() {
      return this.elements.length;
    },

    // Returns the modulus ('length') of the vector
    modulus: function() {
      return Math.sqrt(this.dot(this));
    },

    // Returns true iff the vector is equal to the argument
    eql: function(vector) {
    	var n = this.elements.length;
    	var V = vector.elements || vector;
    	if (n != V.length) { return false; }
    	while (n--) {
    	    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }
    	}
    	return true;
    },

    // Returns a copy of the vector
    dup: function() {
	    return Vector.create(this.elements);
    },

    // Maps the vector to another vector according to the given function
    map: function(fn) {
	var elements = [];
	this.each(function(x, i) {
	    elements.push(fn(x, i));
	});
	return Vector.create(elements);
    },

    // Calls the iterator for each element of the vector in turn
    each: function(fn) {
	var n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    fn(this.elements[i], i + 1);
	}
    },

    // Returns a new vector created by normalizing the receiver
    toUnitVector: function() {
	var r = this.modulus();
	if (r === 0) { return this.dup(); }
	return this.map(function(x) { return x / r; });
    },

    // Returns the angle between the vector and the argument (also a vector)
    angleFrom: function(vector) {
	var V = vector.elements || vector;
	var n = this.elements.length, k = n, i;
	if (n != V.length) { return null; }
	var dot = 0, mod1 = 0, mod2 = 0;
	// Work things out in parallel to save time
	this.each(function(x, i) {
	    dot += x * V[i - 1];
	    mod1 += x * x;
	    mod2 += V[i - 1] * V[i - 1];
	});
	mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);
	if (mod1 * mod2 === 0) { return null; }
	var theta = dot / (mod1 * mod2);
	if (theta < -1) { theta = -1; }
	if (theta > 1) { theta = 1; }
	return Math.acos(theta);
    },

    // Returns true iff the vector is parallel to the argument
    isParallelTo: function(vector) {
	var angle = this.angleFrom(vector);
	return (angle === null) ? null : (angle <= Sylvester.precision);
    },

    // Returns true iff the vector is antiparallel to the argument
    isAntiparallelTo: function(vector) {
	var angle = this.angleFrom(vector);
	return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
    },

    // Returns true iff the vector is perpendicular to the argument
    isPerpendicularTo: function(vector) {
	var dot = this.dot(vector);
	return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
    },

    // Returns the result of adding the argument to the vector
    add: function(value) {
	var V = value.elements || value;

	if (this.elements.length != V.length) 
	    return this.map(function(v) { return v + value });
	else
	    return this.map(function(x, i) { return x + V[i - 1]; });
    },

    // Returns the result of subtracting the argument from the vector
    subtract: function(v) {
	if (typeof(v) == 'number')
	    return this.map(function(k) { return k - v; });

	var V = v.elements || v;
	if (this.elements.length != V.length) { return null; }
	return this.map(function(x, i) { return x - V[i - 1]; });
    },

    // Returns the result of multiplying the elements of the vector by the argument
    multiply: function(k) {
	return this.map(function(x) { return x * k; });
    },

    elementMultiply: function(v) {
	return this.map(function(k, i) {
	    return v.e(i) * k;
	});
    },

    sum: function() {
	var sum = 0;
	this.map(function(x) { sum += x;});
	return sum;
    },

    chomp: function(n) {
	var elements = [];

	for (var i = n; i < this.elements.length; i++) {
	    elements.push(this.elements[i]);
	}

	return Vector.create(elements);
    },

    top: function(n) {
	var elements = [];

	for (var i = 0; i < n; i++) {
	    elements.push(this.elements[i]);
	}

	return Vector.create(elements);
    },

    augment: function(elements) {
	var newElements = this.elements;

	for (var i = 0; i < elements.length; i++) {
	    newElements.push(elements[i]);
	}

	return Vector.create(newElements);
    },

    x: function(k) { return this.multiply(k); },

    log: function() {
	return Vector.log(this);
    },

    elementDivide: function(vector) {
	return this.map(function(v, i) {
	    return v / vector.e(i);
	});
    },

    product: function() {
	var p = 1;

	this.map(function(v) {
	    p *= v;
	});

	return p;
    },

    // Returns the scalar product of the vector with the argument
    // Both vectors must have equal dimensionality
    dot: function(vector) {
	var V = vector.elements || vector;
	var i, product = 0, n = this.elements.length;	
	if (n != V.length) { return null; }
	while (n--) { product += this.elements[n] * V[n]; }
	return product;
    },

    // Returns the vector product of the vector with the argument
    // Both vectors must have dimensionality 3
    cross: function(vector) {
	var B = vector.elements || vector;
	if (this.elements.length != 3 || B.length != 3) { return null; }
	var A = this.elements;
	return Vector.create([
	    (A[1] * B[2]) - (A[2] * B[1]),
	    (A[2] * B[0]) - (A[0] * B[2]),
	    (A[0] * B[1]) - (A[1] * B[0])
	]);
    },

    // Returns the (absolute) largest element of the vector
    max: function() {
	var m = 0, i = this.elements.length;
	while (i--) {
	    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }
	}
	return m;
    },


    maxIndex: function() {
	var m = 0, i = this.elements.length;
	var maxIndex = -1;

	while (i--) {
	    if (Math.abs(this.elements[i]) > Math.abs(m)) { 
		m = this.elements[i]; 
		maxIndex = i + 1;
	    }
	}

	return maxIndex;
    },


    // Returns the index of the first match found
    indexOf: function(x) {
	var index = null, n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    if (index === null && this.elements[i] == x) {
		index = i + 1;
	    }
	}
	return index;
    },

    // Returns a diagonal matrix with the vector's elements as its diagonal elements
    toDiagonalMatrix: function() {
	return Matrix.Diagonal(this.elements);
    },

    // Returns the result of rounding the elements of the vector
    round: function() {
	return this.map(function(x) { return Math.round(x); });
    },

    // Transpose a Vector, return a 1xn Matrix
    transpose: function() {
	var rows = this.elements.length;
	var elements = [];

	for (var i = 0; i < rows; i++) {
	    elements.push([this.elements[i]]);
	}
	return Matrix.create(elements);
    },

    // Returns a copy of the vector with elements set to the given value if they
    // differ from it by less than Sylvester.precision
    snapTo: function(x) {
	return this.map(function(y) {
	    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;
	});
    },

    // Returns the vector's distance from the argument, when considered as a point in space
    distanceFrom: function(obj) {
	if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }
	var V = obj.elements || obj;
	if (V.length != this.elements.length) { return null; }
	var sum = 0, part;
	this.each(function(x, i) {
	    part = x - V[i - 1];
	    sum += part * part;
	});
	return Math.sqrt(sum);
    },

    // Returns true if the vector is point on the given line
    liesOn: function(line) {
	return line.contains(this);
    },

    // Return true iff the vector is a point in the given plane
    liesIn: function(plane) {
	return plane.contains(this);
    },

    // Rotates the vector about the given object. The object should be a
    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!
    rotate: function(t, obj) {
	var V, R = null, x, y, z;
	if (t.determinant) { R = t.elements; }
	switch (this.elements.length) {
	case 2:
            V = obj.elements || obj;
            if (V.length != 2) { return null; }
            if (!R) { R = Matrix.Rotation(t).elements; }
            x = this.elements[0] - V[0];
            y = this.elements[1] - V[1];
            return Vector.create([
		V[0] + R[0][0] * x + R[0][1] * y,
		V[1] + R[1][0] * x + R[1][1] * y
            ]);
            break;
	case 3:
            if (!obj.direction) { return null; }
            var C = obj.pointClosestTo(this).elements;
            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }
            x = this.elements[0] - C[0];
            y = this.elements[1] - C[1];
            z = this.elements[2] - C[2];
            return Vector.create([
		C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,
		C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,
		C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z
            ]);
            break;
	default:
            return null;
	}
    },

    // Returns the result of reflecting the point in the given point, line or plane
    reflectionIn: function(obj) {
	if (obj.anchor) {
	    // obj is a plane or line
	    var P = this.elements.slice();
	    var C = obj.pointClosestTo(P).elements;
	    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);
	} else {
	    // obj is a point
	    var Q = obj.elements || obj;
	    if (this.elements.length != Q.length) { return null; }
	    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });
	}
    },

    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added
    to3D: function() {
	var V = this.dup();
	switch (V.elements.length) {
	case 3: break;
	case 2: V.elements.push(0); break;
	default: return null;
	}
	return V;
    },

    // Returns a string representation of the vector
    inspect: function() {
	return '[' + this.elements.join(', ') + ']';
    },

    // Set vector's elements from an array
    setElements: function(els) {
	this.elements = (els.elements || els).slice();
	return this;
    }
};

// Constructor function
Vector.create = function(elements) {
    var V = new Vector();
    return V.setElements(elements);
};

// i, j, k unit vectors
Vector.i = Vector.create([1, 0, 0]);
Vector.j = Vector.create([0, 1, 0]);
Vector.k = Vector.create([0, 0, 1]);

// Random vector of size n
Vector.Random = function(n) {
    var elements = [];
    while (n--) { elements.push(Math.random()); }
    return Vector.create(elements);
};

Vector.Fill = function(n, v) {
    var elements = [];
    while (n--) { elements.push(v); }
    return Vector.create(elements);
};

// Vector filled with zeros
Vector.Zero = function(n) {
    return Vector.Fill(n, 0);
};

Vector.One = function(n) {
    return Vector.Fill(n, 1);
};

Vector.log = function(v) {
    return v.map(function(x) {
	return Math.log(x);
    });
};

module.exports = Vector;


/***/ }),

/***/ "./src/app/Attribute.ts":
/*!******************************!*\
  !*** ./src/app/Attribute.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Attribute = void 0;
exports.Attribute = {
    COMMAND: 'data-command',
    FULL_NAME: 'data-full-name',
    NAME: 'data-name',
    PID: 'data-pid',
    UDID: 'data-udid',
    URL: 'data-url',
    USE_PROXY: 'data-use-proxy',
    SECURE: 'data-secure',
    HOSTNAME: 'data-hostname',
    PORT: 'data-port',
    PATHNAME: 'data-pathname',
    VALUE: 'data-value',
};


/***/ }),

/***/ "./src/app/DisplayInfo.ts":
/*!********************************!*\
  !*** ./src/app/DisplayInfo.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisplayInfo = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Size */ "./src/app/Size.ts"));
var DisplayInfo = (function () {
    function DisplayInfo(displayId, size, rotation, layerStack, flags) {
        this.displayId = displayId;
        this.size = size;
        this.rotation = rotation;
        this.layerStack = layerStack;
        this.flags = flags;
    }
    DisplayInfo.prototype.toBuffer = function () {
        var temp = Buffer.alloc(DisplayInfo.BUFFER_LENGTH);
        var offset = 0;
        offset = temp.writeInt32BE(this.displayId, offset);
        offset = temp.writeInt32BE(this.size.width, offset);
        offset = temp.writeInt32BE(this.size.height, offset);
        offset = temp.writeInt32BE(this.rotation, offset);
        offset = temp.writeInt32BE(this.layerStack, offset);
        temp.writeInt32BE(this.flags, offset);
        return temp;
    };
    DisplayInfo.prototype.toString = function () {
        return "DisplayInfo{displayId=".concat(this.displayId, ", size=").concat(this.size, ", rotation=").concat(this.rotation, ", layerStack=").concat(this.layerStack, ", flags=").concat(this.flags, "}");
    };
    DisplayInfo.fromBuffer = function (buffer) {
        if (buffer.length !== DisplayInfo.BUFFER_LENGTH) {
            throw Error("Incorrect buffer length. Expected: ".concat(DisplayInfo.BUFFER_LENGTH, ", received: ").concat(buffer.length));
        }
        var offset = 0;
        var displayId = buffer.readInt32BE(offset);
        offset += 4;
        var width = buffer.readInt32BE(offset);
        offset += 4;
        var height = buffer.readInt32BE(offset);
        offset += 4;
        var rotation = buffer.readInt32BE(offset);
        offset += 4;
        var layerStack = buffer.readInt32BE(offset);
        offset += 4;
        var flags = buffer.readInt32BE(offset);
        return new DisplayInfo(displayId, new Size_1.default(width, height), rotation, layerStack, flags);
    };
    DisplayInfo.DEFAULT_DISPLAY = 0x00000000;
    DisplayInfo.FLAG_ROUND = 16;
    DisplayInfo.FLAG_PRESENTATION = 8;
    DisplayInfo.FLAG_PRIVATE = 4;
    DisplayInfo.FLAG_SECURE = 2;
    DisplayInfo.FLAG_SUPPORTS_PROTECTED_BUFFERS = 1;
    DisplayInfo.INVALID_DISPLAY = -1;
    DisplayInfo.BUFFER_LENGTH = 24;
    return DisplayInfo;
}());
exports.DisplayInfo = DisplayInfo;


/***/ }),

/***/ "./src/app/MotionEvent.ts":
/*!********************************!*\
  !*** ./src/app/MotionEvent.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var MotionEvent = (function () {
    function MotionEvent() {
    }
    MotionEvent.ACTION_DOWN = 0;
    MotionEvent.ACTION_UP = 1;
    MotionEvent.ACTION_MOVE = 2;
    MotionEvent.BUTTON_PRIMARY = 1 << 0;
    MotionEvent.BUTTON_SECONDARY = 1 << 1;
    MotionEvent.BUTTON_TERTIARY = 1 << 2;
    return MotionEvent;
}());
exports["default"] = MotionEvent;


/***/ }),

/***/ "./src/app/Point.ts":
/*!**************************!*\
  !*** ./src/app/Point.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Point = (function () {
    function Point(x, y) {
        this.x = Math.round(x);
        this.y = Math.round(y);
    }
    Point.prototype.equals = function (o) {
        if (this === o) {
            return true;
        }
        if (o === null) {
            return false;
        }
        return this.x === o.x && this.y === o.y;
    };
    Point.prototype.distance = function (to) {
        var x = this.x - to.x;
        var y = this.y - to.y;
        return Math.sqrt(x * x + y * y);
    };
    Point.prototype.toString = function () {
        return "Point{x=".concat(this.x, ", y=").concat(this.y, "}");
    };
    Point.prototype.toJSON = function () {
        return {
            x: this.x,
            y: this.y,
        };
    };
    return Point;
}());
exports["default"] = Point;


/***/ }),

/***/ "./src/app/Position.ts":
/*!*****************************!*\
  !*** ./src/app/Position.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Point_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Point */ "./src/app/Point.ts"));
var Position = (function () {
    function Position(point, screenSize) {
        this.point = point;
        this.screenSize = screenSize;
    }
    Position.prototype.equals = function (o) {
        if (this === o) {
            return true;
        }
        if (o === null) {
            return false;
        }
        return this.point.equals(o.point) && this.screenSize.equals(o.screenSize);
    };
    Position.prototype.rotate = function (rotation) {
        switch (rotation) {
            case 1:
                return new Position(new Point_1.default(this.screenSize.height - this.point.y, this.point.x), this.screenSize.rotate());
            case 2:
                return new Position(new Point_1.default(this.screenSize.width - this.point.x, this.screenSize.height - this.point.y), this.screenSize);
            case 3:
                return new Position(new Point_1.default(this.point.y, this.screenSize.width - this.point.x), this.screenSize.rotate());
            default:
                return this;
        }
    };
    Position.prototype.toString = function () {
        return "Position{point=".concat(this.point, ", screenSize=").concat(this.screenSize, "}");
    };
    Position.prototype.toJSON = function () {
        return {
            point: this.point.toJSON(),
            screenSize: this.screenSize.toJSON(),
        };
    };
    return Position;
}());
exports["default"] = Position;


/***/ }),

/***/ "./src/app/Rect.ts":
/*!*************************!*\
  !*** ./src/app/Rect.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Rect = (function () {
    function Rect(left, top, right, bottom) {
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
    }
    Rect.equals = function (a, b) {
        if (!a && !b) {
            return true;
        }
        return !!a && !!b && a.equals(b);
    };
    Rect.copy = function (a) {
        if (!a) {
            return null;
        }
        return new Rect(a.left, a.top, a.right, a.bottom);
    };
    Rect.prototype.equals = function (o) {
        if (this === o) {
            return true;
        }
        if (!o) {
            return false;
        }
        return this.left === o.left && this.top === o.top && this.right === o.right && this.bottom === o.bottom;
    };
    Rect.prototype.getWidth = function () {
        return this.right - this.left;
    };
    Rect.prototype.getHeight = function () {
        return this.bottom - this.top;
    };
    Rect.prototype.toString = function () {
        return "Rect{left=".concat(this.left, ", top=").concat(this.top, ", right=").concat(this.right, ", bottom=").concat(this.bottom, "}");
    };
    Rect.prototype.toJSON = function () {
        return {
            left: this.left,
            right: this.right,
            top: this.top,
            bottom: this.bottom,
        };
    };
    return Rect;
}());
exports["default"] = Rect;


/***/ }),

/***/ "./src/app/ScreenInfo.ts":
/*!*******************************!*\
  !*** ./src/app/ScreenInfo.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Rect_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Rect */ "./src/app/Rect.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Size */ "./src/app/Size.ts"));
var ScreenInfo = (function () {
    function ScreenInfo(contentRect, videoSize, deviceRotation) {
        this.contentRect = contentRect;
        this.videoSize = videoSize;
        this.deviceRotation = deviceRotation;
    }
    ScreenInfo.fromBuffer = function (buffer) {
        var left = buffer.readInt32BE(0);
        var top = buffer.readInt32BE(4);
        var right = buffer.readInt32BE(8);
        var bottom = buffer.readInt32BE(12);
        var width = buffer.readInt32BE(16);
        var height = buffer.readInt32BE(20);
        var deviceRotation = buffer.readUInt8(24);
        return new ScreenInfo(new Rect_1.default(left, top, right, bottom), new Size_1.default(width, height), deviceRotation);
    };
    ScreenInfo.prototype.equals = function (o) {
        if (!o) {
            return false;
        }
        return (this.contentRect.equals(o.contentRect) &&
            this.videoSize.equals(o.videoSize) &&
            this.deviceRotation === o.deviceRotation);
    };
    ScreenInfo.prototype.toString = function () {
        return "ScreenInfo{contentRect=".concat(this.contentRect, ", videoSize=").concat(this.videoSize, ", deviceRotation=").concat(this.deviceRotation, "}");
    };
    ScreenInfo.BUFFER_LENGTH = 25;
    return ScreenInfo;
}());
exports["default"] = ScreenInfo;


/***/ }),

/***/ "./src/app/Size.ts":
/*!*************************!*\
  !*** ./src/app/Size.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Size = (function () {
    function Size(width, height) {
        this.width = width;
        this.height = height;
        this.w = width;
        this.h = height;
    }
    Size.equals = function (a, b) {
        if (!a && !b) {
            return true;
        }
        return !!a && !!b && a.equals(b);
    };
    Size.copy = function (a) {
        if (!a) {
            return null;
        }
        return new Size(a.width, a.height);
    };
    Size.prototype.length = function () {
        return this.w * this.h;
    };
    Size.prototype.rotate = function () {
        return new Size(this.height, this.width);
    };
    Size.prototype.equals = function (o) {
        if (this === o) {
            return true;
        }
        if (!o) {
            return false;
        }
        return this.width === o.width && this.height === o.height;
    };
    Size.prototype.intersect = function (o) {
        if (!o) {
            return this;
        }
        var minH = Math.min(this.height, o.height);
        var minW = Math.min(this.width, o.width);
        return new Size(minW, minH);
    };
    Size.prototype.getHalfSize = function () {
        return new Size(this.width >>> 1, this.height >>> 1);
    };
    Size.prototype.toString = function () {
        return "Size{width=".concat(this.width, ", height=").concat(this.height, "}");
    };
    Size.prototype.toJSON = function () {
        return {
            width: this.width,
            height: this.height,
        };
    };
    return Size;
}());
exports["default"] = Size;


/***/ }),

/***/ "./src/app/UIEventsCode.ts":
/*!*********************************!*\
  !*** ./src/app/UIEventsCode.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var UIEventsCode = (function () {
    function UIEventsCode() {
    }
    UIEventsCode.Backquote = 'Backquote';
    UIEventsCode.Backslash = 'Backslash';
    UIEventsCode.BracketLeft = 'BracketLeft';
    UIEventsCode.BracketRight = 'BracketRight';
    UIEventsCode.Comma = 'Comma';
    UIEventsCode.Digit0 = 'Digit0';
    UIEventsCode.Digit1 = 'Digit1';
    UIEventsCode.Digit2 = 'Digit2';
    UIEventsCode.Digit3 = 'Digit3';
    UIEventsCode.Digit4 = 'Digit4';
    UIEventsCode.Digit5 = 'Digit5';
    UIEventsCode.Digit6 = 'Digit6';
    UIEventsCode.Digit7 = 'Digit7';
    UIEventsCode.Digit8 = 'Digit8';
    UIEventsCode.Digit9 = 'Digit9';
    UIEventsCode.Equal = 'Equal';
    UIEventsCode.IntlBackslash = 'IntlBackslash';
    UIEventsCode.IntlRo = 'IntlRo';
    UIEventsCode.IntlYen = 'IntlYen';
    UIEventsCode.KeyA = 'KeyA';
    UIEventsCode.KeyB = 'KeyB';
    UIEventsCode.KeyC = 'KeyC';
    UIEventsCode.KeyD = 'KeyD';
    UIEventsCode.KeyE = 'KeyE';
    UIEventsCode.KeyF = 'KeyF';
    UIEventsCode.KeyG = 'KeyG';
    UIEventsCode.KeyH = 'KeyH';
    UIEventsCode.KeyI = 'KeyI';
    UIEventsCode.KeyJ = 'KeyJ';
    UIEventsCode.KeyK = 'KeyK';
    UIEventsCode.KeyL = 'KeyL';
    UIEventsCode.KeyM = 'KeyM';
    UIEventsCode.KeyN = 'KeyN';
    UIEventsCode.KeyO = 'KeyO';
    UIEventsCode.KeyP = 'KeyP';
    UIEventsCode.KeyQ = 'KeyQ';
    UIEventsCode.KeyR = 'KeyR';
    UIEventsCode.KeyS = 'KeyS';
    UIEventsCode.KeyT = 'KeyT';
    UIEventsCode.KeyU = 'KeyU';
    UIEventsCode.KeyV = 'KeyV';
    UIEventsCode.KeyW = 'KeyW';
    UIEventsCode.KeyX = 'KeyX';
    UIEventsCode.KeyY = 'KeyY';
    UIEventsCode.KeyZ = 'KeyZ';
    UIEventsCode.Minus = 'Minus';
    UIEventsCode.Period = 'Period';
    UIEventsCode.Quote = 'Quote';
    UIEventsCode.Semicolon = 'Semicolon';
    UIEventsCode.Slash = 'Slash';
    UIEventsCode.AltLeft = 'AltLeft';
    UIEventsCode.AltRight = 'AltRight';
    UIEventsCode.Backspace = 'Backspace';
    UIEventsCode.CapsLock = 'CapsLock';
    UIEventsCode.ContextMenu = 'ContextMenu';
    UIEventsCode.ControlLeft = 'ControlLeft';
    UIEventsCode.ControlRight = 'ControlRight';
    UIEventsCode.Enter = 'Enter';
    UIEventsCode.MetaLeft = 'MetaLeft';
    UIEventsCode.MetaRight = 'MetaRight';
    UIEventsCode.ShiftLeft = 'ShiftLeft';
    UIEventsCode.ShiftRight = 'ShiftRight';
    UIEventsCode.Space = 'Space';
    UIEventsCode.Tab = 'Tab';
    UIEventsCode.Convert = 'Convert';
    UIEventsCode.KanaMode = 'KanaMode';
    UIEventsCode.Lang1 = 'Lang1';
    UIEventsCode.Lang2 = 'Lang2';
    UIEventsCode.Lang3 = 'Lang3';
    UIEventsCode.Lang4 = 'Lang4';
    UIEventsCode.Lang5 = 'Lang5';
    UIEventsCode.NonConvert = 'NonConvert';
    UIEventsCode.Delete = 'Delete';
    UIEventsCode.End = 'End';
    UIEventsCode.Help = 'Help';
    UIEventsCode.Home = 'Home';
    UIEventsCode.Insert = 'Insert';
    UIEventsCode.PageDown = 'PageDown';
    UIEventsCode.PageUp = 'PageUp';
    UIEventsCode.ArrowDown = 'ArrowDown';
    UIEventsCode.ArrowLeft = 'ArrowLeft';
    UIEventsCode.ArrowRight = 'ArrowRight';
    UIEventsCode.ArrowUp = 'ArrowUp';
    UIEventsCode.NumLock = 'NumLock';
    UIEventsCode.Numpad0 = 'Numpad0';
    UIEventsCode.Numpad1 = 'Numpad1';
    UIEventsCode.Numpad2 = 'Numpad2';
    UIEventsCode.Numpad3 = 'Numpad3';
    UIEventsCode.Numpad4 = 'Numpad4';
    UIEventsCode.Numpad5 = 'Numpad5';
    UIEventsCode.Numpad6 = 'Numpad6';
    UIEventsCode.Numpad7 = 'Numpad7';
    UIEventsCode.Numpad8 = 'Numpad8';
    UIEventsCode.Numpad9 = 'Numpad9';
    UIEventsCode.NumpadAdd = 'NumpadAdd';
    UIEventsCode.NumpadBackspace = 'NumpadBackspace';
    UIEventsCode.NumpadClear = 'NumpadClear';
    UIEventsCode.NumpadClearEntry = 'NumpadClearEntry';
    UIEventsCode.NumpadComma = 'NumpadComma';
    UIEventsCode.NumpadDecimal = 'NumpadDecimal';
    UIEventsCode.NumpadDivide = 'NumpadDivide';
    UIEventsCode.NumpadEnter = 'NumpadEnter';
    UIEventsCode.NumpadEqual = 'NumpadEqual';
    UIEventsCode.NumpadHash = 'NumpadHash';
    UIEventsCode.NumpadMemoryAdd = 'NumpadMemoryAdd';
    UIEventsCode.NumpadMemoryClear = 'NumpadMemoryClear';
    UIEventsCode.NumpadMemoryRecall = 'NumpadMemoryRecall';
    UIEventsCode.NumpadMemoryStore = 'NumpadMemoryStore';
    UIEventsCode.NumpadMemorySubtract = 'NumpadMemorySubtract';
    UIEventsCode.NumpadMultiply = 'NumpadMultiply';
    UIEventsCode.NumpadParenLeft = 'NumpadParenLeft';
    UIEventsCode.NumpadParenRight = 'NumpadParenRight';
    UIEventsCode.NumpadStar = 'NumpadStar';
    UIEventsCode.NumpadSubtract = 'NumpadSubtract';
    UIEventsCode.Escape = 'Escape';
    UIEventsCode.F1 = 'F1';
    UIEventsCode.F2 = 'F2';
    UIEventsCode.F3 = 'F3';
    UIEventsCode.F4 = 'F4';
    UIEventsCode.F5 = 'F5';
    UIEventsCode.F6 = 'F6';
    UIEventsCode.F7 = 'F7';
    UIEventsCode.F8 = 'F8';
    UIEventsCode.F9 = 'F9';
    UIEventsCode.F10 = 'F10';
    UIEventsCode.F11 = 'F11';
    UIEventsCode.F12 = 'F12';
    UIEventsCode.Fn = 'Fn';
    UIEventsCode.FnLock = 'FnLock';
    UIEventsCode.PrintScreen = 'PrintScreen';
    UIEventsCode.ScrollLock = 'ScrollLock';
    UIEventsCode.Pause = 'Pause';
    UIEventsCode.BrowserBack = 'BrowserBack';
    UIEventsCode.BrowserFavorites = 'BrowserFavorites';
    UIEventsCode.BrowserForward = 'BrowserForward';
    UIEventsCode.BrowserHome = 'BrowserHome';
    UIEventsCode.BrowserRefresh = 'BrowserRefresh';
    UIEventsCode.BrowserSearch = 'BrowserSearch';
    UIEventsCode.BrowserStop = 'BrowserStop';
    UIEventsCode.Eject = 'Eject';
    UIEventsCode.LaunchApp1 = 'LaunchApp1';
    UIEventsCode.LaunchApp2 = 'LaunchApp2';
    UIEventsCode.LaunchMail = 'LaunchMail';
    UIEventsCode.MediaPlayPause = 'MediaPlayPause';
    UIEventsCode.MediaSelect = 'MediaSelect';
    UIEventsCode.MediaStop = 'MediaStop';
    UIEventsCode.MediaTrackNext = 'MediaTrackNext';
    UIEventsCode.MediaTrackPrevious = 'MediaTrackPrevious';
    UIEventsCode.Power = 'Power';
    UIEventsCode.Sleep = 'Sleep';
    UIEventsCode.AudioVolumeDown = 'AudioVolumeDown';
    UIEventsCode.AudioVolumeMute = 'AudioVolumeMute';
    UIEventsCode.AudioVolumeUp = 'AudioVolumeUp';
    UIEventsCode.WakeUp = 'WakeUp';
    UIEventsCode.Hyper = 'Hyper';
    UIEventsCode.Super = 'Super';
    UIEventsCode.Turbo = 'Turbo';
    UIEventsCode.Abort = 'Abort';
    UIEventsCode.Resume = 'Resume';
    UIEventsCode.Suspend = 'Suspend';
    UIEventsCode.Again = 'Again';
    UIEventsCode.Copy = 'Copy';
    UIEventsCode.Cut = 'Cut';
    UIEventsCode.Find = 'Find';
    UIEventsCode.Open = 'Open';
    UIEventsCode.Paste = 'Paste';
    UIEventsCode.Props = 'Props';
    UIEventsCode.Select = 'Select';
    UIEventsCode.Undo = 'Undo';
    UIEventsCode.Hiragana = 'Hiragana';
    UIEventsCode.Katakana = 'Katakana';
    UIEventsCode.Unidentified = 'Unidentified';
    return UIEventsCode;
}());
exports["default"] = UIEventsCode;


/***/ }),

/***/ "./src/app/Util.ts":
/*!*************************!*\
  !*** ./src/app/Util.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Util = (function () {
    function Util() {
    }
    Util.filterTrailingZeroes = function (bytes) {
        var b = 0;
        return bytes
            .reverse()
            .filter(function (i) { return b || (b = i); })
            .reverse();
    };
    Util.prettyBytes = function (value) {
        var suffix = 0;
        while (value >= 512) {
            suffix++;
            value /= 1024;
        }
        return "".concat(value.toFixed(suffix ? 1 : 0)).concat(Util.SUFFIX[suffix]);
    };
    Util.escapeUdid = function (udid) {
        return 'udid_' + udid.replace(/[. :]/g, '_');
    };
    Util.parse = function (params, name, required) {
        var value = params.get(name);
        if (required && value === null) {
            throw TypeError("Missing required parameter \"".concat(name, "\""));
        }
        return value;
    };
    Util.parseString = function (params, name, required) {
        var value = params.get(name);
        if (required && value === null) {
            throw TypeError("Missing required parameter \"".concat(name, "\""));
        }
        return value || '';
    };
    Util.parseBoolean = function (params, name, required) {
        var value = this.parse(params, name, required);
        return value === '1' || (!!value && value.toString() === 'true');
    };
    Util.parseInt = function (params, name, required) {
        var value = this.parse(params, name, required);
        if (value === null) {
            return 0;
        }
        var int = parseInt(value, 10);
        if (isNaN(int)) {
            return 0;
        }
        return int;
    };
    Util.parseBooleanEnv = function (input) {
        if (typeof input === 'boolean') {
            return input;
        }
        if (typeof input === 'undefined' || input === null) {
            return undefined;
        }
        if (Array.isArray(input)) {
            input = input[input.length - 1];
        }
        return input === '1' || input.toLowerCase() === 'true';
    };
    Util.parseStringEnv = function (input) {
        if (typeof input === 'undefined' || input === null) {
            return undefined;
        }
        if (Array.isArray(input)) {
            input = input[input.length - 1];
        }
        return input;
    };
    Util.parseIntEnv = function (input) {
        if (typeof input === 'number') {
            return input;
        }
        if (typeof input === 'undefined' || input === null) {
            return undefined;
        }
        if (Array.isArray(input)) {
            input = input[input.length - 1];
        }
        var int = parseInt(input, 10);
        if (isNaN(int)) {
            return undefined;
        }
        return int;
    };
    Util.utf8ByteArrayToString = function (bytes) {
        var out = [], pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
            }
            else if (c1 > 239 && c1 < 365) {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) -
                    0x10000;
                out[c++] = String.fromCharCode(0xD800 + (u >> 10));
                out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] =
                    String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
            }
        }
        return out.join('');
    };
    ;
    Util.supportsPassive = function () {
        if (typeof Util.supportsPassiveValue === 'boolean') {
            return Util.supportsPassiveValue;
        }
        var supportsPassive = false;
        try {
            var opts = Object.defineProperty({}, 'passive', {
                get: function () {
                    supportsPassive = true;
                }
            });
            window.addEventListener('testPassive', null, opts);
            window.removeEventListener('testPassive', null, opts);
        }
        catch (error) { }
        return Util.supportsPassiveValue = supportsPassive;
    };
    Util.setImmediate = function (fn) {
        Promise.resolve().then(fn);
    };
    Util.SUFFIX = {
        0: 'B',
        1: 'KiB',
        2: 'MiB',
        3: 'GiB',
        4: 'TiB',
    };
    Util.stringToUtf8ByteArray = function (str) {
        var out = [], p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length &&
                ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {
                c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return Uint8Array.from(out);
    };
    return Util;
}());
exports["default"] = Util;


/***/ }),

/***/ "./src/app/VideoSettings.ts":
/*!**********************************!*\
  !*** ./src/app/VideoSettings.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Rect_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Rect */ "./src/app/Rect.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Size */ "./src/app/Size.ts"));
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Util */ "./src/app/Util.ts"));
var VideoSettings = (function () {
    function VideoSettings(data, bytesLength) {
        if (bytesLength === void 0) { bytesLength = VideoSettings.BASE_BUFFER_LENGTH; }
        this.bytesLength = bytesLength;
        this.crop = null;
        this.bitrate = 0;
        this.bounds = null;
        this.maxFps = 0;
        this.iFrameInterval = 0;
        this.sendFrameMeta = false;
        this.lockedVideoOrientation = -1;
        this.displayId = 0;
        if (data) {
            this.crop = data.crop;
            this.bitrate = data.bitrate;
            this.bounds = data.bounds;
            this.maxFps = data.maxFps;
            this.iFrameInterval = data.iFrameInterval;
            this.sendFrameMeta = data.sendFrameMeta || false;
            this.lockedVideoOrientation = data.lockedVideoOrientation || -1;
            if (typeof data.displayId === 'number' && !isNaN(data.displayId) && data.displayId >= 0) {
                this.displayId = data.displayId;
            }
            if (data.codecOptions) {
                this.codecOptions = data.codecOptions.trim();
            }
            if (data.encoderName) {
                this.encoderName = data.encoderName.trim();
            }
        }
    }
    VideoSettings.fromBuffer = function (buffer) {
        var offset = 0;
        var bitrate = buffer.readInt32BE(offset);
        offset += 4;
        var maxFps = buffer.readInt32BE(offset);
        offset += 4;
        var iFrameInterval = buffer.readInt8(offset);
        offset += 1;
        var width = buffer.readInt16BE(offset);
        offset += 2;
        var height = buffer.readInt16BE(offset);
        offset += 2;
        var left = buffer.readInt16BE(offset);
        offset += 2;
        var top = buffer.readInt16BE(offset);
        offset += 2;
        var right = buffer.readInt16BE(offset);
        offset += 2;
        var bottom = buffer.readInt16BE(offset);
        offset += 2;
        var sendFrameMeta = !!buffer.readInt8(offset);
        offset += 1;
        var lockedVideoOrientation = buffer.readInt8(offset);
        offset += 1;
        var displayId = buffer.readInt32BE(offset);
        offset += 4;
        var bounds = null;
        var crop = null;
        if (width !== 0 && height !== 0) {
            bounds = new Size_1.default(width, height);
        }
        if (left || top || right || bottom) {
            crop = new Rect_1.default(left, top, right, bottom);
        }
        var codecOptions;
        var encoderName;
        var codecOptionsLength = buffer.readInt32BE(offset);
        offset += 4;
        if (codecOptionsLength) {
            var codecOptionsBytes = buffer.slice(offset, offset + codecOptionsLength);
            offset += codecOptionsLength;
            codecOptions = Util_1.default.utf8ByteArrayToString(codecOptionsBytes);
        }
        var encoderNameLength = buffer.readInt32BE(offset);
        offset += 4;
        if (encoderNameLength) {
            var encoderNameBytes = buffer.slice(offset, offset + encoderNameLength);
            offset += encoderNameLength;
            encoderName = Util_1.default.utf8ByteArrayToString(encoderNameBytes);
        }
        return new VideoSettings({
            crop: crop,
            bitrate: bitrate,
            bounds: bounds,
            maxFps: maxFps,
            iFrameInterval: iFrameInterval,
            lockedVideoOrientation: lockedVideoOrientation,
            displayId: displayId,
            sendFrameMeta: sendFrameMeta,
            codecOptions: codecOptions,
            encoderName: encoderName,
        }, offset);
    };
    VideoSettings.copy = function (a) {
        return new VideoSettings({
            bitrate: a.bitrate,
            crop: Rect_1.default.copy(a.crop),
            bounds: Size_1.default.copy(a.bounds),
            maxFps: a.maxFps,
            iFrameInterval: a.iFrameInterval,
            lockedVideoOrientation: a.lockedVideoOrientation,
            displayId: a.displayId,
            sendFrameMeta: a.sendFrameMeta,
            codecOptions: a.codecOptions,
            encoderName: a.encoderName,
        }, a.bytesLength);
    };
    VideoSettings.prototype.equals = function (o) {
        if (!o) {
            return false;
        }
        return (this.encoderName === o.encoderName &&
            this.codecOptions === o.codecOptions &&
            Rect_1.default.equals(this.crop, o.crop) &&
            this.lockedVideoOrientation === o.lockedVideoOrientation &&
            this.displayId === o.displayId &&
            Size_1.default.equals(this.bounds, o.bounds) &&
            this.bitrate === o.bitrate &&
            this.maxFps === o.maxFps &&
            this.iFrameInterval === o.iFrameInterval);
    };
    VideoSettings.prototype.toBuffer = function () {
        var additionalLength = 0;
        var codecOptionsBytes;
        var encoderNameBytes;
        if (this.codecOptions) {
            codecOptionsBytes = Util_1.default.stringToUtf8ByteArray(this.codecOptions);
            additionalLength += codecOptionsBytes.length;
        }
        if (this.encoderName) {
            encoderNameBytes = Util_1.default.stringToUtf8ByteArray(this.encoderName);
            additionalLength += encoderNameBytes.length;
        }
        var buffer = Buffer.alloc(VideoSettings.BASE_BUFFER_LENGTH + additionalLength);
        var _a = this.bounds || {}, _b = _a.width, width = _b === void 0 ? 0 : _b, _c = _a.height, height = _c === void 0 ? 0 : _c;
        var _d = this.crop || {}, _e = _d.left, left = _e === void 0 ? 0 : _e, _f = _d.top, top = _f === void 0 ? 0 : _f, _g = _d.right, right = _g === void 0 ? 0 : _g, _h = _d.bottom, bottom = _h === void 0 ? 0 : _h;
        var offset = 0;
        offset = buffer.writeInt32BE(this.bitrate, offset);
        offset = buffer.writeInt32BE(this.maxFps, offset);
        offset = buffer.writeInt8(this.iFrameInterval, offset);
        offset = buffer.writeInt16BE(width, offset);
        offset = buffer.writeInt16BE(height, offset);
        offset = buffer.writeInt16BE(left, offset);
        offset = buffer.writeInt16BE(top, offset);
        offset = buffer.writeInt16BE(right, offset);
        offset = buffer.writeInt16BE(bottom, offset);
        offset = buffer.writeInt8(this.sendFrameMeta ? 1 : 0, offset);
        offset = buffer.writeInt8(this.lockedVideoOrientation, offset);
        offset = buffer.writeInt32BE(this.displayId, offset);
        if (codecOptionsBytes) {
            offset = buffer.writeInt32BE(codecOptionsBytes.length, offset);
            buffer.fill(codecOptionsBytes, offset);
            offset += codecOptionsBytes.length;
        }
        else {
            offset = buffer.writeInt32BE(0, offset);
        }
        if (encoderNameBytes) {
            offset = buffer.writeInt32BE(encoderNameBytes.length, offset);
            buffer.fill(encoderNameBytes, offset);
            offset += encoderNameBytes.length;
        }
        else {
            buffer.writeInt32BE(0, offset);
        }
        return buffer;
    };
    VideoSettings.prototype.toString = function () {
        return "VideoSettings{bitrate=".concat(this.bitrate, ", maxFps=").concat(this.maxFps, ", iFrameInterval=").concat(this.iFrameInterval, ", bounds=").concat(this.bounds, ", crop=").concat(this.crop, ", metaFrame=").concat(this.sendFrameMeta, ", lockedVideoOrientation=").concat(this.lockedVideoOrientation, ", displayId=").concat(this.displayId, ", codecOptions=").concat(this.codecOptions, ", encoderName=").concat(this.encoderName, "}");
    };
    VideoSettings.prototype.toJSON = function () {
        return {
            bitrate: this.bitrate,
            maxFps: this.maxFps,
            iFrameInterval: this.iFrameInterval,
            bounds: this.bounds,
            crop: this.crop,
            sendFrameMeta: this.sendFrameMeta,
            lockedVideoOrientation: this.lockedVideoOrientation,
            displayId: this.displayId,
            codecOptions: this.codecOptions,
            encoderName: this.encoderName,
        };
    };
    VideoSettings.BASE_BUFFER_LENGTH = 35;
    return VideoSettings;
}());
exports["default"] = VideoSettings;


/***/ }),

/***/ "./src/app/applDevice/client/DeviceTracker.ts":
/*!****************************************************!*\
  !*** ./src/app/applDevice/client/DeviceTracker.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeviceTracker = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BaseDeviceTracker_1 = __webpack_require__(/*! ../../client/BaseDeviceTracker */ "./src/app/client/BaseDeviceTracker.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var HtmlTag_1 = __webpack_require__(/*! ../../ui/HtmlTag */ "./src/app/ui/HtmlTag.ts");
var DeviceState_1 = __webpack_require__(/*! ../../../common/DeviceState */ "./src/common/DeviceState.ts");
var ChannelCode_1 = __webpack_require__(/*! ../../../common/ChannelCode */ "./src/common/ChannelCode.ts");
var DeviceTracker = (function (_super) {
    tslib_1.__extends(DeviceTracker, _super);
    function DeviceTracker(params, directUrl) {
        var _this = _super.call(this, tslib_1.__assign(tslib_1.__assign({}, params), { action: DeviceTracker.ACTION }), directUrl) || this;
        _this.tableId = 'appl_devices_list';
        DeviceTracker.instancesByUrl.set(directUrl, _this);
        _this.buildDeviceTable();
        _this.openNewConnection();
        return _this;
    }
    DeviceTracker.start = function (hostItem) {
        var url = this.buildUrlForTracker(hostItem).toString();
        var instance = this.instancesByUrl.get(url);
        if (!instance) {
            instance = new DeviceTracker(hostItem, url);
        }
        return instance;
    };
    DeviceTracker.getInstance = function (hostItem) {
        return this.start(hostItem);
    };
    DeviceTracker.prototype.onSocketOpen = function () {
    };
    DeviceTracker.prototype.buildDeviceRow = function (tbody, device) {
        var _this = this;
        var blockClass = 'desc-block';
        var fullName = "".concat(this.id, "_").concat(Util_1.default.escapeUdid(device.udid));
        var isActive = device.state === DeviceState_1.DeviceState.CONNECTED;
        var servicesId = "device_services_".concat(fullName);
        var row = (0, HtmlTag_1.html)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["<div class=\"device ", "\">\n            <div class=\"device-header\">\n                <div class=\"device-name\">\"", "\"</div>\n                <div class=\"device-model\">", "</div>\n                <div class=\"device-serial\">", "</div>\n                <div class=\"device-version\">\n                    <div class=\"release-version\">", "</div>\n                </div>\n                <div class=\"device-state\" title=\"State: ", "\"></div>\n            </div>\n            <div id=\"", "\" class=\"services\"></div>\n        </div>"], ["<div class=\"device ", "\">\n            <div class=\"device-header\">\n                <div class=\"device-name\">\"", "\"</div>\n                <div class=\"device-model\">", "</div>\n                <div class=\"device-serial\">", "</div>\n                <div class=\"device-version\">\n                    <div class=\"release-version\">", "</div>\n                </div>\n                <div class=\"device-state\" title=\"State: ", "\"></div>\n            </div>\n            <div id=\"", "\" class=\"services\"></div>\n        </div>"])), isActive ? 'active' : 'not-active', device.name, device.model, device.udid, device.version, device.state, servicesId).content;
        var services = row.getElementById(servicesId);
        if (!services) {
            return;
        }
        DeviceTracker.tools.forEach(function (tool) {
            var entry = tool.createEntryForDeviceList(device, blockClass, _this.params);
            if (entry) {
                if (Array.isArray(entry)) {
                    entry.forEach(function (item) {
                        item && services.appendChild(item);
                    });
                }
                else {
                    services.appendChild(entry);
                }
            }
        });
        tbody.appendChild(row);
    };
    DeviceTracker.prototype.getChannelCode = function () {
        return ChannelCode_1.ChannelCode.ATRC;
    };
    DeviceTracker.ACTION = Action_1.ACTION.APPL_DEVICE_LIST;
    DeviceTracker.tools = new Set();
    DeviceTracker.instancesByUrl = new Map();
    return DeviceTracker;
}(BaseDeviceTracker_1.BaseDeviceTracker));
exports.DeviceTracker = DeviceTracker;
var templateObject_1;


/***/ }),

/***/ "./src/app/client/BaseClient.ts":
/*!**************************************!*\
  !*** ./src/app/client/BaseClient.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseClient = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var TypedEmitter_1 = __webpack_require__(/*! ../../common/TypedEmitter */ "./src/common/TypedEmitter.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var BaseClient = (function (_super) {
    tslib_1.__extends(BaseClient, _super);
    function BaseClient(params) {
        var _this = _super.call(this) || this;
        _this.title = 'BaseClient';
        _this.params = params;
        return _this;
    }
    BaseClient.parseParameters = function (query) {
        var action = Util_1.default.parseStringEnv(query.get('action'));
        if (!action) {
            throw TypeError('Invalid action');
        }
        return {
            action: action,
            useProxy: Util_1.default.parseBooleanEnv(query.get('useProxy')),
            secure: Util_1.default.parseBooleanEnv(query.get('secure')),
            hostname: Util_1.default.parseStringEnv(query.get('hostname')),
            port: Util_1.default.parseIntEnv(query.get('port')),
            pathname: Util_1.default.parseStringEnv(query.get('pathname')),
        };
    };
    BaseClient.prototype.setTitle = function (text) {
        if (text === void 0) { text = this.title; }
        var titleTag = document.querySelector('head > title');
        if (!titleTag) {
            titleTag = document.createElement('title');
        }
        titleTag.innerText = text;
    };
    BaseClient.prototype.setBodyClass = function (text) {
        document.body.className = text;
    };
    return BaseClient;
}(TypedEmitter_1.TypedEmitter));
exports.BaseClient = BaseClient;


/***/ }),

/***/ "./src/app/client/BaseDeviceTracker.ts":
/*!*********************************************!*\
  !*** ./src/app/client/BaseDeviceTracker.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseDeviceTracker = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ManagerClient_1 = __webpack_require__(/*! ./ManagerClient */ "./src/app/client/ManagerClient.ts");
var HtmlTag_1 = __webpack_require__(/*! ../ui/HtmlTag */ "./src/app/ui/HtmlTag.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var TAG = '[BaseDeviceTracker]';
var BaseDeviceTracker = (function (_super) {
    tslib_1.__extends(BaseDeviceTracker, _super);
    function BaseDeviceTracker(params, directUrl) {
        var _this = _super.call(this, params) || this;
        _this.directUrl = directUrl;
        _this.title = 'Device list';
        _this.tableId = 'base_device_list';
        _this.descriptors = [];
        _this.trackerName = '';
        _this.id = '';
        _this.created = false;
        _this.messageId = 0;
        _this.elementId = "tracker_instance".concat(++BaseDeviceTracker.instanceId);
        _this.trackerName = "Unavailable. Host: ".concat(params.hostname, ", type: ").concat(params.type);
        _this.setBodyClass('list');
        _this.setTitle();
        return _this;
    }
    BaseDeviceTracker.registerTool = function (tool) {
        this.tools.add(tool);
    };
    BaseDeviceTracker.buildUrl = function (item) {
        var _a;
        var secure = item.secure, port = item.port, hostname = item.hostname;
        var pathname = (_a = item.pathname) !== null && _a !== void 0 ? _a : '/';
        var protocol = secure ? 'wss:' : 'ws:';
        var url = new URL("".concat(protocol, "//").concat(hostname).concat(pathname));
        if (port) {
            url.port = port.toString();
        }
        return url;
    };
    BaseDeviceTracker.buildUrlForTracker = function (params) {
        var wsUrl = this.buildUrl(params);
        wsUrl.searchParams.set('action', this.ACTION);
        return wsUrl;
    };
    BaseDeviceTracker.buildLink = function (q, text, params) {
        var _a;
        var hostname = params.hostname;
        var port = params.port;
        var pathname = (_a = params.pathname) !== null && _a !== void 0 ? _a : location.pathname;
        var protocol = params.secure ? 'https:' : 'http:';
        if (params.useProxy) {
            q.hostname = hostname;
            q.port = port;
            q.pathname = pathname;
            q.secure = params.secure;
            q.useProxy = true;
            protocol = location.protocol;
            hostname = location.hostname;
            port = location.port;
            pathname = location.pathname;
        }
        var hash = "#!".concat(new URLSearchParams(q).toString());
        var a = document.createElement('a');
        a.setAttribute('href', "".concat(protocol, "//").concat(hostname, ":").concat(port).concat(pathname).concat(hash));
        a.setAttribute('rel', 'noopener noreferrer');
        a.setAttribute('target', '_blank');
        a.classList.add("link-".concat(q.action));
        a.innerText = text;
        return a;
    };
    BaseDeviceTracker.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var type = Util_1.default.parseString(params, 'type', true);
        if (type !== 'android' && type !== 'ios') {
            throw Error('Incorrect type');
        }
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { type: type });
    };
    BaseDeviceTracker.prototype.getNextId = function () {
        return ++this.messageId;
    };
    BaseDeviceTracker.prototype.buildDeviceTable = function () {
        var _this = this;
        var data = this.descriptors;
        var devices = this.getOrCreateTableHolder();
        var tbody = this.getOrBuildTableBody(devices);
        var block = this.getOrCreateTrackerBlock(tbody, this.trackerName);
        data.forEach(function (item) {
            _this.buildDeviceRow(block, item);
        });
    };
    BaseDeviceTracker.prototype.setNameValue = function (parent, name) {
        if (!parent) {
            return;
        }
        var nameBlockId = "".concat(this.elementId, "_name");
        var nameEl = document.getElementById(nameBlockId);
        if (!nameEl) {
            nameEl = document.createElement('div');
            nameEl.id = nameBlockId;
            nameEl.className = 'tracker-name';
        }
        nameEl.innerText = name;
        parent.insertBefore(nameEl, parent.firstChild);
    };
    BaseDeviceTracker.prototype.getOrCreateTrackerBlock = function (parent, controlCenterName) {
        var el = document.getElementById(this.elementId);
        if (!el) {
            el = document.createElement('div');
            el.id = this.elementId;
            parent.appendChild(el);
            this.created = true;
        }
        else {
            while (el.children.length) {
                el.removeChild(el.children[0]);
            }
        }
        this.setNameValue(el, controlCenterName);
        return el;
    };
    BaseDeviceTracker.prototype.onSocketClose = function (event) {
        var _this = this;
        if (this.destroyed) {
            return;
        }
        console.log(TAG, "Connection closed: ".concat(event.reason));
        setTimeout(function () {
            _this.openNewConnection();
        }, 2000);
    };
    BaseDeviceTracker.prototype.onSocketMessage = function (event) {
        var message;
        try {
            message = JSON.parse(event.data);
        }
        catch (error) {
            console.error(TAG, error.message);
            console.log(TAG, error.data);
            return;
        }
        switch (message.type) {
            case BaseDeviceTracker.ACTION_LIST: {
                var event_1 = message.data;
                this.descriptors = event_1.list;
                this.setIdAndHostName(event_1.id, event_1.name);
                this.buildDeviceTable();
                break;
            }
            case BaseDeviceTracker.ACTION_DEVICE: {
                var event_2 = message.data;
                this.setIdAndHostName(event_2.id, event_2.name);
                this.updateDescriptor(event_2.device);
                this.buildDeviceTable();
                break;
            }
            default:
                console.log(TAG, "Unknown message type: ".concat(message.type));
        }
    };
    BaseDeviceTracker.prototype.setIdAndHostName = function (id, trackerName) {
        if (this.id === id && this.trackerName === trackerName) {
            return;
        }
        this.id = id;
        this.trackerName = trackerName;
        this.setNameValue(document.getElementById(this.elementId), trackerName);
    };
    BaseDeviceTracker.prototype.getOrCreateTableHolder = function () {
        var id = BaseDeviceTracker.HOLDER_ELEMENT_ID;
        var devices = document.getElementById(id);
        if (!devices) {
            devices = document.createElement('div');
            devices.id = id;
            devices.className = 'table-wrapper';
            document.body.appendChild(devices);
        }
        return devices;
    };
    BaseDeviceTracker.prototype.updateDescriptor = function (descriptor) {
        var idx = this.descriptors.findIndex(function (item) {
            return item.udid === descriptor.udid;
        });
        if (idx !== -1) {
            this.descriptors[idx] = descriptor;
        }
        else {
            this.descriptors.push(descriptor);
        }
    };
    BaseDeviceTracker.prototype.getOrBuildTableBody = function (parent) {
        var className = 'device-list';
        var tbody = document.querySelector("#".concat(BaseDeviceTracker.HOLDER_ELEMENT_ID, " #").concat(this.tableId, ".").concat(className));
        if (!tbody) {
            var fragment = (0, HtmlTag_1.html)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["<div id=\"", "\" class=\"", "\"></div>"], ["<div id=\"", "\" class=\"", "\"></div>"])), this.tableId, className).content;
            parent.appendChild(fragment);
            var last = parent.children.item(parent.children.length - 1);
            if (last) {
                tbody = last;
            }
        }
        return tbody;
    };
    BaseDeviceTracker.prototype.getDescriptorByUdid = function (udid) {
        if (!this.descriptors.length) {
            return;
        }
        return this.descriptors.find(function (descriptor) {
            return descriptor.udid === udid;
        });
    };
    BaseDeviceTracker.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.created) {
            var el = document.getElementById(this.elementId);
            if (el) {
                var parentElement = el.parentElement;
                el.remove();
                if (parentElement && !parentElement.children.length) {
                    parentElement.remove();
                }
            }
        }
        var holder = document.getElementById(BaseDeviceTracker.HOLDER_ELEMENT_ID);
        if (holder && !holder.children.length) {
            holder.remove();
        }
    };
    BaseDeviceTracker.prototype.supportMultiplexing = function () {
        return true;
    };
    BaseDeviceTracker.prototype.getChannelCode = function () {
        throw Error('Not implemented. Must override');
    };
    BaseDeviceTracker.prototype.getChannelInitData = function () {
        var code = this.getChannelCode();
        var buffer = Buffer.alloc(code.length);
        buffer.write(code, 'ascii');
        return buffer;
    };
    BaseDeviceTracker.ACTION_LIST = 'devicelist';
    BaseDeviceTracker.ACTION_DEVICE = 'device';
    BaseDeviceTracker.HOLDER_ELEMENT_ID = 'devices';
    BaseDeviceTracker.AttributePrefixInterfaceSelectFor = 'interface_select_for_';
    BaseDeviceTracker.AttributePlayerFullName = 'data-player-full-name';
    BaseDeviceTracker.AttributePlayerCodeName = 'data-player-code-name';
    BaseDeviceTracker.AttributePrefixPlayerFor = 'player_for_';
    BaseDeviceTracker.tools = new Set();
    BaseDeviceTracker.instanceId = 0;
    return BaseDeviceTracker;
}(ManagerClient_1.ManagerClient));
exports.BaseDeviceTracker = BaseDeviceTracker;
var templateObject_1;


/***/ }),

/***/ "./src/app/client/HostTracker.ts":
/*!***************************************!*\
  !*** ./src/app/client/HostTracker.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostTracker = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ManagerClient_1 = __webpack_require__(/*! ./ManagerClient */ "./src/app/client/ManagerClient.ts");
var HostTrackerMessage_1 = __webpack_require__(/*! ../../common/HostTrackerMessage */ "./src/common/HostTrackerMessage.ts");
var Action_1 = __webpack_require__(/*! ../../common/Action */ "./src/common/Action.ts");
var DeviceTracker_1 = __webpack_require__(/*! ../googDevice/client/DeviceTracker */ "./src/app/googDevice/client/DeviceTracker.ts");
var DeviceTracker_2 = __webpack_require__(/*! ../applDevice/client/DeviceTracker */ "./src/app/applDevice/client/DeviceTracker.ts");
var ChannelCode_1 = __webpack_require__(/*! ../../common/ChannelCode */ "./src/common/ChannelCode.ts");
var TAG = '[HostTracker]';
var HostTracker = (function (_super) {
    tslib_1.__extends(HostTracker, _super);
    function HostTracker() {
        var _this = _super.call(this, { action: Action_1.ACTION.LIST_HOSTS }) || this;
        _this.trackers = [];
        _this.openNewConnection();
        if (_this.ws) {
            _this.ws.binaryType = 'arraybuffer';
        }
        return _this;
    }
    HostTracker.start = function () {
        this.getInstance();
    };
    HostTracker.getInstance = function () {
        if (!this.instance) {
            this.instance = new HostTracker();
        }
        return this.instance;
    };
    HostTracker.prototype.onSocketClose = function (ev) {
        console.log(TAG, 'WS closed');
        this.emit('disconnected', ev);
    };
    HostTracker.prototype.onSocketMessage = function (event) {
        var _this = this;
        var message;
        try {
            message = JSON.parse(event.data);
        }
        catch (error) {
            console.error(TAG, error.message);
            console.log(TAG, error.data);
            return;
        }
        switch (message.type) {
            case HostTrackerMessage_1.MessageType.ERROR: {
                var msg = message;
                console.error(TAG, msg.data);
                this.emit('error', msg.data);
                break;
            }
            case HostTrackerMessage_1.MessageType.HOSTS: {
                var msg = message;
                if (msg.data.local) {
                    msg.data.local.forEach(function (_a) {
                        var type = _a.type;
                        var secure = location.protocol === 'https:';
                        var port = location.port ? parseInt(location.port, 10) : secure ? 443 : 80;
                        var hostname = location.hostname, pathname = location.pathname;
                        if (type !== 'android' && type !== 'ios') {
                            console.warn(TAG, "Unsupported host type: \"".concat(type, "\""));
                            return;
                        }
                        var hostItem = { useProxy: false, secure: secure, port: port, hostname: hostname, pathname: pathname, type: type };
                        _this.startTracker(hostItem);
                    });
                }
                if (msg.data.remote) {
                    msg.data.remote.forEach(function (item) { return _this.startTracker(item); });
                }
                break;
            }
            default:
                console.log(TAG, "Unknown message type: ".concat(message.type));
        }
    };
    HostTracker.prototype.startTracker = function (hostItem) {
        switch (hostItem.type) {
            case 'android':
                this.trackers.push(DeviceTracker_1.DeviceTracker.start(hostItem));
                break;
            case 'ios':
                this.trackers.push(DeviceTracker_2.DeviceTracker.start(hostItem));
                break;
            default:
                console.warn(TAG, "Unsupported host type: \"".concat(hostItem.type, "\""));
        }
    };
    HostTracker.prototype.onSocketOpen = function () {
    };
    HostTracker.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.trackers.forEach(function (tracker) {
            tracker.destroy();
        });
        this.trackers.length = 0;
    };
    HostTracker.prototype.supportMultiplexing = function () {
        return true;
    };
    HostTracker.prototype.getChannelInitData = function () {
        var buffer = Buffer.alloc(4);
        buffer.write(ChannelCode_1.ChannelCode.HSTS, 'ascii');
        return buffer;
    };
    return HostTracker;
}(ManagerClient_1.ManagerClient));
exports.HostTracker = HostTracker;


/***/ }),

/***/ "./src/app/client/ManagerClient.ts":
/*!*****************************************!*\
  !*** ./src/app/client/ManagerClient.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManagerClient = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BaseClient_1 = __webpack_require__(/*! ./BaseClient */ "./src/app/client/BaseClient.ts");
var Action_1 = __webpack_require__(/*! ../../common/Action */ "./src/common/Action.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var Multiplexer_1 = __webpack_require__(/*! ../../packages/multiplexer/Multiplexer */ "./src/packages/multiplexer/Multiplexer.ts");
var ManagerClient = (function (_super) {
    tslib_1.__extends(ManagerClient, _super);
    function ManagerClient(params) {
        var _this = _super.call(this, params) || this;
        _this.destroyed = false;
        _this.action = Util_1.default.parseStringEnv(params.action);
        _this.url = _this.buildWebSocketUrl();
        return _this;
    }
    ManagerClient.start = function () {
        var _rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _rest[_i] = arguments[_i];
        }
        throw Error('Not implemented');
    };
    ManagerClient.prototype.hasConnection = function () {
        return !!(this.ws && this.ws.readyState === this.ws.OPEN);
    };
    ManagerClient.prototype.openNewConnection = function () {
        if (this.ws && this.ws.readyState === this.ws.OPEN) {
            this.ws.close();
            delete this.ws;
        }
        var url = this.url.toString();
        if (this.supportMultiplexing()) {
            var openedMultiplexer = ManagerClient.sockets.get(url);
            if (!openedMultiplexer) {
                var ws_1 = new WebSocket(url);
                ws_1.addEventListener('close', function () {
                    ManagerClient.sockets.delete(url);
                });
                var newMultiplexer_1 = Multiplexer_1.Multiplexer.wrap(ws_1);
                newMultiplexer_1.on('empty', function () {
                    newMultiplexer_1.close();
                });
                ManagerClient.sockets.set(url, newMultiplexer_1);
                openedMultiplexer = newMultiplexer_1;
            }
            var ws = openedMultiplexer.createChannel(this.getChannelInitData());
            ws.addEventListener('open', this.onSocketOpen.bind(this));
            ws.addEventListener('message', this.onSocketMessage.bind(this));
            ws.addEventListener('close', this.onSocketClose.bind(this));
            this.ws = ws;
        }
        else {
            var ws = new WebSocket(url);
            ws.addEventListener('open', this.onSocketOpen.bind(this));
            ws.addEventListener('message', this.onSocketMessage.bind(this));
            ws.addEventListener('close', this.onSocketClose.bind(this));
            this.ws = ws;
        }
        return this.ws;
    };
    ManagerClient.prototype.destroy = function () {
        if (this.destroyed) {
            console.error(new Error('Already disposed'));
            return;
        }
        this.destroyed = true;
        if (this.ws) {
            if (this.ws.readyState === this.ws.OPEN) {
                this.ws.close();
            }
        }
    };
    ManagerClient.prototype.buildWebSocketUrl = function () {
        var directUrl = this.buildDirectWebSocketUrl();
        if (this.params.useProxy && !this.supportMultiplexing()) {
            return this.wrapInProxy(directUrl);
        }
        return directUrl;
    };
    ManagerClient.prototype.buildDirectWebSocketUrl = function () {
        var _a;
        var _b = this.params, hostname = _b.hostname, port = _b.port, secure = _b.secure, action = _b.action;
        var pathname = (_a = this.params.pathname) !== null && _a !== void 0 ? _a : location.pathname;
        var urlString;
        if (typeof hostname === 'string' && typeof port === 'number') {
            var protocol = secure ? 'wss:' : 'ws:';
            urlString = "".concat(protocol, "//").concat(hostname, ":").concat(port).concat(pathname);
        }
        else {
            var protocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
            urlString = "".concat(protocol).concat(location.host).concat(pathname);
        }
        var directUrl = new URL(urlString);
        if (this.supportMultiplexing()) {
            directUrl.searchParams.set('action', Action_1.ACTION.MULTIPLEX);
        }
        else {
            if (action) {
                directUrl.searchParams.set('action', action);
            }
        }
        return directUrl;
    };
    ManagerClient.prototype.wrapInProxy = function (directUrl) {
        var localProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
        var localUrl = new URL("".concat(localProtocol, "//").concat(location.host));
        localUrl.searchParams.set('action', Action_1.ACTION.PROXY_WS);
        localUrl.searchParams.set('ws', directUrl.toString());
        return localUrl;
    };
    ManagerClient.prototype.supportMultiplexing = function () {
        return false;
    };
    ManagerClient.prototype.getChannelInitData = function () {
        return Buffer.from(ManagerClient.CODE);
    };
    ManagerClient.ACTION = 'unknown';
    ManagerClient.CODE = 'NONE';
    ManagerClient.sockets = new Map();
    return ManagerClient;
}(BaseClient_1.BaseClient));
exports.ManagerClient = ManagerClient;


/***/ }),

/***/ "./src/app/client/StreamReceiver.ts":
/*!******************************************!*\
  !*** ./src/app/client/StreamReceiver.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StreamReceiver = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ManagerClient_1 = __webpack_require__(/*! ./ManagerClient */ "./src/app/client/ManagerClient.ts");
var DeviceMessage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../googDevice/DeviceMessage */ "./src/app/googDevice/DeviceMessage.ts"));
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var ScreenInfo_1 = tslib_1.__importDefault(__webpack_require__(/*! ../ScreenInfo */ "./src/app/ScreenInfo.ts"));
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var DisplayInfo_1 = __webpack_require__(/*! ../DisplayInfo */ "./src/app/DisplayInfo.ts");
var DEVICE_NAME_FIELD_LENGTH = 64;
var MAGIC_BYTES_INITIAL = Util_1.default.stringToUtf8ByteArray('scrcpy_initial');
var TAG = '[StreamReceiver]';
var StreamReceiver = (function (_super) {
    tslib_1.__extends(StreamReceiver, _super);
    function StreamReceiver(params) {
        var _this = _super.call(this, params) || this;
        _this.events = [];
        _this.encodersSet = new Set();
        _this.clientId = -1;
        _this.deviceName = '';
        _this.displayInfoMap = new Map();
        _this.connectionCountMap = new Map();
        _this.screenInfoMap = new Map();
        _this.videoSettingsMap = new Map();
        _this.hasInitialInfo = false;
        _this.openNewConnection();
        if (_this.ws) {
            _this.ws.binaryType = 'arraybuffer';
        }
        return _this;
    }
    StreamReceiver.prototype.handleInitialInfo = function (data) {
        var offset = MAGIC_BYTES_INITIAL.length;
        var nameBytes = new Uint8Array(data, offset, DEVICE_NAME_FIELD_LENGTH);
        offset += DEVICE_NAME_FIELD_LENGTH;
        var rest = Buffer.from(new Uint8Array(data, offset));
        var displaysCount = rest.readInt32BE(0);
        this.displayInfoMap.clear();
        this.connectionCountMap.clear();
        this.screenInfoMap.clear();
        this.videoSettingsMap.clear();
        rest = rest.slice(4);
        for (var i = 0; i < displaysCount; i++) {
            var displayInfoBuffer = rest.slice(0, DisplayInfo_1.DisplayInfo.BUFFER_LENGTH);
            var displayInfo = DisplayInfo_1.DisplayInfo.fromBuffer(displayInfoBuffer);
            var displayId = displayInfo.displayId;
            this.displayInfoMap.set(displayId, displayInfo);
            rest = rest.slice(DisplayInfo_1.DisplayInfo.BUFFER_LENGTH);
            this.connectionCountMap.set(displayId, rest.readInt32BE(0));
            rest = rest.slice(4);
            var screenInfoBytesCount = rest.readInt32BE(0);
            rest = rest.slice(4);
            if (screenInfoBytesCount) {
                this.screenInfoMap.set(displayId, ScreenInfo_1.default.fromBuffer(rest.slice(0, screenInfoBytesCount)));
                rest = rest.slice(screenInfoBytesCount);
            }
            var videoSettingsBytesCount = rest.readInt32BE(0);
            rest = rest.slice(4);
            if (videoSettingsBytesCount) {
                this.videoSettingsMap.set(displayId, VideoSettings_1.default.fromBuffer(rest.slice(0, videoSettingsBytesCount)));
                rest = rest.slice(videoSettingsBytesCount);
            }
        }
        this.encodersSet.clear();
        var encodersCount = rest.readInt32BE(0);
        rest = rest.slice(4);
        for (var i = 0; i < encodersCount; i++) {
            var nameLength = rest.readInt32BE(0);
            rest = rest.slice(4);
            var nameBytes_1 = rest.slice(0, nameLength);
            rest = rest.slice(nameLength);
            var name_1 = Util_1.default.utf8ByteArrayToString(nameBytes_1);
            this.encodersSet.add(name_1);
        }
        this.clientId = rest.readInt32BE(0);
        nameBytes = Util_1.default.filterTrailingZeroes(nameBytes);
        this.deviceName = Util_1.default.utf8ByteArrayToString(nameBytes);
        this.hasInitialInfo = true;
        this.triggerInitialInfoEvents();
    };
    StreamReceiver.EqualArrays = function (a, b) {
        if (a.length !== b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    };
    StreamReceiver.prototype.buildDirectWebSocketUrl = function () {
        var localUrl = _super.prototype.buildDirectWebSocketUrl.call(this);
        if (this.supportMultiplexing()) {
            return localUrl;
        }
        localUrl.searchParams.set('udid', this.params.udid);
        return localUrl;
    };
    StreamReceiver.prototype.onSocketClose = function (ev) {
        console.log("".concat(TAG, ". WS closed: ").concat(ev.reason));
        this.emit('disconnected', ev);
    };
    StreamReceiver.prototype.onSocketMessage = function (event) {
        if (event.data instanceof ArrayBuffer) {
            if (event.data.byteLength > MAGIC_BYTES_INITIAL.length) {
                var magicBytes = new Uint8Array(event.data, 0, MAGIC_BYTES_INITIAL.length);
                if (StreamReceiver.EqualArrays(magicBytes, MAGIC_BYTES_INITIAL)) {
                    this.handleInitialInfo(event.data);
                    return;
                }
                if (StreamReceiver.EqualArrays(magicBytes, DeviceMessage_1.default.MAGIC_BYTES_MESSAGE)) {
                    var message = DeviceMessage_1.default.fromBuffer(event.data);
                    this.emit('deviceMessage', message);
                    return;
                }
            }
            this.emit('video', new Uint8Array(event.data));
        }
    };
    StreamReceiver.prototype.onSocketOpen = function () {
        this.emit('connected', void 0);
        var e = this.events.shift();
        while (e) {
            this.sendEvent(e);
            e = this.events.shift();
        }
    };
    StreamReceiver.prototype.sendEvent = function (event) {
        if (this.ws && this.ws.readyState === this.ws.OPEN) {
            this.ws.send(event.toBuffer());
        }
        else {
            this.events.push(event);
        }
    };
    StreamReceiver.prototype.stop = function () {
        if (this.ws && this.ws.readyState === this.ws.OPEN) {
            this.ws.close();
        }
        this.events.length = 0;
    };
    StreamReceiver.prototype.getEncoders = function () {
        return Array.from(this.encodersSet.values());
    };
    StreamReceiver.prototype.getDeviceName = function () {
        return this.deviceName;
    };
    StreamReceiver.prototype.triggerInitialInfoEvents = function () {
        var _this = this;
        if (this.hasInitialInfo) {
            var encoders = this.getEncoders();
            this.emit('encoders', encoders);
            var _a = this, clientId = _a.clientId, deviceName = _a.deviceName;
            this.emit('clientsStats', { clientId: clientId, deviceName: deviceName });
            var infoArray_1 = [];
            this.displayInfoMap.forEach(function (displayInfo, displayId) {
                var connectionCount = _this.connectionCountMap.get(displayId) || 0;
                infoArray_1.push({
                    displayInfo: displayInfo,
                    videoSettings: _this.videoSettingsMap.get(displayId),
                    screenInfo: _this.screenInfoMap.get(displayId),
                    connectionCount: connectionCount,
                });
            });
            this.emit('displayInfo', infoArray_1);
        }
    };
    StreamReceiver.prototype.getDisplayInfo = function (displayId) {
        return this.displayInfoMap.get(displayId);
    };
    return StreamReceiver;
}(ManagerClient_1.ManagerClient));
exports.StreamReceiver = StreamReceiver;


/***/ }),

/***/ "./src/app/controlMessage/CommandControlMessage.ts":
/*!*********************************************************!*\
  !*** ./src/app/controlMessage/CommandControlMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandControlMessage = exports.FilePushState = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ControlMessage_1 = __webpack_require__(/*! ./ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var FilePushState;
(function (FilePushState) {
    FilePushState[FilePushState["NEW"] = 0] = "NEW";
    FilePushState[FilePushState["START"] = 1] = "START";
    FilePushState[FilePushState["APPEND"] = 2] = "APPEND";
    FilePushState[FilePushState["FINISH"] = 3] = "FINISH";
    FilePushState[FilePushState["CANCEL"] = 4] = "CANCEL";
})(FilePushState = exports.FilePushState || (exports.FilePushState = {}));
var CommandControlMessage = (function (_super) {
    tslib_1.__extends(CommandControlMessage, _super);
    function CommandControlMessage(type) {
        var _this = _super.call(this, type) || this;
        _this.type = type;
        return _this;
    }
    CommandControlMessage.createSetVideoSettingsCommand = function (videoSettings) {
        var temp = videoSettings.toBuffer();
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_CHANGE_STREAM_PARAMETERS);
        var offset = CommandControlMessage.PAYLOAD_LENGTH + 1;
        var buffer = Buffer.alloc(offset + temp.length);
        buffer.writeUInt8(event.type, 0);
        temp.forEach(function (byte, index) {
            buffer.writeUInt8(byte, index + offset);
        });
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.createSetClipboardCommand = function (text, paste) {
        if (paste === void 0) { paste = false; }
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_SET_CLIPBOARD);
        var textBytes = text ? Util_1.default.stringToUtf8ByteArray(text) : null;
        var textLength = textBytes ? textBytes.length : 0;
        var offset = 0;
        var buffer = Buffer.alloc(1 + 1 + 4 + textLength);
        offset = buffer.writeInt8(event.type, offset);
        offset = buffer.writeInt8(paste ? 1 : 0, offset);
        offset = buffer.writeInt32BE(textLength, offset);
        if (textBytes) {
            textBytes.forEach(function (byte, index) {
                buffer.writeUInt8(byte, index + offset);
            });
        }
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.createSetScreenPowerModeCommand = function (mode) {
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_SET_SCREEN_POWER_MODE);
        var offset = 0;
        var buffer = Buffer.alloc(1 + 1);
        offset = buffer.writeInt8(event.type, offset);
        buffer.writeUInt8(mode ? 1 : 0, offset);
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.createPushFileCommand = function (params) {
        var id = params.id, fileName = params.fileName, fileSize = params.fileSize, chunk = params.chunk, state = params.state;
        if (state === FilePushState.START) {
            return this.createPushFileStartCommand(id, fileName, fileSize);
        }
        if (state === FilePushState.APPEND) {
            if (!chunk) {
                throw TypeError('Invalid type');
            }
            return this.createPushFileChunkCommand(id, chunk);
        }
        if (state === FilePushState.CANCEL || state === FilePushState.FINISH || state === FilePushState.NEW) {
            return this.createPushFileOtherCommand(id, state);
        }
        throw TypeError("Unsupported state: \"".concat(state, "\""));
    };
    CommandControlMessage.createPushFileStartCommand = function (id, fileName, fileSize) {
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_PUSH_FILE);
        var text = Util_1.default.stringToUtf8ByteArray(fileName);
        var typeField = 1;
        var idField = 2;
        var stateField = 1;
        var sizeField = 4;
        var textLengthField = 2;
        var textLength = text.length;
        var offset = CommandControlMessage.PAYLOAD_LENGTH;
        var buffer = Buffer.alloc(offset + typeField + idField + stateField + sizeField + textLengthField + textLength);
        buffer.writeUInt8(event.type, offset);
        offset += typeField;
        buffer.writeInt16BE(id, offset);
        offset += idField;
        buffer.writeInt8(FilePushState.START, offset);
        offset += stateField;
        buffer.writeUInt32BE(fileSize, offset);
        offset += sizeField;
        buffer.writeUInt16BE(textLength, offset);
        offset += textLengthField;
        text.forEach(function (byte, index) {
            buffer.writeUInt8(byte, index + offset);
        });
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.createPushFileChunkCommand = function (id, chunk) {
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_PUSH_FILE);
        var typeField = 1;
        var idField = 2;
        var stateField = 1;
        var chunkLengthField = 4;
        var chunkLength = chunk.byteLength;
        var offset = CommandControlMessage.PAYLOAD_LENGTH;
        var buffer = Buffer.alloc(offset + typeField + idField + stateField + chunkLengthField + chunkLength);
        buffer.writeUInt8(event.type, offset);
        offset += typeField;
        buffer.writeInt16BE(id, offset);
        offset += idField;
        buffer.writeInt8(FilePushState.APPEND, offset);
        offset += stateField;
        buffer.writeUInt32BE(chunkLength, offset);
        offset += chunkLengthField;
        Array.from(chunk).forEach(function (byte, index) {
            buffer.writeUInt8(byte, index + offset);
        });
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.createPushFileOtherCommand = function (id, state) {
        var event = new CommandControlMessage(ControlMessage_1.ControlMessage.TYPE_PUSH_FILE);
        var typeField = 1;
        var idField = 2;
        var stateField = 1;
        var offset = CommandControlMessage.PAYLOAD_LENGTH;
        var buffer = Buffer.alloc(offset + typeField + idField + stateField);
        buffer.writeUInt8(event.type, offset);
        offset += typeField;
        buffer.writeInt16BE(id, offset);
        offset += idField;
        buffer.writeInt8(state, offset);
        event.buffer = buffer;
        return event;
    };
    CommandControlMessage.pushFileCommandFromBuffer = function (buffer) {
        var offset = 0;
        var type = buffer.readUInt8(offset);
        offset += 1;
        if (type !== CommandControlMessage.TYPE_PUSH_FILE) {
            throw TypeError("Incorrect type: \"".concat(type, "\""));
        }
        var id = buffer.readInt16BE(offset);
        offset += 2;
        var state = buffer.readInt8(offset);
        offset += 1;
        var chunk;
        var fileSize;
        var fileName;
        if (state === FilePushState.APPEND) {
            var chunkLength = buffer.readUInt32BE(offset);
            offset += 4;
            chunk = buffer.slice(offset, offset + chunkLength);
        }
        else if (state === FilePushState.START) {
            fileSize = buffer.readUInt32BE(offset);
            offset += 4;
            var textLength = buffer.readUInt16BE(offset);
            offset += 2;
            fileName = Util_1.default.utf8ByteArrayToString(buffer.slice(offset, offset + textLength));
        }
        return { id: id, state: state, chunk: chunk, fileName: fileName, fileSize: fileSize };
    };
    CommandControlMessage.prototype.toBuffer = function () {
        if (!this.buffer) {
            var buffer = Buffer.alloc(CommandControlMessage.PAYLOAD_LENGTH + 1);
            buffer.writeUInt8(this.type, 0);
            this.buffer = buffer;
        }
        return this.buffer;
    };
    CommandControlMessage.prototype.toString = function () {
        var buffer = this.buffer ? ", buffer=[".concat(this.buffer.join(','), "]") : '';
        return "CommandControlMessage{action=".concat(this.type).concat(buffer, "}");
    };
    CommandControlMessage.PAYLOAD_LENGTH = 0;
    CommandControlMessage.Commands = new Map([
        [ControlMessage_1.ControlMessage.TYPE_EXPAND_NOTIFICATION_PANEL, 'Expandir notificaciones'],
        [ControlMessage_1.ControlMessage.TYPE_EXPAND_SETTINGS_PANEL, 'Expandir configuraciones'],
        [ControlMessage_1.ControlMessage.TYPE_COLLAPSE_PANELS, 'Contraer paneles'],
        [ControlMessage_1.ControlMessage.TYPE_GET_CLIPBOARD, 'Obtener portapapeles'],
        [ControlMessage_1.ControlMessage.TYPE_SET_CLIPBOARD, 'Pegar portapapeles'],
        [ControlMessage_1.ControlMessage.TYPE_ROTATE_DEVICE, 'Girar dispositivo'],
        [ControlMessage_1.ControlMessage.TYPE_CHANGE_STREAM_PARAMETERS, 'Cambiar configuración(video)'],
    ]);
    return CommandControlMessage;
}(ControlMessage_1.ControlMessage));
exports.CommandControlMessage = CommandControlMessage;


/***/ }),

/***/ "./src/app/controlMessage/ControlMessage.ts":
/*!**************************************************!*\
  !*** ./src/app/controlMessage/ControlMessage.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ControlMessage = void 0;
var ControlMessage = (function () {
    function ControlMessage(type) {
        this.type = type;
    }
    ControlMessage.prototype.toBuffer = function () {
        throw Error('Not implemented');
    };
    ControlMessage.prototype.toString = function () {
        return 'ControlMessage';
    };
    ControlMessage.prototype.toJSON = function () {
        return {
            type: this.type,
        };
    };
    ControlMessage.TYPE_KEYCODE = 0;
    ControlMessage.TYPE_TEXT = 1;
    ControlMessage.TYPE_TOUCH = 2;
    ControlMessage.TYPE_SCROLL = 3;
    ControlMessage.TYPE_BACK_OR_SCREEN_ON = 4;
    ControlMessage.TYPE_EXPAND_NOTIFICATION_PANEL = 5;
    ControlMessage.TYPE_EXPAND_SETTINGS_PANEL = 6;
    ControlMessage.TYPE_COLLAPSE_PANELS = 7;
    ControlMessage.TYPE_GET_CLIPBOARD = 8;
    ControlMessage.TYPE_SET_CLIPBOARD = 9;
    ControlMessage.TYPE_SET_SCREEN_POWER_MODE = 10;
    ControlMessage.TYPE_ROTATE_DEVICE = 11;
    ControlMessage.TYPE_CHANGE_STREAM_PARAMETERS = 101;
    ControlMessage.TYPE_PUSH_FILE = 102;
    return ControlMessage;
}());
exports.ControlMessage = ControlMessage;


/***/ }),

/***/ "./src/app/controlMessage/KeyCodeControlMessage.ts":
/*!*********************************************************!*\
  !*** ./src/app/controlMessage/KeyCodeControlMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyCodeControlMessage = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var buffer_1 = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
var ControlMessage_1 = __webpack_require__(/*! ./ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var KeyCodeControlMessage = (function (_super) {
    tslib_1.__extends(KeyCodeControlMessage, _super);
    function KeyCodeControlMessage(action, keycode, repeat, metaState) {
        var _this = _super.call(this, ControlMessage_1.ControlMessage.TYPE_KEYCODE) || this;
        _this.action = action;
        _this.keycode = keycode;
        _this.repeat = repeat;
        _this.metaState = metaState;
        return _this;
    }
    KeyCodeControlMessage.prototype.toBuffer = function () {
        var buffer = buffer_1.Buffer.alloc(KeyCodeControlMessage.PAYLOAD_LENGTH + 1);
        var offset = 0;
        offset = buffer.writeInt8(this.type, offset);
        offset = buffer.writeInt8(this.action, offset);
        offset = buffer.writeInt32BE(this.keycode, offset);
        offset = buffer.writeInt32BE(this.repeat, offset);
        buffer.writeInt32BE(this.metaState, offset);
        return buffer;
    };
    KeyCodeControlMessage.prototype.toString = function () {
        return "KeyCodeControlMessage{action=".concat(this.action, ", keycode=").concat(this.keycode, ", metaState=").concat(this.metaState, "}");
    };
    KeyCodeControlMessage.prototype.toJSON = function () {
        return {
            type: this.type,
            action: this.action,
            keycode: this.keycode,
            metaState: this.metaState,
            repeat: this.repeat,
        };
    };
    KeyCodeControlMessage.PAYLOAD_LENGTH = 13;
    return KeyCodeControlMessage;
}(ControlMessage_1.ControlMessage));
exports.KeyCodeControlMessage = KeyCodeControlMessage;


/***/ }),

/***/ "./src/app/controlMessage/ScrollControlMessage.ts":
/*!********************************************************!*\
  !*** ./src/app/controlMessage/ScrollControlMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScrollControlMessage = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ControlMessage_1 = __webpack_require__(/*! ./ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var ScrollControlMessage = (function (_super) {
    tslib_1.__extends(ScrollControlMessage, _super);
    function ScrollControlMessage(position, hScroll, vScroll) {
        var _this = _super.call(this, ControlMessage_1.ControlMessage.TYPE_SCROLL) || this;
        _this.position = position;
        _this.hScroll = hScroll;
        _this.vScroll = vScroll;
        return _this;
    }
    ScrollControlMessage.prototype.toBuffer = function () {
        var buffer = Buffer.alloc(ScrollControlMessage.PAYLOAD_LENGTH + 1);
        var offset = 0;
        offset = buffer.writeUInt8(this.type, offset);
        offset = buffer.writeUInt32BE(this.position.point.x, offset);
        offset = buffer.writeUInt32BE(this.position.point.y, offset);
        offset = buffer.writeUInt16BE(this.position.screenSize.width, offset);
        offset = buffer.writeUInt16BE(this.position.screenSize.height, offset);
        offset = buffer.writeInt32BE(this.hScroll, offset);
        buffer.writeInt32BE(this.vScroll, offset);
        return buffer;
    };
    ScrollControlMessage.prototype.toString = function () {
        return "ScrollControlMessage{hScroll=".concat(this.hScroll, ", vScroll=").concat(this.vScroll, ", position=").concat(this.position, "}");
    };
    ScrollControlMessage.prototype.toJSON = function () {
        return {
            type: this.type,
            position: this.position.toJSON(),
            hScroll: this.hScroll,
            vScroll: this.vScroll,
        };
    };
    ScrollControlMessage.PAYLOAD_LENGTH = 20;
    return ScrollControlMessage;
}(ControlMessage_1.ControlMessage));
exports.ScrollControlMessage = ScrollControlMessage;


/***/ }),

/***/ "./src/app/controlMessage/TextControlMessage.ts":
/*!******************************************************!*\
  !*** ./src/app/controlMessage/TextControlMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextControlMessage = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var buffer_1 = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
var ControlMessage_1 = __webpack_require__(/*! ./ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var TextControlMessage = (function (_super) {
    tslib_1.__extends(TextControlMessage, _super);
    function TextControlMessage(text) {
        var _this = _super.call(this, ControlMessage_1.ControlMessage.TYPE_TEXT) || this;
        _this.text = text;
        return _this;
    }
    TextControlMessage.prototype.getText = function () {
        return this.text;
    };
    TextControlMessage.prototype.toBuffer = function () {
        var length = this.text.length;
        var buffer = buffer_1.Buffer.alloc(length + 1 + TextControlMessage.TEXT_SIZE_FIELD_LENGTH);
        var offset = 0;
        offset = buffer.writeUInt8(this.type, offset);
        offset = buffer.writeUInt32BE(length, offset);
        buffer.write(this.text, offset);
        return buffer;
    };
    TextControlMessage.prototype.toString = function () {
        return "TextControlMessage{text=".concat(this.text, "}");
    };
    TextControlMessage.prototype.toJSON = function () {
        return {
            type: this.type,
            text: this.text,
        };
    };
    TextControlMessage.TEXT_SIZE_FIELD_LENGTH = 4;
    return TextControlMessage;
}(ControlMessage_1.ControlMessage));
exports.TextControlMessage = TextControlMessage;


/***/ }),

/***/ "./src/app/controlMessage/TouchControlMessage.ts":
/*!*******************************************************!*\
  !*** ./src/app/controlMessage/TouchControlMessage.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TouchControlMessage = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ControlMessage_1 = __webpack_require__(/*! ./ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var TouchControlMessage = (function (_super) {
    tslib_1.__extends(TouchControlMessage, _super);
    function TouchControlMessage(action, pointerId, position, pressure, buttons) {
        var _this = _super.call(this, ControlMessage_1.ControlMessage.TYPE_TOUCH) || this;
        _this.action = action;
        _this.pointerId = pointerId;
        _this.position = position;
        _this.pressure = pressure;
        _this.buttons = buttons;
        return _this;
    }
    TouchControlMessage.prototype.toBuffer = function () {
        var buffer = Buffer.alloc(TouchControlMessage.PAYLOAD_LENGTH + 1);
        var offset = 0;
        offset = buffer.writeUInt8(this.type, offset);
        offset = buffer.writeUInt8(this.action, offset);
        offset = buffer.writeUInt32BE(0, offset);
        offset = buffer.writeUInt32BE(this.pointerId, offset);
        offset = buffer.writeUInt32BE(this.position.point.x, offset);
        offset = buffer.writeUInt32BE(this.position.point.y, offset);
        offset = buffer.writeUInt16BE(this.position.screenSize.width, offset);
        offset = buffer.writeUInt16BE(this.position.screenSize.height, offset);
        offset = buffer.writeUInt16BE(this.pressure * TouchControlMessage.MAX_PRESSURE_VALUE, offset);
        buffer.writeUInt32BE(this.buttons, offset);
        return buffer;
    };
    TouchControlMessage.prototype.toString = function () {
        return "TouchControlMessage{action=".concat(this.action, ", pointerId=").concat(this.pointerId, ", position=").concat(this.position, ", pressure=").concat(this.pressure, ", buttons=").concat(this.buttons, "}");
    };
    TouchControlMessage.prototype.toJSON = function () {
        return {
            type: this.type,
            action: this.action,
            pointerId: this.pointerId,
            position: this.position.toJSON(),
            pressure: this.pressure,
            buttons: this.buttons,
        };
    };
    TouchControlMessage.PAYLOAD_LENGTH = 28;
    TouchControlMessage.MAX_PRESSURE_VALUE = 0xffff;
    return TouchControlMessage;
}(ControlMessage_1.ControlMessage));
exports.TouchControlMessage = TouchControlMessage;


/***/ }),

/***/ "./src/app/googDevice/DeviceMessage.ts":
/*!*********************************************!*\
  !*** ./src/app/googDevice/DeviceMessage.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var DeviceMessage = (function () {
    function DeviceMessage(type, buffer) {
        this.type = type;
        this.buffer = buffer;
    }
    DeviceMessage.fromBuffer = function (data) {
        var magicSize = this.MAGIC_BYTES_MESSAGE.length;
        var buffer = Buffer.from(data, magicSize, data.byteLength - magicSize);
        var type = buffer.readUInt8(0);
        return new DeviceMessage(type, buffer);
    };
    DeviceMessage.prototype.getText = function () {
        if (this.type !== DeviceMessage.TYPE_CLIPBOARD) {
            throw TypeError("Wrong message type: ".concat(this.type));
        }
        if (!this.buffer) {
            throw Error('Empty buffer');
        }
        var offset = 1;
        var length = this.buffer.readInt32BE(offset);
        offset += 4;
        var textBytes = this.buffer.slice(offset, offset + length);
        return Util_1.default.utf8ByteArrayToString(textBytes);
    };
    DeviceMessage.prototype.getPushStats = function () {
        if (this.type !== DeviceMessage.TYPE_PUSH_RESPONSE) {
            throw TypeError("Wrong message type: ".concat(this.type));
        }
        if (!this.buffer) {
            throw Error('Empty buffer');
        }
        var id = this.buffer.readInt16BE(1);
        var code = this.buffer.readInt8(3);
        return { id: id, code: code };
    };
    DeviceMessage.prototype.toString = function () {
        var desc;
        if (this.type === DeviceMessage.TYPE_CLIPBOARD && this.buffer) {
            desc = ", text=[".concat(this.getText(), "]");
        }
        else {
            desc = this.buffer ? ", buffer=[".concat(this.buffer.join(','), "]") : '';
        }
        return "DeviceMessage{type=".concat(this.type).concat(desc, "}");
    };
    DeviceMessage.TYPE_CLIPBOARD = 0;
    DeviceMessage.TYPE_PUSH_RESPONSE = 101;
    DeviceMessage.MAGIC_BYTES_MESSAGE = Util_1.default.stringToUtf8ByteArray('scrcpy_message');
    return DeviceMessage;
}());
exports["default"] = DeviceMessage;


/***/ }),

/***/ "./src/app/googDevice/DragAndDropHandler.ts":
/*!**************************************************!*\
  !*** ./src/app/googDevice/DragAndDropHandler.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DragAndDropHandler = void 0;
var DragAndDropHandler = (function () {
    function DragAndDropHandler() {
    }
    DragAndDropHandler.attachListeners = function (element) {
        element.addEventListener('drop', this.dropHandler);
        element.addEventListener('dragover', this.dragOverHandler);
        element.addEventListener('dragleave', this.dragLeaveHandler);
        element.addEventListener('dragenter', this.dragEnterHandler);
    };
    DragAndDropHandler.detachListeners = function (element) {
        element.removeEventListener('drop', this.dropHandler);
        element.removeEventListener('dragover', this.dragOverHandler);
        element.removeEventListener('dragleave', this.dragLeaveHandler);
        element.removeEventListener('dragenter', this.dragEnterHandler);
    };
    DragAndDropHandler.addEventListener = function (listener) {
        if (this.listeners.has(listener)) {
            return;
        }
        this.attachListeners(listener.getElement());
        this.listeners.add(listener);
    };
    DragAndDropHandler.removeEventListener = function (listener) {
        if (!this.listeners.has(listener)) {
            return;
        }
        this.detachListeners(listener.getElement());
        this.listeners.delete(listener);
    };
    DragAndDropHandler.listeners = new Set();
    DragAndDropHandler.dropHandler = function (ev) {
        if (!ev.dataTransfer) {
            return false;
        }
        var files = [];
        if (ev.dataTransfer.items) {
            for (var i = 0; i < ev.dataTransfer.items.length; i++) {
                if (ev.dataTransfer.items[i].kind === 'file') {
                    var file = ev.dataTransfer.items[i].getAsFile();
                    if (file) {
                        files.push(file);
                    }
                }
            }
        }
        else {
            for (var i = 0; i < ev.dataTransfer.files.length; i++) {
                files.push(ev.dataTransfer.files[i]);
            }
        }
        var handled = false;
        DragAndDropHandler.listeners.forEach(function (listener) {
            var element = listener.getElement();
            if (element === ev.currentTarget) {
                handled = handled || listener.onFilesDrop(files);
            }
        });
        if (handled) {
            ev.preventDefault();
            return true;
        }
        return false;
    };
    DragAndDropHandler.dragOverHandler = function (ev) {
        ev.preventDefault();
    };
    DragAndDropHandler.dragLeaveHandler = function (ev) {
        var handled = false;
        DragAndDropHandler.listeners.forEach(function (listener) {
            var element = listener.getElement();
            if (element === ev.currentTarget) {
                handled = handled || listener.onDragLeave();
            }
        });
        if (handled) {
            ev.preventDefault();
            return true;
        }
        return false;
    };
    DragAndDropHandler.dragEnterHandler = function (ev) {
        var handled = false;
        DragAndDropHandler.listeners.forEach(function (listener) {
            var element = listener.getElement();
            if (element === ev.currentTarget) {
                handled = handled || listener.onDragEnter();
            }
        });
        if (handled) {
            ev.preventDefault();
            return true;
        }
        return false;
    };
    return DragAndDropHandler;
}());
exports.DragAndDropHandler = DragAndDropHandler;


/***/ }),

/***/ "./src/app/googDevice/DragAndPushLogger.ts":
/*!*************************************************!*\
  !*** ./src/app/googDevice/DragAndPushLogger.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var FilePushHandler_1 = tslib_1.__importDefault(__webpack_require__(/*! ./filePush/FilePushHandler */ "./src/app/googDevice/filePush/FilePushHandler.ts"));
var TAG = '[DragAndPushLogger]';
var DragAndPushLogger = (function () {
    function DragAndPushLogger(element) {
        var _this = this;
        this.ctx = null;
        this.timeoutMap = new Map();
        this.dirtyMap = new Map();
        this.pushLineMap = new Map();
        this.linePushMap = new Map();
        this.dirtyLines = [];
        this.cleanDirtyLine = function (line) {
            if (!_this.ctx) {
                return;
            }
            var X = DragAndPushLogger.X, Y = DragAndPushLogger.Y, HEIGHT = DragAndPushLogger.HEIGHT;
            var x = X;
            var y = Y + HEIGHT * line * 2;
            var dirty = _this.dirtyMap.get(line);
            if (dirty) {
                var p = DragAndPushLogger.HEIGHT / 2;
                var d = p * 2;
                _this.ctx.clearRect(x - p, y - HEIGHT - p, dirty + d, HEIGHT + d);
            }
            _this.dirtyLines[line] = false;
        };
        if (element instanceof HTMLCanvasElement) {
            var canvas = element;
            this.ctx = canvas.getContext('2d');
        }
    }
    DragAndPushLogger.prototype.logText = function (text, line, scheduleCleanup, error) {
        var _this = this;
        if (scheduleCleanup === void 0) { scheduleCleanup = false; }
        if (error === void 0) { error = false; }
        if (!this.ctx) {
            error ? console.error(TAG, text) : console.log(TAG, text);
            return;
        }
        if (error) {
            console.error(TAG, text);
        }
        this.cleanDirtyLine(line);
        var X = DragAndPushLogger.X, Y = DragAndPushLogger.Y, HEIGHT = DragAndPushLogger.HEIGHT;
        var x = X;
        var y = Y + HEIGHT * line * 2;
        this.ctx.save();
        this.ctx.font = "".concat(HEIGHT, "px monospace");
        var textMetrics = this.ctx.measureText(text);
        var width = Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);
        this.dirtyMap.set(line, width);
        this.ctx.fillStyle = DragAndPushLogger.LOG_BACKGROUND;
        var p = DragAndPushLogger.HEIGHT / 2 - 1;
        var d = p * 2;
        this.ctx.fillRect(x - p, y - HEIGHT - p, width + d, HEIGHT + d);
        this.ctx.fillStyle = error ? DragAndPushLogger.ERROR_COLOR : DragAndPushLogger.DEBUG_COLOR;
        this.ctx.fillText(text, x, y);
        this.ctx.restore();
        if (scheduleCleanup) {
            this.dirtyLines[line] = true;
            var timeout = this.timeoutMap.get(line);
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = window.setTimeout(function () {
                _this.cleanDirtyLine(line);
                var key = _this.linePushMap.get(line);
                if (typeof key === 'string') {
                    _this.linePushMap.delete(line);
                    _this.pushLineMap.delete(key);
                }
            }, 5000);
            this.timeoutMap.set(line, timeout);
        }
    };
    DragAndPushLogger.prototype.onDragEnter = function () {
        this.logText('Drop APK files here', 1);
        return true;
    };
    DragAndPushLogger.prototype.onDragLeave = function () {
        this.cleanDirtyLine(1);
        return true;
    };
    DragAndPushLogger.prototype.onDrop = function () {
        this.cleanDirtyLine(1);
        return true;
    };
    DragAndPushLogger.prototype.onError = function (error) {
        var text = typeof error === 'string' ? error : error.message;
        this.logText(text, 1, true);
    };
    DragAndPushLogger.prototype.onFilePushUpdate = function (data) {
        var pushId = data.pushId, message = data.message, fileName = data.fileName, error = data.error;
        var key = "".concat(pushId, "/").concat(fileName);
        var firstKey = "".concat(FilePushHandler_1.default.REQUEST_NEW_PUSH_ID, "/").concat(fileName);
        var line = this.pushLineMap.get(key);
        var update = false;
        if (typeof line === 'undefined' && key !== firstKey) {
            line = this.pushLineMap.get(firstKey);
            if (typeof line !== 'undefined') {
                this.pushLineMap.delete(firstKey);
                update = true;
            }
        }
        if (typeof line === 'undefined') {
            line = 2;
            while (this.dirtyLines[line]) {
                line++;
            }
            update = true;
        }
        if (update) {
            this.pushLineMap.set(key, line);
            this.linePushMap.set(line, key);
        }
        this.logText("Upload \"".concat(fileName, "\": ").concat(message), line, true, error);
    };
    DragAndPushLogger.X = 20;
    DragAndPushLogger.Y = 40;
    DragAndPushLogger.HEIGHT = 12;
    DragAndPushLogger.LOG_BACKGROUND = 'rgba(0,0,0, 0.5)';
    DragAndPushLogger.DEBUG_COLOR = 'hsl(136, 85%,50%)';
    DragAndPushLogger.ERROR_COLOR = 'hsl(336,85%,50%)';
    return DragAndPushLogger;
}());
exports["default"] = DragAndPushLogger;


/***/ }),

/***/ "./src/app/googDevice/Entry.ts":
/*!*************************************!*\
  !*** ./src/app/googDevice/Entry.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Entry = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Stats_1 = __webpack_require__(/*! ./Stats */ "./src/app/googDevice/Stats.ts");
var Entry = (function (_super) {
    tslib_1.__extends(Entry, _super);
    function Entry(name, mode, size, mtime) {
        var _this = _super.call(this, mode, size, mtime) || this;
        _this.name = name;
        return _this;
    }
    Entry.prototype.toString = function () {
        return this.name;
    };
    return Entry;
}(Stats_1.Stats));
exports.Entry = Entry;


/***/ }),

/***/ "./src/app/googDevice/KeyInputHandler.ts":
/*!***********************************************!*\
  !*** ./src/app/googDevice/KeyInputHandler.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyInputHandler = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var KeyCodeControlMessage_1 = __webpack_require__(/*! ../controlMessage/KeyCodeControlMessage */ "./src/app/controlMessage/KeyCodeControlMessage.ts");
var KeyEvent_1 = tslib_1.__importDefault(__webpack_require__(/*! ./android/KeyEvent */ "./src/app/googDevice/android/KeyEvent.ts"));
var KeyToCodeMap_1 = __webpack_require__(/*! ./KeyToCodeMap */ "./src/app/googDevice/KeyToCodeMap.ts");
var KeyInputHandler = (function () {
    function KeyInputHandler() {
    }
    KeyInputHandler.attachListeners = function () {
        document.body.addEventListener('keydown', this.handler);
        document.body.addEventListener('keyup', this.handler);
    };
    KeyInputHandler.detachListeners = function () {
        document.body.removeEventListener('keydown', this.handler);
        document.body.removeEventListener('keyup', this.handler);
    };
    KeyInputHandler.addEventListener = function (listener) {
        if (!this.listeners.size) {
            this.attachListeners();
        }
        this.listeners.add(listener);
    };
    KeyInputHandler.removeEventListener = function (listener) {
        this.listeners.delete(listener);
        if (!this.listeners.size) {
            this.detachListeners();
        }
    };
    KeyInputHandler.repeatCounter = new Map();
    KeyInputHandler.listeners = new Set();
    KeyInputHandler.handler = function (event) {
        var keyboardEvent = event;
        var keyCode = KeyToCodeMap_1.KeyToCodeMap.get(keyboardEvent.code);
        if (!keyCode) {
            return;
        }
        var action;
        var repeatCount = 0;
        if (keyboardEvent.type === 'keydown') {
            action = KeyEvent_1.default.ACTION_DOWN;
            if (keyboardEvent.repeat) {
                var count = KeyInputHandler.repeatCounter.get(keyCode);
                if (typeof count !== 'number') {
                    count = 1;
                }
                else {
                    count++;
                }
                repeatCount = count;
                KeyInputHandler.repeatCounter.set(keyCode, count);
            }
        }
        else if (keyboardEvent.type === 'keyup') {
            action = KeyEvent_1.default.ACTION_UP;
            KeyInputHandler.repeatCounter.delete(keyCode);
        }
        else {
            return;
        }
        var metaState = (keyboardEvent.getModifierState('Alt') ? KeyEvent_1.default.META_ALT_ON : 0) |
            (keyboardEvent.getModifierState('Shift') ? KeyEvent_1.default.META_SHIFT_ON : 0) |
            (keyboardEvent.getModifierState('Control') ? KeyEvent_1.default.META_CTRL_ON : 0) |
            (keyboardEvent.getModifierState('Meta') ? KeyEvent_1.default.META_META_ON : 0) |
            (keyboardEvent.getModifierState('CapsLock') ? KeyEvent_1.default.META_CAPS_LOCK_ON : 0) |
            (keyboardEvent.getModifierState('ScrollLock') ? KeyEvent_1.default.META_SCROLL_LOCK_ON : 0) |
            (keyboardEvent.getModifierState('NumLock') ? KeyEvent_1.default.META_NUM_LOCK_ON : 0);
        var controlMessage = new KeyCodeControlMessage_1.KeyCodeControlMessage(action, keyCode, repeatCount, metaState);
        KeyInputHandler.listeners.forEach(function (listener) {
            listener.onKeyEvent(controlMessage);
        });
        event.preventDefault();
    };
    return KeyInputHandler;
}());
exports.KeyInputHandler = KeyInputHandler;


/***/ }),

/***/ "./src/app/googDevice/KeyToCodeMap.ts":
/*!********************************************!*\
  !*** ./src/app/googDevice/KeyToCodeMap.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyToCodeMap = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var KeyEvent_1 = tslib_1.__importDefault(__webpack_require__(/*! ./android/KeyEvent */ "./src/app/googDevice/android/KeyEvent.ts"));
var UIEventsCode_1 = tslib_1.__importDefault(__webpack_require__(/*! ../UIEventsCode */ "./src/app/UIEventsCode.ts"));
exports.KeyToCodeMap = new Map([
    [UIEventsCode_1.default.Backquote, KeyEvent_1.default.KEYCODE_GRAVE],
    [UIEventsCode_1.default.Backslash, KeyEvent_1.default.KEYCODE_BACKSLASH],
    [UIEventsCode_1.default.BracketLeft, KeyEvent_1.default.KEYCODE_LEFT_BRACKET],
    [UIEventsCode_1.default.BracketRight, KeyEvent_1.default.KEYCODE_RIGHT_BRACKET],
    [UIEventsCode_1.default.Comma, KeyEvent_1.default.KEYCODE_COMMA],
    [UIEventsCode_1.default.Digit0, KeyEvent_1.default.KEYCODE_0],
    [UIEventsCode_1.default.Digit1, KeyEvent_1.default.KEYCODE_1],
    [UIEventsCode_1.default.Digit2, KeyEvent_1.default.KEYCODE_2],
    [UIEventsCode_1.default.Digit3, KeyEvent_1.default.KEYCODE_3],
    [UIEventsCode_1.default.Digit4, KeyEvent_1.default.KEYCODE_4],
    [UIEventsCode_1.default.Digit5, KeyEvent_1.default.KEYCODE_5],
    [UIEventsCode_1.default.Digit6, KeyEvent_1.default.KEYCODE_6],
    [UIEventsCode_1.default.Digit7, KeyEvent_1.default.KEYCODE_7],
    [UIEventsCode_1.default.Digit8, KeyEvent_1.default.KEYCODE_8],
    [UIEventsCode_1.default.Digit9, KeyEvent_1.default.KEYCODE_9],
    [UIEventsCode_1.default.Equal, KeyEvent_1.default.KEYCODE_EQUALS],
    [UIEventsCode_1.default.IntlRo, KeyEvent_1.default.KEYCODE_RO],
    [UIEventsCode_1.default.IntlYen, KeyEvent_1.default.KEYCODE_YEN],
    [UIEventsCode_1.default.KeyA, KeyEvent_1.default.KEYCODE_A],
    [UIEventsCode_1.default.KeyB, KeyEvent_1.default.KEYCODE_B],
    [UIEventsCode_1.default.KeyC, KeyEvent_1.default.KEYCODE_C],
    [UIEventsCode_1.default.KeyD, KeyEvent_1.default.KEYCODE_D],
    [UIEventsCode_1.default.KeyE, KeyEvent_1.default.KEYCODE_E],
    [UIEventsCode_1.default.KeyF, KeyEvent_1.default.KEYCODE_F],
    [UIEventsCode_1.default.KeyG, KeyEvent_1.default.KEYCODE_G],
    [UIEventsCode_1.default.KeyH, KeyEvent_1.default.KEYCODE_H],
    [UIEventsCode_1.default.KeyI, KeyEvent_1.default.KEYCODE_I],
    [UIEventsCode_1.default.KeyJ, KeyEvent_1.default.KEYCODE_J],
    [UIEventsCode_1.default.KeyK, KeyEvent_1.default.KEYCODE_K],
    [UIEventsCode_1.default.KeyL, KeyEvent_1.default.KEYCODE_L],
    [UIEventsCode_1.default.KeyM, KeyEvent_1.default.KEYCODE_M],
    [UIEventsCode_1.default.KeyN, KeyEvent_1.default.KEYCODE_N],
    [UIEventsCode_1.default.KeyO, KeyEvent_1.default.KEYCODE_O],
    [UIEventsCode_1.default.KeyP, KeyEvent_1.default.KEYCODE_P],
    [UIEventsCode_1.default.KeyQ, KeyEvent_1.default.KEYCODE_Q],
    [UIEventsCode_1.default.KeyR, KeyEvent_1.default.KEYCODE_R],
    [UIEventsCode_1.default.KeyS, KeyEvent_1.default.KEYCODE_S],
    [UIEventsCode_1.default.KeyT, KeyEvent_1.default.KEYCODE_T],
    [UIEventsCode_1.default.KeyU, KeyEvent_1.default.KEYCODE_U],
    [UIEventsCode_1.default.KeyV, KeyEvent_1.default.KEYCODE_V],
    [UIEventsCode_1.default.KeyW, KeyEvent_1.default.KEYCODE_W],
    [UIEventsCode_1.default.KeyX, KeyEvent_1.default.KEYCODE_X],
    [UIEventsCode_1.default.KeyY, KeyEvent_1.default.KEYCODE_Y],
    [UIEventsCode_1.default.KeyZ, KeyEvent_1.default.KEYCODE_Z],
    [UIEventsCode_1.default.Minus, KeyEvent_1.default.KEYCODE_MINUS],
    [UIEventsCode_1.default.Period, KeyEvent_1.default.KEYCODE_PERIOD],
    [UIEventsCode_1.default.Quote, KeyEvent_1.default.KEYCODE_APOSTROPHE],
    [UIEventsCode_1.default.Semicolon, KeyEvent_1.default.KEYCODE_SEMICOLON],
    [UIEventsCode_1.default.Slash, KeyEvent_1.default.KEYCODE_SLASH],
    [UIEventsCode_1.default.KanaMode, KeyEvent_1.default.KEYCODE_KANA],
    [UIEventsCode_1.default.Delete, KeyEvent_1.default.KEYCODE_FORWARD_DEL],
    [UIEventsCode_1.default.End, KeyEvent_1.default.KEYCODE_MOVE_END],
    [UIEventsCode_1.default.Help, KeyEvent_1.default.KEYCODE_HELP],
    [UIEventsCode_1.default.Home, KeyEvent_1.default.KEYCODE_MOVE_HOME],
    [UIEventsCode_1.default.Insert, KeyEvent_1.default.KEYCODE_INSERT],
    [UIEventsCode_1.default.PageDown, KeyEvent_1.default.KEYCODE_PAGE_DOWN],
    [UIEventsCode_1.default.PageUp, KeyEvent_1.default.KEYCODE_PAGE_UP],
    [UIEventsCode_1.default.AltLeft, KeyEvent_1.default.KEYCODE_ALT_LEFT],
    [UIEventsCode_1.default.AltRight, KeyEvent_1.default.KEYCODE_ALT_RIGHT],
    [UIEventsCode_1.default.Backspace, KeyEvent_1.default.KEYCODE_DEL],
    [UIEventsCode_1.default.CapsLock, KeyEvent_1.default.KEYCODE_CAPS_LOCK],
    [UIEventsCode_1.default.ControlLeft, KeyEvent_1.default.KEYCODE_CTRL_LEFT],
    [UIEventsCode_1.default.ControlRight, KeyEvent_1.default.KEYCODE_CTRL_RIGHT],
    [UIEventsCode_1.default.Enter, KeyEvent_1.default.KEYCODE_ENTER],
    [UIEventsCode_1.default.MetaLeft, KeyEvent_1.default.KEYCODE_META_LEFT],
    [UIEventsCode_1.default.MetaRight, KeyEvent_1.default.KEYCODE_META_RIGHT],
    [UIEventsCode_1.default.ShiftLeft, KeyEvent_1.default.KEYCODE_SHIFT_LEFT],
    [UIEventsCode_1.default.ShiftRight, KeyEvent_1.default.KEYCODE_SHIFT_RIGHT],
    [UIEventsCode_1.default.Space, KeyEvent_1.default.KEYCODE_SPACE],
    [UIEventsCode_1.default.Tab, KeyEvent_1.default.KEYCODE_TAB],
    [UIEventsCode_1.default.ArrowLeft, KeyEvent_1.default.KEYCODE_DPAD_LEFT],
    [UIEventsCode_1.default.ArrowUp, KeyEvent_1.default.KEYCODE_DPAD_UP],
    [UIEventsCode_1.default.ArrowRight, KeyEvent_1.default.KEYCODE_DPAD_RIGHT],
    [UIEventsCode_1.default.ArrowDown, KeyEvent_1.default.KEYCODE_DPAD_DOWN],
    [UIEventsCode_1.default.NumLock, KeyEvent_1.default.KEYCODE_NUM_LOCK],
    [UIEventsCode_1.default.Numpad0, KeyEvent_1.default.KEYCODE_NUMPAD_0],
    [UIEventsCode_1.default.Numpad1, KeyEvent_1.default.KEYCODE_NUMPAD_1],
    [UIEventsCode_1.default.Numpad2, KeyEvent_1.default.KEYCODE_NUMPAD_2],
    [UIEventsCode_1.default.Numpad3, KeyEvent_1.default.KEYCODE_NUMPAD_3],
    [UIEventsCode_1.default.Numpad4, KeyEvent_1.default.KEYCODE_NUMPAD_4],
    [UIEventsCode_1.default.Numpad5, KeyEvent_1.default.KEYCODE_NUMPAD_5],
    [UIEventsCode_1.default.Numpad6, KeyEvent_1.default.KEYCODE_NUMPAD_6],
    [UIEventsCode_1.default.Numpad7, KeyEvent_1.default.KEYCODE_NUMPAD_7],
    [UIEventsCode_1.default.Numpad8, KeyEvent_1.default.KEYCODE_NUMPAD_8],
    [UIEventsCode_1.default.Numpad9, KeyEvent_1.default.KEYCODE_NUMPAD_9],
    [UIEventsCode_1.default.NumpadAdd, KeyEvent_1.default.KEYCODE_NUMPAD_ADD],
    [UIEventsCode_1.default.NumpadComma, KeyEvent_1.default.KEYCODE_NUMPAD_COMMA],
    [UIEventsCode_1.default.NumpadDecimal, KeyEvent_1.default.KEYCODE_NUMPAD_DOT],
    [UIEventsCode_1.default.NumpadDivide, KeyEvent_1.default.KEYCODE_NUMPAD_DIVIDE],
    [UIEventsCode_1.default.NumpadEnter, KeyEvent_1.default.KEYCODE_NUMPAD_ENTER],
    [UIEventsCode_1.default.NumpadEqual, KeyEvent_1.default.KEYCODE_NUMPAD_EQUALS],
    [UIEventsCode_1.default.NumpadMultiply, KeyEvent_1.default.KEYCODE_NUMPAD_MULTIPLY],
    [UIEventsCode_1.default.NumpadParenLeft, KeyEvent_1.default.KEYCODE_NUMPAD_LEFT_PAREN],
    [UIEventsCode_1.default.NumpadParenRight, KeyEvent_1.default.KEYCODE_NUMPAD_RIGHT_PAREN],
    [UIEventsCode_1.default.NumpadSubtract, KeyEvent_1.default.KEYCODE_NUMPAD_SUBTRACT],
    [UIEventsCode_1.default.Escape, KeyEvent_1.default.KEYCODE_ESCAPE],
    [UIEventsCode_1.default.F1, KeyEvent_1.default.KEYCODE_F1],
    [UIEventsCode_1.default.F2, KeyEvent_1.default.KEYCODE_F2],
    [UIEventsCode_1.default.F3, KeyEvent_1.default.KEYCODE_F3],
    [UIEventsCode_1.default.F4, KeyEvent_1.default.KEYCODE_F4],
    [UIEventsCode_1.default.F5, KeyEvent_1.default.KEYCODE_F5],
    [UIEventsCode_1.default.F6, KeyEvent_1.default.KEYCODE_F6],
    [UIEventsCode_1.default.F7, KeyEvent_1.default.KEYCODE_F7],
    [UIEventsCode_1.default.F8, KeyEvent_1.default.KEYCODE_F8],
    [UIEventsCode_1.default.F9, KeyEvent_1.default.KEYCODE_F9],
    [UIEventsCode_1.default.F10, KeyEvent_1.default.KEYCODE_F10],
    [UIEventsCode_1.default.F11, KeyEvent_1.default.KEYCODE_F11],
    [UIEventsCode_1.default.F12, KeyEvent_1.default.KEYCODE_F12],
    [UIEventsCode_1.default.Fn, KeyEvent_1.default.KEYCODE_FUNCTION],
    [UIEventsCode_1.default.PrintScreen, KeyEvent_1.default.KEYCODE_SYSRQ],
    [UIEventsCode_1.default.Pause, KeyEvent_1.default.KEYCODE_BREAK],
]);


/***/ }),

/***/ "./src/app/googDevice/Stats.ts":
/*!*************************************!*\
  !*** ./src/app/googDevice/Stats.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Stats = void 0;
var Stats = (function () {
    function Stats(mode, size, mtime) {
        this.mode = mode;
        this.size = size;
        this.mtime = new Date(mtime * 1000);
    }
    Stats.prototype.checkModeProperty = function (property) {
        return (this.mode & Stats.S_IFMT) === property;
    };
    Stats.prototype.isBlockDevice = function () {
        return this.checkModeProperty(Stats.S_IFBLK);
    };
    Stats.prototype.isCharacterDevice = function () {
        return this.checkModeProperty(Stats.S_IFCHR);
    };
    Stats.prototype.isDirectory = function () {
        return this.checkModeProperty(Stats.S_IFDIR);
    };
    Stats.prototype.isFIFO = function () {
        return this.checkModeProperty(Stats.S_IFIFO);
    };
    Stats.prototype.isisSocket = function () {
        return this.checkModeProperty(Stats.S_IFSOCK);
    };
    Stats.prototype.isSymbolicLink = function () {
        return this.checkModeProperty(Stats.S_IFLNK);
    };
    Stats.prototype.isFile = function () {
        return this.checkModeProperty(Stats.S_IFREG);
    };
    Stats.S_IFMT = 61440;
    Stats.S_IFSOCK = 49152;
    Stats.S_IFLNK = 40960;
    Stats.S_IFREG = 32768;
    Stats.S_IFBLK = 24576;
    Stats.S_IFDIR = 16384;
    Stats.S_IFCHR = 8192;
    Stats.S_IFIFO = 4096;
    Stats.S_ISUID = 2048;
    Stats.S_ISGID = 1024;
    Stats.S_ISVTX = 512;
    Stats.S_IRWXU = 448;
    Stats.S_IRUSR = 256;
    Stats.S_IWUSR = 128;
    Stats.S_IXUSR = 64;
    Stats.S_IRWXG = 56;
    Stats.S_IRGRP = 32;
    return Stats;
}());
exports.Stats = Stats;


/***/ }),

/***/ "./src/app/googDevice/android/KeyEvent.ts":
/*!************************************************!*\
  !*** ./src/app/googDevice/android/KeyEvent.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var KeyEvent = (function () {
    function KeyEvent() {
    }
    KeyEvent.ACTION_DOWN = 0;
    KeyEvent.ACTION_UP = 1;
    KeyEvent.KEYCODE_0 = 7;
    KeyEvent.KEYCODE_1 = 8;
    KeyEvent.KEYCODE_11 = 227;
    KeyEvent.KEYCODE_12 = 228;
    KeyEvent.KEYCODE_2 = 9;
    KeyEvent.KEYCODE_3 = 10;
    KeyEvent.KEYCODE_3D_MODE = 206;
    KeyEvent.KEYCODE_4 = 11;
    KeyEvent.KEYCODE_5 = 12;
    KeyEvent.KEYCODE_6 = 13;
    KeyEvent.KEYCODE_7 = 14;
    KeyEvent.KEYCODE_8 = 15;
    KeyEvent.KEYCODE_9 = 16;
    KeyEvent.KEYCODE_A = 29;
    KeyEvent.KEYCODE_ALL_APPS = 284;
    KeyEvent.KEYCODE_ALT_LEFT = 57;
    KeyEvent.KEYCODE_ALT_RIGHT = 58;
    KeyEvent.KEYCODE_APOSTROPHE = 75;
    KeyEvent.KEYCODE_APP_SWITCH = 187;
    KeyEvent.KEYCODE_ASSIST = 219;
    KeyEvent.KEYCODE_AT = 77;
    KeyEvent.KEYCODE_AVR_INPUT = 182;
    KeyEvent.KEYCODE_AVR_POWER = 181;
    KeyEvent.KEYCODE_B = 30;
    KeyEvent.KEYCODE_BACK = 4;
    KeyEvent.KEYCODE_BACKSLASH = 73;
    KeyEvent.KEYCODE_BOOKMARK = 174;
    KeyEvent.KEYCODE_BREAK = 121;
    KeyEvent.KEYCODE_BRIGHTNESS_DOWN = 220;
    KeyEvent.KEYCODE_BRIGHTNESS_UP = 221;
    KeyEvent.KEYCODE_BUTTON_1 = 188;
    KeyEvent.KEYCODE_BUTTON_10 = 197;
    KeyEvent.KEYCODE_BUTTON_11 = 198;
    KeyEvent.KEYCODE_BUTTON_12 = 199;
    KeyEvent.KEYCODE_BUTTON_13 = 200;
    KeyEvent.KEYCODE_BUTTON_14 = 201;
    KeyEvent.KEYCODE_BUTTON_15 = 202;
    KeyEvent.KEYCODE_BUTTON_16 = 203;
    KeyEvent.KEYCODE_BUTTON_2 = 189;
    KeyEvent.KEYCODE_BUTTON_3 = 190;
    KeyEvent.KEYCODE_BUTTON_4 = 191;
    KeyEvent.KEYCODE_BUTTON_5 = 192;
    KeyEvent.KEYCODE_BUTTON_6 = 193;
    KeyEvent.KEYCODE_BUTTON_7 = 194;
    KeyEvent.KEYCODE_BUTTON_8 = 195;
    KeyEvent.KEYCODE_BUTTON_9 = 196;
    KeyEvent.KEYCODE_BUTTON_A = 96;
    KeyEvent.KEYCODE_BUTTON_B = 97;
    KeyEvent.KEYCODE_BUTTON_C = 98;
    KeyEvent.KEYCODE_BUTTON_L1 = 102;
    KeyEvent.KEYCODE_BUTTON_L2 = 104;
    KeyEvent.KEYCODE_BUTTON_MODE = 110;
    KeyEvent.KEYCODE_BUTTON_R1 = 103;
    KeyEvent.KEYCODE_BUTTON_R2 = 105;
    KeyEvent.KEYCODE_BUTTON_SELECT = 109;
    KeyEvent.KEYCODE_BUTTON_START = 108;
    KeyEvent.KEYCODE_BUTTON_THUMBL = 106;
    KeyEvent.KEYCODE_BUTTON_THUMBR = 107;
    KeyEvent.KEYCODE_BUTTON_X = 99;
    KeyEvent.KEYCODE_BUTTON_Y = 100;
    KeyEvent.KEYCODE_BUTTON_Z = 101;
    KeyEvent.KEYCODE_C = 31;
    KeyEvent.KEYCODE_CALCULATOR = 210;
    KeyEvent.KEYCODE_CALENDAR = 208;
    KeyEvent.KEYCODE_CALL = 5;
    KeyEvent.KEYCODE_CAMERA = 27;
    KeyEvent.KEYCODE_CAPS_LOCK = 115;
    KeyEvent.KEYCODE_CAPTIONS = 175;
    KeyEvent.KEYCODE_CHANNEL_DOWN = 167;
    KeyEvent.KEYCODE_CHANNEL_UP = 166;
    KeyEvent.KEYCODE_CLEAR = 28;
    KeyEvent.KEYCODE_COMMA = 55;
    KeyEvent.KEYCODE_CONTACTS = 207;
    KeyEvent.KEYCODE_COPY = 278;
    KeyEvent.KEYCODE_CTRL_LEFT = 113;
    KeyEvent.KEYCODE_CTRL_RIGHT = 114;
    KeyEvent.KEYCODE_CUT = 277;
    KeyEvent.KEYCODE_D = 32;
    KeyEvent.KEYCODE_DEL = 67;
    KeyEvent.KEYCODE_DPAD_CENTER = 23;
    KeyEvent.KEYCODE_DPAD_DOWN = 20;
    KeyEvent.KEYCODE_DPAD_DOWN_LEFT = 269;
    KeyEvent.KEYCODE_DPAD_DOWN_RIGHT = 271;
    KeyEvent.KEYCODE_DPAD_LEFT = 21;
    KeyEvent.KEYCODE_DPAD_RIGHT = 22;
    KeyEvent.KEYCODE_DPAD_UP = 19;
    KeyEvent.KEYCODE_DPAD_UP_LEFT = 268;
    KeyEvent.KEYCODE_DPAD_UP_RIGHT = 270;
    KeyEvent.KEYCODE_DVR = 173;
    KeyEvent.KEYCODE_E = 33;
    KeyEvent.KEYCODE_EISU = 212;
    KeyEvent.KEYCODE_ENDCALL = 6;
    KeyEvent.KEYCODE_ENTER = 66;
    KeyEvent.KEYCODE_ENVELOPE = 65;
    KeyEvent.KEYCODE_EQUALS = 70;
    KeyEvent.KEYCODE_ESCAPE = 111;
    KeyEvent.KEYCODE_EXPLORER = 64;
    KeyEvent.KEYCODE_F = 34;
    KeyEvent.KEYCODE_F1 = 131;
    KeyEvent.KEYCODE_F10 = 140;
    KeyEvent.KEYCODE_F11 = 141;
    KeyEvent.KEYCODE_F12 = 142;
    KeyEvent.KEYCODE_F2 = 132;
    KeyEvent.KEYCODE_F3 = 133;
    KeyEvent.KEYCODE_F4 = 134;
    KeyEvent.KEYCODE_F5 = 135;
    KeyEvent.KEYCODE_F6 = 136;
    KeyEvent.KEYCODE_F7 = 137;
    KeyEvent.KEYCODE_F8 = 138;
    KeyEvent.KEYCODE_F9 = 139;
    KeyEvent.KEYCODE_FOCUS = 80;
    KeyEvent.KEYCODE_FORWARD = 125;
    KeyEvent.KEYCODE_FORWARD_DEL = 112;
    KeyEvent.KEYCODE_FUNCTION = 119;
    KeyEvent.KEYCODE_G = 35;
    KeyEvent.KEYCODE_GRAVE = 68;
    KeyEvent.KEYCODE_GUIDE = 172;
    KeyEvent.KEYCODE_H = 36;
    KeyEvent.KEYCODE_HEADSETHOOK = 79;
    KeyEvent.KEYCODE_HELP = 259;
    KeyEvent.KEYCODE_HENKAN = 214;
    KeyEvent.KEYCODE_HOME = 3;
    KeyEvent.KEYCODE_I = 37;
    KeyEvent.KEYCODE_INFO = 165;
    KeyEvent.KEYCODE_INSERT = 124;
    KeyEvent.KEYCODE_J = 38;
    KeyEvent.KEYCODE_K = 39;
    KeyEvent.KEYCODE_KANA = 218;
    KeyEvent.KEYCODE_KATAKANA_HIRAGANA = 215;
    KeyEvent.KEYCODE_L = 40;
    KeyEvent.KEYCODE_LANGUAGE_SWITCH = 204;
    KeyEvent.KEYCODE_LAST_CHANNEL = 229;
    KeyEvent.KEYCODE_LEFT_BRACKET = 71;
    KeyEvent.KEYCODE_M = 41;
    KeyEvent.KEYCODE_MANNER_MODE = 205;
    KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK = 222;
    KeyEvent.KEYCODE_MEDIA_CLOSE = 128;
    KeyEvent.KEYCODE_MEDIA_EJECT = 129;
    KeyEvent.KEYCODE_MEDIA_FAST_FORWARD = 90;
    KeyEvent.KEYCODE_MEDIA_NEXT = 87;
    KeyEvent.KEYCODE_MEDIA_PAUSE = 127;
    KeyEvent.KEYCODE_MEDIA_PLAY = 126;
    KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE = 85;
    KeyEvent.KEYCODE_MEDIA_PREVIOUS = 88;
    KeyEvent.KEYCODE_MEDIA_RECORD = 130;
    KeyEvent.KEYCODE_MEDIA_REWIND = 89;
    KeyEvent.KEYCODE_MEDIA_SKIP_BACKWARD = 273;
    KeyEvent.KEYCODE_MEDIA_SKIP_FORWARD = 272;
    KeyEvent.KEYCODE_MEDIA_STEP_BACKWARD = 275;
    KeyEvent.KEYCODE_MEDIA_STEP_FORWARD = 274;
    KeyEvent.KEYCODE_MEDIA_STOP = 86;
    KeyEvent.KEYCODE_MEDIA_TOP_MENU = 226;
    KeyEvent.KEYCODE_MENU = 82;
    KeyEvent.KEYCODE_META_LEFT = 117;
    KeyEvent.KEYCODE_META_RIGHT = 118;
    KeyEvent.KEYCODE_MINUS = 69;
    KeyEvent.KEYCODE_MOVE_END = 123;
    KeyEvent.KEYCODE_MOVE_HOME = 122;
    KeyEvent.KEYCODE_MUHENKAN = 213;
    KeyEvent.KEYCODE_MUSIC = 209;
    KeyEvent.KEYCODE_MUTE = 91;
    KeyEvent.KEYCODE_N = 42;
    KeyEvent.KEYCODE_NAVIGATE_IN = 262;
    KeyEvent.KEYCODE_NAVIGATE_NEXT = 261;
    KeyEvent.KEYCODE_NAVIGATE_OUT = 263;
    KeyEvent.KEYCODE_NAVIGATE_PREVIOUS = 260;
    KeyEvent.KEYCODE_NOTIFICATION = 83;
    KeyEvent.KEYCODE_NUM = 78;
    KeyEvent.KEYCODE_NUMPAD_0 = 144;
    KeyEvent.KEYCODE_NUMPAD_1 = 145;
    KeyEvent.KEYCODE_NUMPAD_2 = 146;
    KeyEvent.KEYCODE_NUMPAD_3 = 147;
    KeyEvent.KEYCODE_NUMPAD_4 = 148;
    KeyEvent.KEYCODE_NUMPAD_5 = 149;
    KeyEvent.KEYCODE_NUMPAD_6 = 150;
    KeyEvent.KEYCODE_NUMPAD_7 = 151;
    KeyEvent.KEYCODE_NUMPAD_8 = 152;
    KeyEvent.KEYCODE_NUMPAD_9 = 153;
    KeyEvent.KEYCODE_NUMPAD_ADD = 157;
    KeyEvent.KEYCODE_NUMPAD_COMMA = 159;
    KeyEvent.KEYCODE_NUMPAD_DIVIDE = 154;
    KeyEvent.KEYCODE_NUMPAD_DOT = 158;
    KeyEvent.KEYCODE_NUMPAD_ENTER = 160;
    KeyEvent.KEYCODE_NUMPAD_EQUALS = 161;
    KeyEvent.KEYCODE_NUMPAD_LEFT_PAREN = 162;
    KeyEvent.KEYCODE_NUMPAD_MULTIPLY = 155;
    KeyEvent.KEYCODE_NUMPAD_RIGHT_PAREN = 163;
    KeyEvent.KEYCODE_NUMPAD_SUBTRACT = 156;
    KeyEvent.KEYCODE_NUM_LOCK = 143;
    KeyEvent.KEYCODE_O = 43;
    KeyEvent.KEYCODE_P = 44;
    KeyEvent.KEYCODE_PAGE_DOWN = 93;
    KeyEvent.KEYCODE_PAGE_UP = 92;
    KeyEvent.KEYCODE_PAIRING = 225;
    KeyEvent.KEYCODE_PASTE = 279;
    KeyEvent.KEYCODE_PERIOD = 56;
    KeyEvent.KEYCODE_PICTSYMBOLS = 94;
    KeyEvent.KEYCODE_PLUS = 81;
    KeyEvent.KEYCODE_POUND = 18;
    KeyEvent.KEYCODE_POWER = 26;
    KeyEvent.KEYCODE_PROFILE_SWITCH = 288;
    KeyEvent.KEYCODE_PROG_BLUE = 186;
    KeyEvent.KEYCODE_PROG_GREEN = 184;
    KeyEvent.KEYCODE_PROG_RED = 183;
    KeyEvent.KEYCODE_PROG_YELLOW = 185;
    KeyEvent.KEYCODE_Q = 45;
    KeyEvent.KEYCODE_R = 46;
    KeyEvent.KEYCODE_REFRESH = 285;
    KeyEvent.KEYCODE_RIGHT_BRACKET = 72;
    KeyEvent.KEYCODE_RO = 217;
    KeyEvent.KEYCODE_S = 47;
    KeyEvent.KEYCODE_SCROLL_LOCK = 116;
    KeyEvent.KEYCODE_SEARCH = 84;
    KeyEvent.KEYCODE_SEMICOLON = 74;
    KeyEvent.KEYCODE_SETTINGS = 176;
    KeyEvent.KEYCODE_SHIFT_LEFT = 59;
    KeyEvent.KEYCODE_SHIFT_RIGHT = 60;
    KeyEvent.KEYCODE_SLASH = 76;
    KeyEvent.KEYCODE_SLEEP = 223;
    KeyEvent.KEYCODE_SOFT_LEFT = 1;
    KeyEvent.KEYCODE_SOFT_RIGHT = 2;
    KeyEvent.KEYCODE_SOFT_SLEEP = 276;
    KeyEvent.KEYCODE_SPACE = 62;
    KeyEvent.KEYCODE_STAR = 17;
    KeyEvent.KEYCODE_STB_INPUT = 180;
    KeyEvent.KEYCODE_STB_POWER = 179;
    KeyEvent.KEYCODE_STEM_1 = 265;
    KeyEvent.KEYCODE_STEM_2 = 266;
    KeyEvent.KEYCODE_STEM_3 = 267;
    KeyEvent.KEYCODE_STEM_PRIMARY = 264;
    KeyEvent.KEYCODE_SWITCH_CHARSET = 95;
    KeyEvent.KEYCODE_SYM = 63;
    KeyEvent.KEYCODE_SYSRQ = 120;
    KeyEvent.KEYCODE_SYSTEM_NAVIGATION_DOWN = 281;
    KeyEvent.KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;
    KeyEvent.KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283;
    KeyEvent.KEYCODE_SYSTEM_NAVIGATION_UP = 280;
    KeyEvent.KEYCODE_T = 48;
    KeyEvent.KEYCODE_TAB = 61;
    KeyEvent.KEYCODE_THUMBS_DOWN = 287;
    KeyEvent.KEYCODE_THUMBS_UP = 286;
    KeyEvent.KEYCODE_TV = 170;
    KeyEvent.KEYCODE_TV_ANTENNA_CABLE = 242;
    KeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION = 252;
    KeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;
    KeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;
    KeyEvent.KEYCODE_TV_CONTENTS_MENU = 256;
    KeyEvent.KEYCODE_TV_DATA_SERVICE = 230;
    KeyEvent.KEYCODE_TV_INPUT = 178;
    KeyEvent.KEYCODE_TV_INPUT_COMPONENT_1 = 249;
    KeyEvent.KEYCODE_TV_INPUT_COMPONENT_2 = 250;
    KeyEvent.KEYCODE_TV_INPUT_COMPOSITE_1 = 247;
    KeyEvent.KEYCODE_TV_INPUT_COMPOSITE_2 = 248;
    KeyEvent.KEYCODE_TV_INPUT_HDMI_1 = 243;
    KeyEvent.KEYCODE_TV_INPUT_HDMI_2 = 244;
    KeyEvent.KEYCODE_TV_INPUT_HDMI_3 = 245;
    KeyEvent.KEYCODE_TV_INPUT_HDMI_4 = 246;
    KeyEvent.KEYCODE_TV_INPUT_VGA_1 = 251;
    KeyEvent.KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;
    KeyEvent.KEYCODE_TV_NETWORK = 241;
    KeyEvent.KEYCODE_TV_NUMBER_ENTRY = 234;
    KeyEvent.KEYCODE_TV_POWER = 177;
    KeyEvent.KEYCODE_TV_RADIO_SERVICE = 232;
    KeyEvent.KEYCODE_TV_SATELLITE = 237;
    KeyEvent.KEYCODE_TV_SATELLITE_BS = 238;
    KeyEvent.KEYCODE_TV_SATELLITE_CS = 239;
    KeyEvent.KEYCODE_TV_SATELLITE_SERVICE = 240;
    KeyEvent.KEYCODE_TV_TELETEXT = 233;
    KeyEvent.KEYCODE_TV_TERRESTRIAL_ANALOG = 235;
    KeyEvent.KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;
    KeyEvent.KEYCODE_TV_TIMER_PROGRAMMING = 258;
    KeyEvent.KEYCODE_TV_ZOOM_MODE = 255;
    KeyEvent.KEYCODE_U = 49;
    KeyEvent.KEYCODE_UNKNOWN = 0;
    KeyEvent.KEYCODE_V = 50;
    KeyEvent.KEYCODE_VOICE_ASSIST = 231;
    KeyEvent.KEYCODE_VOLUME_DOWN = 25;
    KeyEvent.KEYCODE_VOLUME_MUTE = 164;
    KeyEvent.KEYCODE_VOLUME_UP = 24;
    KeyEvent.KEYCODE_W = 51;
    KeyEvent.KEYCODE_WAKEUP = 224;
    KeyEvent.KEYCODE_WINDOW = 171;
    KeyEvent.KEYCODE_X = 52;
    KeyEvent.KEYCODE_Y = 53;
    KeyEvent.KEYCODE_YEN = 216;
    KeyEvent.KEYCODE_Z = 54;
    KeyEvent.KEYCODE_ZENKAKU_HANKAKU = 211;
    KeyEvent.KEYCODE_ZOOM_IN = 168;
    KeyEvent.KEYCODE_ZOOM_OUT = 169;
    KeyEvent.META_ALT_LEFT_ON = 16;
    KeyEvent.META_ALT_MASK = 50;
    KeyEvent.META_ALT_ON = 2;
    KeyEvent.META_ALT_RIGHT_ON = 32;
    KeyEvent.META_CAPS_LOCK_ON = 1048576;
    KeyEvent.META_CTRL_LEFT_ON = 8192;
    KeyEvent.META_CTRL_MASK = 28672;
    KeyEvent.META_CTRL_ON = 4096;
    KeyEvent.META_CTRL_RIGHT_ON = 16384;
    KeyEvent.META_FUNCTION_ON = 8;
    KeyEvent.META_META_LEFT_ON = 131072;
    KeyEvent.META_META_MASK = 458752;
    KeyEvent.META_META_ON = 65536;
    KeyEvent.META_META_RIGHT_ON = 262144;
    KeyEvent.META_NUM_LOCK_ON = 2097152;
    KeyEvent.META_SCROLL_LOCK_ON = 4194304;
    KeyEvent.META_SHIFT_LEFT_ON = 64;
    KeyEvent.META_SHIFT_MASK = 193;
    KeyEvent.META_SHIFT_ON = 1;
    KeyEvent.META_SHIFT_RIGHT_ON = 128;
    KeyEvent.META_SYM_ON = 4;
    return KeyEvent;
}());
exports["default"] = KeyEvent;


/***/ }),

/***/ "./src/app/googDevice/client/ConfigureScrcpy.ts":
/*!******************************************************!*\
  !*** ./src/app/googDevice/client/ConfigureScrcpy.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigureScrcpy = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../style/dialog.css */ "./src/style/dialog.css");
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../VideoSettings */ "./src/app/VideoSettings.ts"));
var StreamClientScrcpy_1 = __webpack_require__(/*! ./StreamClientScrcpy */ "./src/app/googDevice/client/StreamClientScrcpy.ts");
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Size */ "./src/app/Size.ts"));
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var DisplayInfo_1 = __webpack_require__(/*! ../../DisplayInfo */ "./src/app/DisplayInfo.ts");
var ToolBoxButton_1 = __webpack_require__(/*! ../../toolbox/ToolBoxButton */ "./src/app/toolbox/ToolBoxButton.ts");
var SvgImage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../ui/SvgImage */ "./src/app/ui/SvgImage.ts"));
var ToolBoxCheckbox_1 = __webpack_require__(/*! ../../toolbox/ToolBoxCheckbox */ "./src/app/toolbox/ToolBoxCheckbox.ts");
var Attribute_1 = __webpack_require__(/*! ../../Attribute */ "./src/app/Attribute.ts");
var StreamReceiverScrcpy_1 = __webpack_require__(/*! ./StreamReceiverScrcpy */ "./src/app/googDevice/client/StreamReceiverScrcpy.ts");
var BaseClient_1 = __webpack_require__(/*! ../../client/BaseClient */ "./src/app/client/BaseClient.ts");
var ConfigureScrcpy = (function (_super) {
    tslib_1.__extends(ConfigureScrcpy, _super);
    function ConfigureScrcpy(tracker, descriptor, params) {
        var _this = _super.call(this, params) || this;
        _this.tracker = tracker;
        _this.statusText = '';
        _this.connectionCount = 0;
        _this.onEncoders = function (encoders) {
            var select = _this.encoderSelectElement || document.createElement('select');
            var child;
            while ((child = select.firstChild)) {
                select.removeChild(child);
            }
            encoders.unshift('');
            encoders.forEach(function (value) {
                var optionElement = document.createElement('option');
                optionElement.setAttribute('value', value);
                optionElement.innerText = value;
                select.appendChild(optionElement);
            });
            _this.encoderSelectElement = select;
        };
        _this.onDisplayInfo = function (infoArray) {
            var _a;
            _this.statusText = 'Ready';
            _this.updateStatus();
            (_a = _this.dialogContainer) === null || _a === void 0 ? void 0 : _a.classList.add('ready');
            var select = _this.displayIdSelectElement || document.createElement('select');
            var child;
            while ((child = select.firstChild)) {
                select.removeChild(child);
            }
            var selectedOptionIdx = -1;
            infoArray.forEach(function (value, idx) {
                var displayInfo = value.displayInfo;
                var displayId = displayInfo.displayId, size = displayInfo.size;
                var optionElement = document.createElement('option');
                optionElement.setAttribute('value', displayId.toString());
                optionElement.innerText = "ID: ".concat(displayId, "; ").concat(size.width, "x").concat(size.height);
                select.appendChild(optionElement);
                if ((_this.displayInfo && _this.displayInfo.displayId === displayId) ||
                    (!_this.displayInfo && displayId === DisplayInfo_1.DisplayInfo.DEFAULT_DISPLAY)) {
                    selectedOptionIdx = idx;
                }
            });
            if (selectedOptionIdx > -1) {
                select.selectedIndex = selectedOptionIdx;
                var _b = infoArray[selectedOptionIdx], videoSettings = _b.videoSettings, connectionCount = _b.connectionCount, displayInfo = _b.displayInfo;
                _this.displayInfo = displayInfo;
                if (connectionCount > 0 && videoSettings) {
                    _this.fillInputsFromVideoSettings(videoSettings, false);
                }
                else {
                    _this.updateVideoSettingsForPlayer();
                }
                _this.connectionCount = connectionCount;
                _this.updateStatus();
            }
            _this.displayIdSelectElement = select;
            if (_this.dialogBody) {
                _this.dialogBody.classList.remove('hidden');
                _this.dialogBody.classList.add('visible');
            }
        };
        _this.onConnected = function () {
            _this.statusText = 'Waiting for info...';
            _this.updateStatus();
            if (_this.okButton) {
                _this.okButton.disabled = false;
            }
        };
        _this.onDisconnected = function () {
            _this.statusText = 'Disconnected';
            _this.updateStatus();
            if (_this.okButton) {
                _this.okButton.disabled = true;
            }
            if (_this.dialogBody) {
                _this.dialogBody.classList.remove('visible');
                _this.dialogBody.classList.add('hidden');
            }
        };
        _this.onPlayerChange = function () {
            _this.updateVideoSettingsForPlayer();
        };
        _this.onDisplayIdChange = function () {
            var select = _this.displayIdSelectElement;
            if (!select || !_this.streamReceiver) {
                return;
            }
            var value = select.options[select.selectedIndex].value;
            var displayId = parseInt(value, 10);
            if (!isNaN(displayId)) {
                _this.displayInfo = _this.streamReceiver.getDisplayInfo(displayId);
            }
            _this.updateVideoSettingsForPlayer();
        };
        _this.onBackgroundClick = function (event) {
            if (event.target !== event.currentTarget) {
                return;
            }
            _this.cancel();
        };
        _this.cancel = function () {
            if (_this.streamReceiver) {
                _this.detachEventsListeners(_this.streamReceiver);
                _this.streamReceiver.stop();
            }
            _this.emit('closed', { dialog: _this, result: false });
            _this.removeUI();
        };
        _this.resetSettings = function () {
            var player = _this.getPlayer();
            if (player) {
                _this.fillInputsFromVideoSettings(player.getPreferredVideoSetting(), false);
            }
        };
        _this.loadSettings = function () {
            _this.updateVideoSettingsForPlayer();
        };
        _this.saveSettings = function () {
            var videoSettings = _this.buildVideoSettings();
            var player = _this.getPlayer();
            if (videoSettings && player) {
                var fitToScreen = _this.getFitToScreenValue();
                player.saveVideoSettings(_this.udid, videoSettings, fitToScreen, _this.displayInfo);
            }
        };
        _this.openStream = function () {
            var videoSettings = _this.buildVideoSettings();
            if (!videoSettings || !_this.streamReceiver || !_this.playerName) {
                return;
            }
            var fitToScreen = _this.getFitToScreenValue();
            _this.detachEventsListeners(_this.streamReceiver);
            _this.emit('closed', { dialog: _this, result: true });
            _this.removeUI();
            var player = StreamClientScrcpy_1.StreamClientScrcpy.createPlayer(_this.playerName, _this.udid, _this.displayInfo);
            if (!player) {
                return;
            }
            _this.setPreviouslyUsedPlayer(_this.playerName);
            player.setVideoSettings(videoSettings, fitToScreen, false);
            var params = tslib_1.__assign(tslib_1.__assign({}, _this.params), { udid: _this.udid, fitToScreen: fitToScreen });
            StreamClientScrcpy_1.StreamClientScrcpy.start(params, _this.streamReceiver, player, fitToScreen, videoSettings);
            _this.streamReceiver.triggerInitialInfoEvents();
        };
        _this.udid = descriptor.udid;
        _this.escapedUdid = Util_1.default.escapeUdid(_this.udid);
        _this.playerStorageKey = "configure_stream::".concat(_this.escapedUdid, "::player");
        _this.deviceName = descriptor['ro.product.model'];
        _this.TAG = "ConfigureScrcpy[".concat(_this.udid, "]");
        _this.createStreamReceiver(params);
        _this.setTitle("".concat(_this.deviceName, ". Configure stream"));
        _this.background = _this.createUI();
        return _this;
    }
    ConfigureScrcpy.prototype.getTracker = function () {
        return this.tracker;
    };
    ConfigureScrcpy.prototype.createStreamReceiver = function (params) {
        if (this.streamReceiver) {
            this.detachEventsListeners(this.streamReceiver);
            this.streamReceiver.stop();
        }
        this.streamReceiver = new StreamReceiverScrcpy_1.StreamReceiverScrcpy(params);
        this.attachEventsListeners(this.streamReceiver);
    };
    ConfigureScrcpy.prototype.attachEventsListeners = function (streamReceiver) {
        streamReceiver.on('encoders', this.onEncoders);
        streamReceiver.on('displayInfo', this.onDisplayInfo);
        streamReceiver.on('connected', this.onConnected);
        streamReceiver.on('disconnected', this.onDisconnected);
    };
    ConfigureScrcpy.prototype.detachEventsListeners = function (streamReceiver) {
        streamReceiver.off('encoders', this.onEncoders);
        streamReceiver.off('displayInfo', this.onDisplayInfo);
        streamReceiver.off('connected', this.onConnected);
        streamReceiver.off('disconnected', this.onDisconnected);
    };
    ConfigureScrcpy.prototype.updateStatus = function () {
        if (!this.connectionStatusElement) {
            return;
        }
        var text = this.statusText;
        if (this.connectionCount) {
            text = "".concat(text, ". Other clients: ").concat(this.connectionCount, ".");
        }
        this.connectionStatusElement.innerText = text;
    };
    ConfigureScrcpy.prototype.getPlayer = function () {
        if (!this.playerSelectElement) {
            return;
        }
        var playerName = this.playerSelectElement.options[this.playerSelectElement.selectedIndex].value;
        return StreamClientScrcpy_1.StreamClientScrcpy.getPlayers().find(function (playerClass) {
            return playerClass.playerFullName === playerName;
        });
    };
    ConfigureScrcpy.prototype.updateVideoSettingsForPlayer = function () {
        var player = this.getPlayer();
        if (player) {
            this.playerName = player.playerFullName;
            var storedOrPreferred = player.loadVideoSettings(this.udid, this.displayInfo);
            var fitToScreen = player.getFitToScreenStatus(this.udid, this.displayInfo);
            this.fillInputsFromVideoSettings(storedOrPreferred, fitToScreen);
        }
    };
    ConfigureScrcpy.prototype.getBasicInput = function (id) {
        var element = document.getElementById("".concat(id, "_").concat(this.escapedUdid));
        if (!element) {
            return null;
        }
        return element;
    };
    ConfigureScrcpy.prototype.fillInputsFromVideoSettings = function (videoSettings, fitToScreen) {
        if (this.displayInfo && this.displayInfo.displayId !== videoSettings.displayId) {
            console.error(this.TAG, "Display id from VideoSettings and DisplayInfo don't match");
        }
        this.fillBasicInput({ id: 'bitrate' }, videoSettings);
        this.fillBasicInput({ id: 'maxFps' }, videoSettings);
        this.fillBasicInput({ id: 'iFrameInterval' }, videoSettings);
        this.fillBasicInput({ id: 'codecOptions' }, videoSettings);
        if (videoSettings.bounds) {
            var _a = videoSettings.bounds, width = _a.width, height = _a.height;
            var widthInput = this.getBasicInput('maxWidth');
            if (widthInput) {
                widthInput.value = width.toString(10);
            }
            var heightInput = this.getBasicInput('maxHeight');
            if (heightInput) {
                heightInput.value = height.toString(10);
            }
        }
        if (this.encoderSelectElement) {
            var encoderName_1 = videoSettings.encoderName || '';
            var option = Array.from(this.encoderSelectElement.options).find(function (element) {
                return element.value === encoderName_1;
            });
            if (option) {
                this.encoderSelectElement.selectedIndex = option.index;
            }
        }
        if (this.fitToScreenCheckbox) {
            this.fitToScreenCheckbox.checked = fitToScreen;
            this.onFitToScreenChanged(fitToScreen);
        }
    };
    ConfigureScrcpy.prototype.onFitToScreenChanged = function (checked) {
        var heightInput = this.getBasicInput('maxHeight');
        var widthInput = this.getBasicInput('maxWidth');
        if (!this.fitToScreenCheckbox || !heightInput || !widthInput) {
            return;
        }
        heightInput.disabled = widthInput.disabled = checked;
        if (checked) {
            heightInput.setAttribute(Attribute_1.Attribute.VALUE, heightInput.value);
            heightInput.value = '';
            widthInput.setAttribute(Attribute_1.Attribute.VALUE, widthInput.value);
            widthInput.value = '';
        }
        else {
            var storedHeight = heightInput.getAttribute(Attribute_1.Attribute.VALUE);
            if (typeof storedHeight === 'string') {
                heightInput.value = storedHeight;
                heightInput.removeAttribute(Attribute_1.Attribute.VALUE);
            }
            var storedWidth = widthInput.getAttribute(Attribute_1.Attribute.VALUE);
            if (typeof storedWidth === 'string') {
                widthInput.value = storedWidth;
                widthInput.removeAttribute(Attribute_1.Attribute.VALUE);
            }
        }
    };
    ConfigureScrcpy.prototype.fillBasicInput = function (opts, videoSettings) {
        var input = this.getBasicInput(opts.id);
        var value = videoSettings[opts.id];
        if (input) {
            if (typeof value !== 'undefined' && value !== '-' && value !== 0 && value !== null) {
                input.value = value.toString(10);
                if (input.getAttribute('type') === 'range') {
                    input.dispatchEvent(new Event('input'));
                }
            }
            else {
                input.value = '';
            }
        }
    };
    ConfigureScrcpy.prototype.appendBasicInput = function (parent, opts) {
        var label = document.createElement('label');
        label.classList.add('label');
        label.innerText = "".concat(opts.label, ":");
        label.id = "label_".concat(opts.id, "_").concat(this.escapedUdid);
        parent.appendChild(label);
        var input = document.createElement('input');
        input.classList.add('input');
        input.id = label.htmlFor = "".concat(opts.id, "_").concat(this.escapedUdid);
        var range = opts.range;
        if (range) {
            label.setAttribute('title', opts.label);
            input.oninput = function () {
                var value = range.formatter ? range.formatter(parseInt(input.value, 10)) : input.value;
                label.innerText = "".concat(opts.label, " (").concat(value, "):");
            };
            input.setAttribute('type', 'range');
            input.setAttribute('max', range.max.toString());
            input.setAttribute('min', range.min.toString());
            input.setAttribute('step', range.step.toString());
        }
        parent.appendChild(input);
        return input;
    };
    ConfigureScrcpy.prototype.getNumberValueFromInput = function (name) {
        var value = document.getElementById("".concat(name, "_").concat(this.escapedUdid)).value;
        return parseInt(value, 10);
    };
    ConfigureScrcpy.prototype.getStringValueFromInput = function (name) {
        return document.getElementById("".concat(name, "_").concat(this.escapedUdid)).value;
    };
    ConfigureScrcpy.prototype.getValueFromSelect = function (name) {
        var select = document.getElementById("".concat(name, "_").concat(this.escapedUdid));
        return select.options[select.selectedIndex].value;
    };
    ConfigureScrcpy.prototype.buildVideoSettings = function () {
        try {
            var bitrate = this.getNumberValueFromInput('bitrate');
            var maxFps = this.getNumberValueFromInput('maxFps');
            var iFrameInterval = this.getNumberValueFromInput('iFrameInterval');
            var maxWidth = this.getNumberValueFromInput('maxWidth');
            var maxHeight = this.getNumberValueFromInput('maxHeight');
            var displayId = this.getNumberValueFromInput('displayId');
            var codecOptions = this.getStringValueFromInput('codecOptions') || undefined;
            var bounds = void 0;
            if (!isNaN(maxWidth) && !isNaN(maxHeight) && maxWidth && maxHeight) {
                bounds = new Size_1.default(maxWidth, maxHeight);
            }
            var encoderName = this.getValueFromSelect('encoderName') || undefined;
            return new VideoSettings_1.default({
                bitrate: bitrate,
                bounds: bounds,
                maxFps: maxFps,
                iFrameInterval: iFrameInterval,
                displayId: displayId,
                codecOptions: codecOptions,
                encoderName: encoderName,
            });
        }
        catch (error) {
            console.error(this.TAG, error.message);
            return null;
        }
    };
    ConfigureScrcpy.prototype.getFitToScreenValue = function () {
        if (!this.fitToScreenCheckbox) {
            return false;
        }
        return this.fitToScreenCheckbox.checked;
    };
    ConfigureScrcpy.prototype.getPreviouslyUsedPlayer = function () {
        if (!window.localStorage) {
            return '';
        }
        var result = window.localStorage.getItem(this.playerStorageKey);
        if (result) {
            return result;
        }
        else {
            return '';
        }
    };
    ConfigureScrcpy.prototype.setPreviouslyUsedPlayer = function (playerName) {
        if (!window.localStorage) {
            return;
        }
        window.localStorage.setItem(this.playerStorageKey, playerName);
    };
    ConfigureScrcpy.prototype.createUI = function () {
        var _this = this;
        var dialogName = 'configureDialog';
        var blockClass = 'dialog-block';
        var background = document.createElement('div');
        background.classList.add('dialog-background', dialogName);
        var dialogContainer = (this.dialogContainer = document.createElement('div'));
        dialogContainer.classList.add('dialog-container', dialogName);
        var dialogHeader = document.createElement('div');
        dialogHeader.classList.add('dialog-header', dialogName, 'control-wrapper');
        var backButton = new ToolBoxButton_1.ToolBoxButton('Back', SvgImage_1.default.Icon.ARROW_BACK);
        backButton.addEventListener('click', function () {
            _this.cancel();
        });
        backButton.getAllElements().forEach(function (el) {
            dialogHeader.appendChild(el);
        });
        var deviceName = document.createElement('span');
        deviceName.classList.add('dialog-title', 'main-title');
        deviceName.innerText = this.deviceName;
        dialogHeader.appendChild(deviceName);
        var dialogBody = (this.dialogBody = document.createElement('div'));
        dialogBody.classList.add('dialog-body', blockClass, dialogName, 'hidden');
        var playerWrapper = document.createElement('div');
        playerWrapper.classList.add('controls');
        var playerLabel = document.createElement('label');
        playerLabel.classList.add('label');
        playerLabel.innerText = 'Player:';
        playerWrapper.appendChild(playerLabel);
        var playerSelect = (this.playerSelectElement = document.createElement('select'));
        playerSelect.classList.add('input');
        playerSelect.id = playerLabel.htmlFor = "player_".concat(this.escapedUdid);
        playerWrapper.appendChild(playerSelect);
        dialogBody.appendChild(playerWrapper);
        var previouslyUsedPlayer = this.getPreviouslyUsedPlayer();
        StreamClientScrcpy_1.StreamClientScrcpy.getPlayers().forEach(function (playerClass, index) {
            var playerFullName = playerClass.playerFullName;
            var optionElement = document.createElement('option');
            optionElement.setAttribute('value', playerFullName);
            optionElement.innerText = playerFullName;
            playerSelect.appendChild(optionElement);
            if (playerFullName === previouslyUsedPlayer) {
                playerSelect.selectedIndex = index;
            }
        });
        playerSelect.onchange = this.onPlayerChange;
        this.updateVideoSettingsForPlayer();
        var controls = document.createElement('div');
        controls.classList.add('controls', 'control-wrapper');
        var displayIdLabel = document.createElement('label');
        displayIdLabel.classList.add('label');
        displayIdLabel.innerText = 'Display:';
        controls.appendChild(displayIdLabel);
        if (!this.displayIdSelectElement) {
            this.displayIdSelectElement = document.createElement('select');
        }
        controls.appendChild(this.displayIdSelectElement);
        this.displayIdSelectElement.classList.add('input');
        this.displayIdSelectElement.id = displayIdLabel.htmlFor = "displayId_".concat(this.escapedUdid);
        this.displayIdSelectElement.onchange = this.onDisplayIdChange;
        this.appendBasicInput(controls, {
            label: 'Bitrate',
            id: 'bitrate',
            range: { min: 524288, max: 8388608, step: 524288, formatter: Util_1.default.prettyBytes },
        });
        this.appendBasicInput(controls, {
            label: 'Max FPS',
            id: 'maxFps',
            range: { min: 1, max: 60, step: 1 },
        });
        this.appendBasicInput(controls, { label: 'I-Frame interval', id: 'iFrameInterval' });
        var fitLabel = document.createElement('label');
        fitLabel.innerText = 'Fit to screen';
        fitLabel.classList.add('label');
        controls.appendChild(fitLabel);
        var fitToggle = new ToolBoxCheckbox_1.ToolBoxCheckbox('Fit to screen', { off: SvgImage_1.default.Icon.TOGGLE_OFF, on: SvgImage_1.default.Icon.TOGGLE_ON }, 'fit_to_screen');
        fitToggle.getAllElements().forEach(function (el) {
            controls.appendChild(el);
            if (el instanceof HTMLLabelElement) {
                fitLabel.htmlFor = el.htmlFor;
                el.classList.add('input');
            }
            if (el instanceof HTMLInputElement) {
                _this.fitToScreenCheckbox = el;
            }
        });
        fitToggle.addEventListener('click', function (_, el) {
            var element = el.getElement();
            _this.onFitToScreenChanged(element.checked);
        });
        this.appendBasicInput(controls, { label: 'Max width', id: 'maxWidth' });
        this.appendBasicInput(controls, { label: 'Max height', id: 'maxHeight' });
        this.appendBasicInput(controls, { label: 'Codec options', id: 'codecOptions' });
        var encoderLabel = document.createElement('label');
        encoderLabel.classList.add('label');
        encoderLabel.innerText = 'Encoder:';
        controls.appendChild(encoderLabel);
        if (!this.encoderSelectElement) {
            this.encoderSelectElement = document.createElement('select');
        }
        controls.appendChild(this.encoderSelectElement);
        this.encoderSelectElement.classList.add('input');
        this.encoderSelectElement.id = encoderLabel.htmlFor = "encoderName_".concat(this.escapedUdid);
        dialogBody.appendChild(controls);
        var buttonsWrapper = document.createElement('div');
        buttonsWrapper.classList.add('controls');
        var resetSettingsButton = (this.resetSettingsButton = document.createElement('button'));
        resetSettingsButton.classList.add('button');
        resetSettingsButton.innerText = 'Reset settings';
        resetSettingsButton.addEventListener('click', this.resetSettings);
        buttonsWrapper.appendChild(resetSettingsButton);
        var loadSettingsButton = (this.loadSettingsButton = document.createElement('button'));
        loadSettingsButton.classList.add('button');
        loadSettingsButton.innerText = 'Load settings';
        loadSettingsButton.addEventListener('click', this.loadSettings);
        buttonsWrapper.appendChild(loadSettingsButton);
        var saveSettingsButton = (this.saveSettingsButton = document.createElement('button'));
        saveSettingsButton.classList.add('button');
        saveSettingsButton.innerText = 'Save settings';
        saveSettingsButton.addEventListener('click', this.saveSettings);
        buttonsWrapper.appendChild(saveSettingsButton);
        dialogBody.appendChild(buttonsWrapper);
        var dialogFooter = document.createElement('div');
        dialogFooter.classList.add('dialog-footer', blockClass, dialogName);
        var statusElement = document.createElement('span');
        statusElement.classList.add('subtitle');
        this.connectionStatusElement = statusElement;
        dialogFooter.appendChild(statusElement);
        this.statusText = "Connecting...";
        this.updateStatus();
        var okButton = (this.okButton = document.createElement('button'));
        okButton.innerText = 'Open';
        okButton.disabled = true;
        okButton.addEventListener('click', this.openStream);
        dialogFooter.appendChild(okButton);
        dialogBody.appendChild(dialogFooter);
        dialogContainer.appendChild(dialogHeader);
        dialogContainer.appendChild(dialogBody);
        dialogContainer.appendChild(dialogFooter);
        background.appendChild(dialogContainer);
        background.addEventListener('click', this.onBackgroundClick);
        document.body.appendChild(background);
        return background;
    };
    ConfigureScrcpy.prototype.removeUI = function () {
        var _a, _b, _c, _d;
        document.body.removeChild(this.background);
        (_a = this.okButton) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this.openStream);
        (_b = this.resetSettingsButton) === null || _b === void 0 ? void 0 : _b.removeEventListener('click', this.resetSettings);
        (_c = this.loadSettingsButton) === null || _c === void 0 ? void 0 : _c.removeEventListener('click', this.loadSettings);
        (_d = this.saveSettingsButton) === null || _d === void 0 ? void 0 : _d.removeEventListener('click', this.saveSettings);
        this.background.removeEventListener('click', this.onBackgroundClick);
    };
    return ConfigureScrcpy;
}(BaseClient_1.BaseClient));
exports.ConfigureScrcpy = ConfigureScrcpy;


/***/ }),

/***/ "./src/app/googDevice/client/DeviceTracker.ts":
/*!****************************************************!*\
  !*** ./src/app/googDevice/client/DeviceTracker.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeviceTracker = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../style/devicelist.css */ "./src/style/devicelist.css");
var BaseDeviceTracker_1 = __webpack_require__(/*! ../../client/BaseDeviceTracker */ "./src/app/client/BaseDeviceTracker.ts");
var Constants_1 = __webpack_require__(/*! ../../../common/Constants */ "./src/common/Constants.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var ControlCenterCommand_1 = __webpack_require__(/*! ../../../common/ControlCenterCommand */ "./src/common/ControlCenterCommand.ts");
var StreamClientScrcpy_1 = __webpack_require__(/*! ./StreamClientScrcpy */ "./src/app/googDevice/client/StreamClientScrcpy.ts");
var SvgImage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../ui/SvgImage */ "./src/app/ui/SvgImage.ts"));
var HtmlTag_1 = __webpack_require__(/*! ../../ui/HtmlTag */ "./src/app/ui/HtmlTag.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var Attribute_1 = __webpack_require__(/*! ../../Attribute */ "./src/app/Attribute.ts");
var DeviceState_1 = __webpack_require__(/*! ../../../common/DeviceState */ "./src/common/DeviceState.ts");
var ChannelCode_1 = __webpack_require__(/*! ../../../common/ChannelCode */ "./src/common/ChannelCode.ts");
var DESC_COLUMNS = [
    {
        title: 'Net Interface',
        field: 'interfaces',
    },
    {
        title: 'Server PID',
        field: 'pid',
    },
];
var DeviceTracker = (function (_super) {
    tslib_1.__extends(DeviceTracker, _super);
    function DeviceTracker(params, directUrl) {
        var _this = _super.call(this, tslib_1.__assign(tslib_1.__assign({}, params), { action: DeviceTracker.ACTION }), directUrl) || this;
        _this.tableId = 'goog_device_list';
        _this.onInterfaceSelected = function (event) {
            var selectElement = event.currentTarget;
            var option = selectElement.selectedOptions[0];
            var url = decodeURI(option.getAttribute(Attribute_1.Attribute.URL) || '');
            var name = option.getAttribute(Attribute_1.Attribute.NAME) || '';
            var fullName = decodeURIComponent(selectElement.getAttribute(Attribute_1.Attribute.FULL_NAME) || '');
            var udid = selectElement.getAttribute(Attribute_1.Attribute.UDID) || '';
            _this.updateLink({ url: url, name: name, fullName: fullName, udid: udid, store: true });
        };
        _this.onActionButtonClick = function (event) {
            var button = event.currentTarget;
            var udid = button.getAttribute(Attribute_1.Attribute.UDID);
            var pidString = button.getAttribute(Attribute_1.Attribute.PID) || '';
            var command = button.getAttribute(Attribute_1.Attribute.COMMAND);
            var pid = parseInt(pidString, 10);
            var data = {
                id: _this.getNextId(),
                type: command,
                data: {
                    udid: typeof udid === 'string' ? udid : undefined,
                    pid: isNaN(pid) ? undefined : pid,
                },
            };
            if (_this.ws && _this.ws.readyState === _this.ws.OPEN) {
                _this.ws.send(JSON.stringify(data));
            }
        };
        DeviceTracker.instancesByUrl.set(directUrl, _this);
        _this.buildDeviceTable();
        _this.openNewConnection();
        return _this;
    }
    DeviceTracker.start = function (hostItem) {
        var url = this.buildUrlForTracker(hostItem).toString();
        var instance = this.instancesByUrl.get(url);
        if (!instance) {
            instance = new DeviceTracker(hostItem, url);
        }
        return instance;
    };
    DeviceTracker.getInstance = function (hostItem) {
        return this.start(hostItem);
    };
    DeviceTracker.prototype.onSocketOpen = function () {
    };
    DeviceTracker.prototype.setIdAndHostName = function (id, hostName) {
        var e_1, _a;
        _super.prototype.setIdAndHostName.call(this, id, hostName);
        try {
            for (var _b = tslib_1.__values(DeviceTracker.instancesByUrl.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var value = _c.value;
                if (value.id === id && value !== this) {
                    console.warn("Tracker with url: \"".concat(this.url, "\" has the same id(").concat(this.id, ") as tracker with url \"").concat(value.url, "\""));
                    console.warn("This tracker will shut down");
                    this.destroy();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    DeviceTracker.prototype.updateLink = function (params) {
        var _this = this;
        var url = params.url, name = params.name, fullName = params.fullName, udid = params.udid, store = params.store;
        var playerTds = document.getElementsByName(encodeURIComponent("".concat(DeviceTracker.AttributePrefixPlayerFor).concat(fullName)));
        if (typeof udid !== 'string') {
            return;
        }
        if (store) {
            var localStorageKey = DeviceTracker.getLocalStorageKey(fullName || '');
            if (localStorage && name) {
                localStorage.setItem(localStorageKey, name);
            }
        }
        var action = Action_1.ACTION.STREAM_SCRCPY;
        playerTds.forEach(function (item) {
            item.innerHTML = '';
            var playerFullName = item.getAttribute(DeviceTracker.AttributePlayerFullName);
            var playerCodeName = item.getAttribute(DeviceTracker.AttributePlayerCodeName);
            if (!playerFullName || !playerCodeName) {
                return;
            }
            var link = DeviceTracker.buildLink({
                action: action,
                udid: udid,
                player: decodeURIComponent(playerCodeName),
                ws: url,
            }, decodeURIComponent(playerFullName), _this.params);
            item.appendChild(link);
        });
    };
    DeviceTracker.getLocalStorageKey = function (udid) {
        return "device_list::".concat(udid, "::interface");
    };
    DeviceTracker.createUrl = function (params, udid) {
        if (udid === void 0) { udid = ''; }
        var secure = !!params.secure;
        var hostname = params.hostname || location.hostname;
        var port = typeof params.port === 'number' ? params.port : secure ? 443 : 80;
        var pathname = params.pathname || location.pathname;
        var urlObject = this.buildUrl(tslib_1.__assign(tslib_1.__assign({}, params), { secure: secure, hostname: hostname, port: port, pathname: pathname }));
        if (udid) {
            urlObject.searchParams.set('action', Action_1.ACTION.PROXY_ADB);
            urlObject.searchParams.set('remote', "tcp:".concat(Constants_1.SERVER_PORT.toString(10)));
            urlObject.searchParams.set('udid', udid);
        }
        return urlObject;
    };
    DeviceTracker.createInterfaceOption = function (name, url) {
        var optionElement = document.createElement('option');
        optionElement.setAttribute(Attribute_1.Attribute.URL, url);
        optionElement.setAttribute(Attribute_1.Attribute.NAME, name);
        optionElement.innerText = "proxy over adb";
        return optionElement;
    };
    DeviceTracker.titleToClassName = function (title) {
        return title.toLowerCase().replace(/\s/g, '_');
    };
    DeviceTracker.prototype.buildDeviceRow = function (tbody, device) {
        var _this = this;
        var selectedInterfaceUrl = '';
        var selectedInterfaceName = '';
        var blockClass = 'desc-block';
        var fullName = "".concat(this.id, "_").concat(Util_1.default.escapeUdid(device.udid));
        var isActive = device.state === DeviceState_1.DeviceState.DEVICE;
        var hasPid = false;
        var servicesId = "device_services_".concat(fullName);
        var row = (0, HtmlTag_1.html)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["<div class=\"device ", "\">\n            <div class=\"device-header\">\n                <div class=\"device-name\">", " ", "</div>\n                <div class=\"device-serial\">", "</div>\n                <div class=\"device-version\">\n                    <div class=\"release-version\">", "</div>\n                    <div class=\"sdk-version\">", "</div>\n                </div>\n                <div class=\"device-state\" title=\"State: ", "\"></div>\n            </div>\n            <div id=\"", "\" class=\"services\"></div>\n        </div>"], ["<div class=\"device ", "\">\n            <div class=\"device-header\">\n                <div class=\"device-name\">", " ", "</div>\n                <div class=\"device-serial\">", "</div>\n                <div class=\"device-version\">\n                    <div class=\"release-version\">", "</div>\n                    <div class=\"sdk-version\">", "</div>\n                </div>\n                <div class=\"device-state\" title=\"State: ", "\"></div>\n            </div>\n            <div id=\"", "\" class=\"services\"></div>\n        </div>"])), isActive ? 'active' : 'not-active', device['ro.product.manufacturer'], device['ro.product.model'], device.udid, device['ro.build.version.release'], device['ro.build.version.sdk'], device.state, servicesId).content;
        var services = row.getElementById(servicesId);
        if (!services) {
            return;
        }
        DeviceTracker.tools.forEach(function (tool) {
            var entry = tool.createEntryForDeviceList(device, blockClass, _this.params);
            if (entry) {
                if (Array.isArray(entry)) {
                    entry.forEach(function (item) {
                        item && services.appendChild(item);
                    });
                }
                else {
                    services.appendChild(entry);
                }
            }
        });
        var streamEntry = StreamClientScrcpy_1.StreamClientScrcpy.createEntryForDeviceList(device, blockClass, fullName, this.params);
        streamEntry && services.appendChild(streamEntry);
        DESC_COLUMNS.forEach(function (item) {
            var title = item.title;
            var fieldName = item.field;
            var value;
            if (typeof item.field === 'string') {
                value = '' + device[item.field];
            }
            else {
                value = item.field(device);
            }
            var td = document.createElement('div');
            td.classList.add(DeviceTracker.titleToClassName(title), blockClass);
            services.appendChild(td);
            if (fieldName === 'pid') {
                hasPid = value !== '-1';
                var actionButton = document.createElement('button');
                actionButton.className = 'action-button kill-server-button';
                actionButton.setAttribute(Attribute_1.Attribute.UDID, device.udid);
                actionButton.setAttribute(Attribute_1.Attribute.PID, value);
                var command = void 0;
                if (isActive) {
                    actionButton.classList.add('active');
                    actionButton.onclick = _this.onActionButtonClick;
                    if (hasPid) {
                        command = ControlCenterCommand_1.ControlCenterCommand.KILL_SERVER;
                        actionButton.title = 'Kill server';
                        actionButton.appendChild(SvgImage_1.default.create(SvgImage_1.default.Icon.CANCEL));
                    }
                    else {
                        command = ControlCenterCommand_1.ControlCenterCommand.START_SERVER;
                        actionButton.title = 'Start server';
                        actionButton.appendChild(SvgImage_1.default.create(SvgImage_1.default.Icon.REFRESH));
                    }
                    actionButton.setAttribute(Attribute_1.Attribute.COMMAND, command);
                }
                else {
                    var timestamp = device['last.update.timestamp'];
                    if (timestamp) {
                        var date = new Date(timestamp);
                        actionButton.title = "Last update on ".concat(date.toLocaleDateString(), " at ").concat(date.toLocaleTimeString());
                    }
                    else {
                        actionButton.title = "Not active";
                    }
                    actionButton.appendChild(SvgImage_1.default.create(SvgImage_1.default.Icon.OFFLINE));
                }
                var span = document.createElement('span');
                span.innerText = value;
                actionButton.appendChild(span);
                td.appendChild(actionButton);
            }
            else if (fieldName === 'interfaces') {
                var proxyInterfaceUrl = DeviceTracker.createUrl(_this.params, device.udid).toString();
                var proxyInterfaceName = 'proxy';
                var localStorageKey = DeviceTracker.getLocalStorageKey(fullName);
                var lastSelected_1 = localStorage && localStorage.getItem(localStorageKey);
                var selectElement_1 = document.createElement('select');
                selectElement_1.setAttribute(Attribute_1.Attribute.UDID, device.udid);
                selectElement_1.setAttribute(Attribute_1.Attribute.FULL_NAME, fullName);
                selectElement_1.setAttribute('name', encodeURIComponent("".concat(DeviceTracker.AttributePrefixInterfaceSelectFor).concat(fullName)));
                device.interfaces.forEach(function (value) {
                    var params = tslib_1.__assign(tslib_1.__assign({}, _this.params), { secure: false, hostname: value.ipv4, port: Constants_1.SERVER_PORT });
                    var url = DeviceTracker.createUrl(params).toString();
                    var optionElement = DeviceTracker.createInterfaceOption(value.name, url);
                    optionElement.innerText = "".concat(value.name, ": ").concat(value.ipv4);
                    selectElement_1.appendChild(optionElement);
                    if (lastSelected_1) {
                        if (lastSelected_1 === value.name || !selectedInterfaceName) {
                            optionElement.selected = true;
                            selectedInterfaceUrl = url;
                            selectedInterfaceName = value.name;
                        }
                    }
                    else if (device['wifi.interface'] === value.name) {
                        optionElement.selected = true;
                    }
                });
                if (isActive) {
                    var adbProxyOption = DeviceTracker.createInterfaceOption(proxyInterfaceName, proxyInterfaceUrl);
                    if (lastSelected_1 === proxyInterfaceName || !selectedInterfaceName) {
                        adbProxyOption.selected = true;
                        selectedInterfaceUrl = proxyInterfaceUrl;
                        selectedInterfaceName = proxyInterfaceName;
                    }
                    selectElement_1.appendChild(adbProxyOption);
                    var actionButton = document.createElement('button');
                    actionButton.className = 'action-button update-interfaces-button active';
                    actionButton.title = "Update information";
                    actionButton.appendChild(SvgImage_1.default.create(SvgImage_1.default.Icon.REFRESH));
                    actionButton.setAttribute(Attribute_1.Attribute.UDID, device.udid);
                    actionButton.setAttribute(Attribute_1.Attribute.COMMAND, ControlCenterCommand_1.ControlCenterCommand.UPDATE_INTERFACES);
                    actionButton.onclick = _this.onActionButtonClick;
                    td.appendChild(actionButton);
                }
                selectElement_1.onchange = _this.onInterfaceSelected;
                td.appendChild(selectElement_1);
            }
            else {
                td.innerText = value;
            }
        });
        if (DeviceTracker.CREATE_DIRECT_LINKS) {
            var name_1 = "".concat(DeviceTracker.AttributePrefixPlayerFor).concat(fullName);
            StreamClientScrcpy_1.StreamClientScrcpy.getPlayers().forEach(function (playerClass) {
                var playerCodeName = playerClass.playerCodeName, playerFullName = playerClass.playerFullName;
                var playerTd = document.createElement('div');
                playerTd.classList.add(blockClass);
                playerTd.setAttribute('name', encodeURIComponent(name_1));
                playerTd.setAttribute(DeviceTracker.AttributePlayerFullName, encodeURIComponent(playerFullName));
                playerTd.setAttribute(DeviceTracker.AttributePlayerCodeName, encodeURIComponent(playerCodeName));
                services.appendChild(playerTd);
            });
        }
        tbody.appendChild(row);
        if (DeviceTracker.CREATE_DIRECT_LINKS && hasPid && selectedInterfaceUrl) {
            this.updateLink({
                url: selectedInterfaceUrl,
                name: selectedInterfaceName,
                fullName: fullName,
                udid: device.udid,
                store: false,
            });
        }
    };
    DeviceTracker.prototype.getChannelCode = function () {
        return ChannelCode_1.ChannelCode.GTRC;
    };
    DeviceTracker.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        DeviceTracker.instancesByUrl.delete(this.url.toString());
        if (!DeviceTracker.instancesByUrl.size) {
            var holder = document.getElementById(BaseDeviceTracker_1.BaseDeviceTracker.HOLDER_ELEMENT_ID);
            if (holder && holder.parentElement) {
                holder.parentElement.removeChild(holder);
            }
        }
    };
    DeviceTracker.ACTION = Action_1.ACTION.GOOG_DEVICE_LIST;
    DeviceTracker.CREATE_DIRECT_LINKS = true;
    DeviceTracker.instancesByUrl = new Map();
    DeviceTracker.tools = new Set();
    return DeviceTracker;
}(BaseDeviceTracker_1.BaseDeviceTracker));
exports.DeviceTracker = DeviceTracker;
var templateObject_1;


/***/ }),

/***/ "./src/app/googDevice/client/DevtoolsClient.ts":
/*!*****************************************************!*\
  !*** ./src/app/googDevice/client/DevtoolsClient.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DevtoolsClient = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../style/devtools.css */ "./src/style/devtools.css");
var ManagerClient_1 = __webpack_require__(/*! ../../client/ManagerClient */ "./src/app/client/ManagerClient.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var RemoteDevtoolsCommand_1 = __webpack_require__(/*! ../../../types/RemoteDevtoolsCommand */ "./src/types/RemoteDevtoolsCommand.ts");
var BaseDeviceTracker_1 = __webpack_require__(/*! ../../client/BaseDeviceTracker */ "./src/app/client/BaseDeviceTracker.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var FRONTEND_RE = /^https?:\/\/chrome-devtools-frontend\.appspot\.com\/serve_rev\/(@.*)/;
var TAG = '[DevtoolsClient]';
var DevtoolsClient = (function (_super) {
    tslib_1.__extends(DevtoolsClient, _super);
    function DevtoolsClient(params) {
        var _this = _super.call(this, params) || this;
        _this.requestListUpdate = function () {
            _this.timeout = undefined;
            if (!_this.ws || _this.ws.readyState !== _this.ws.OPEN) {
                return;
            }
            _this.ws.send(JSON.stringify({
                command: RemoteDevtoolsCommand_1.RemoteDevtoolsCommand.LIST_DEVTOOLS,
            }));
        };
        _this.onDevtoolsLinkClick = function (event) {
            var a = event.target;
            var url = a.getAttribute('href');
            if (!url) {
                return;
            }
            _this.hiddenInput.value = url;
            _this.hiddenInput.removeAttribute('hidden');
            _this.hiddenInput.select();
            _this.hiddenInput.setSelectionRange(0, url.length);
            document.execCommand('copy');
            _this.hiddenInput.setAttribute('hidden', 'hidden');
            _this.tooltip.style.left = "".concat(event.clientX, "px");
            _this.tooltip.style.top = "".concat(event.clientY, "px");
            _this.tooltip.style.display = 'block';
            _this.hideTooltip();
            event.preventDefault();
        };
        _this.udid = _this.params.udid;
        _this.openNewConnection();
        _this.setTitle("Devtools ".concat(_this.udid));
        _this.setBodyClass('devtools');
        _this.hiddenInput = document.createElement('input');
        _this.hiddenInput.className = 'hidden';
        _this.hiddenInput.setAttribute('hidden', 'hidden');
        document.body.appendChild(_this.hiddenInput);
        _this.tooltip = document.createElement('span');
        _this.tooltip.innerText = 'Copied!';
        _this.tooltip.className = 'tooltip';
        _this.tooltip.style.display = 'none';
        document.body.appendChild(_this.tooltip);
        return _this;
    }
    DevtoolsClient.start = function (params) {
        return new DevtoolsClient(params);
    };
    DevtoolsClient.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var action = typedParams.action;
        if (action !== Action_1.ACTION.DEVTOOLS) {
            throw Error('Incorrect action');
        }
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { action: action, udid: Util_1.default.parseString(params, 'udid', true) });
    };
    DevtoolsClient.prototype.buildDirectWebSocketUrl = function () {
        var localUrl = _super.prototype.buildDirectWebSocketUrl.call(this);
        if (typeof this.params.udid === 'string') {
            localUrl.searchParams.set('udid', this.params.udid);
        }
        return localUrl;
    };
    DevtoolsClient.prototype.onSocketClose = function (event) {
        var _this = this;
        console.error(TAG, "Socket closed. Code: ".concat(event.code, ".").concat(event.reason ? ' Reason: ' + event.reason : ''));
        setTimeout(function () {
            _this.openNewConnection();
        }, 2000);
    };
    DevtoolsClient.prototype.onSocketMessage = function (event) {
        var message;
        try {
            message = JSON.parse(event.data);
        }
        catch (error) {
            console.error(TAG, error.message);
            console.log(TAG, error.data);
            return;
        }
        if (message.type !== DevtoolsClient.ACTION) {
            console.log(TAG, "Unknown message type: ".concat(message.type));
            return;
        }
        var list = message.data;
        this.buildList(list);
        if (!this.timeout) {
            this.timeout = window.setTimeout(this.requestListUpdate, DevtoolsClient.TIMEOUT);
        }
    };
    DevtoolsClient.prototype.onSocketOpen = function () {
        this.requestListUpdate();
    };
    DevtoolsClient.prototype.createDeviceBlock = function (info) {
        var d = document.createElement('div');
        d.className = 'device';
        d.id = "device:".concat(info.deviceSerial);
        return d;
    };
    DevtoolsClient.prototype.createDeviceHeader = function (info) {
        var h = document.createElement('div');
        h.className = 'device-header';
        var n = document.createElement('div');
        n.className = 'device-name';
        n.innerText = info.deviceName;
        var s = document.createElement('div');
        s.className = 'device-serial';
        s.innerText = "#".concat(info.deviceSerial.toUpperCase());
        var p = document.createElement('div');
        p.className = 'device-ports';
        h.appendChild(n);
        h.appendChild(s);
        h.appendChild(p);
        return h;
    };
    DevtoolsClient.prototype.createBrowsersBlock = function (info) {
        var _this = this;
        var deviceSerial = info.deviceSerial;
        var bs = document.createElement('div');
        bs.className = 'browsers';
        info.browsers.sort(DevtoolsClient.compareBrowsers).forEach(function (browser) {
            var b = _this.createBrowserBlock(deviceSerial, browser);
            bs.appendChild(b);
        });
        return bs;
    };
    DevtoolsClient.prototype.createBrowserBlock = function (serial, info) {
        var _this = this;
        var socket = info.socket;
        var b = document.createElement('div');
        b.id = "".concat(serial, ":").concat(socket);
        b.className = 'browser';
        var h = document.createElement('div');
        h.className = 'browser-header';
        b.appendChild(h);
        var n = document.createElement('div');
        n.className = 'browser-name';
        h.appendChild(n);
        var pkg = info.version['Android-Package'];
        var browser = info.version.Browser;
        var version;
        var temp = browser.split('/');
        if (temp.length > 1) {
            version = temp[1];
        }
        else {
            version = browser;
        }
        var prefix = socket.indexOf('webview') === 0 ? 'WebView in ' : '';
        n.innerText = "".concat(prefix).concat(pkg, "(").concat(version, ")");
        var s = document.createElement('span');
        s.setAttribute('tabIndex', '1');
        s.className = 'action';
        s.innerText = 'trace';
        s.setAttribute('hidden', 'hidden');
        h.appendChild(s);
        var pages = document.createElement('div');
        pages.className = 'list pages';
        info.targets.forEach(function (page) {
            pages.appendChild(_this.createPageBlock(page, version));
        });
        b.appendChild(pages);
        return b;
    };
    DevtoolsClient.prototype.createPageBlock = function (page, version) {
        var row = document.createElement('div');
        row.className = 'row';
        var props = document.createElement('div');
        props.className = 'properties-box';
        row.appendChild(props);
        if (page.faviconUrl) {
            var img = document.createElement('img');
            img.src = page.faviconUrl;
            props.appendChild(img);
        }
        var subrow = document.createElement('div');
        subrow.className = 'subrow-box';
        props.appendChild(subrow);
        var sub1 = document.createElement('div');
        sub1.className = 'subrow';
        subrow.appendChild(sub1);
        var n = document.createElement('div');
        n.className = 'name';
        if (page.title) {
            n.innerText = page.title;
        }
        sub1.appendChild(n);
        var u = document.createElement('div');
        u.className = 'url';
        if (page.url) {
            u.innerText = page.url;
        }
        sub1.appendChild(u);
        var sub2 = document.createElement('div');
        sub2.className = 'subrow webview';
        subrow.appendChild(sub2);
        if (page.description) {
            try {
                var desc = JSON.parse(page.description);
                var position = document.createElement('div');
                position.className = 'position';
                position.innerText = "at (".concat(desc.screenX, ", ").concat(desc.screenY, ")");
                sub2.appendChild(position);
                var size = document.createElement('div');
                size.className = 'size';
                size.innerText = "size ".concat(desc.width, " \u00D7 ").concat(desc.height);
                sub2.appendChild(size);
            }
            catch (error) { }
        }
        var absoluteAddress = page.devtoolsFrontendUrl && page.devtoolsFrontendUrl.startsWith('http');
        var actions = document.createElement('div');
        actions.className = 'actions';
        subrow.appendChild(actions);
        var inspect = document.createElement('a');
        inspect.setAttribute('tabIndex', '1');
        inspect.className = 'action';
        inspect.innerText = 'inspect';
        actions.appendChild(inspect);
        if (page.devtoolsFrontendUrl) {
            inspect.setAttribute('href', page.devtoolsFrontendUrl);
            inspect.setAttribute('rel', 'noopener noreferrer');
            inspect.setAttribute('target', '_blank');
        }
        else {
            inspect.classList.add('disabled');
        }
        if (!absoluteAddress) {
            inspect.classList.add('disabled');
        }
        if (page.webSocketDebuggerUrl) {
            var bundled = document.createElement('a');
            bundled.setAttribute('tabIndex', '1');
            bundled.className = 'action copy';
            bundled.innerText = 'bundled';
            bundled.title = 'Copy link and open manually';
            actions.appendChild(bundled);
            var base = 'devtools://devtools/bundled/inspector.html?experiments=true&ws=';
            bundled.setAttribute('href', "".concat(base).concat(page.webSocketDebuggerUrl));
            bundled.setAttribute('rel', 'noopener noreferrer');
            bundled.setAttribute('target', '_blank');
            bundled.onclick = this.onDevtoolsLinkClick;
        }
        if (page.devtoolsFrontendUrl && page.webSocketDebuggerUrl && absoluteAddress) {
            var ur = new URL(page.devtoolsFrontendUrl);
            ur.searchParams.delete('ws');
            var urStr = ur.toString();
            var match = urStr.match(FRONTEND_RE);
            if (match) {
                var str = match[1];
                var temp = str.split('/');
                var revision = temp.shift();
                var rest = temp.join('/');
                var remoteVersion = version ? "remoteVersion=".concat(version, "&") : '';
                var opts = "remoteFrontend=true&dockSide=undocked&";
                var ws = "ws=".concat(page.webSocketDebuggerUrl);
                var url = "devtools://devtools/remote/serve_rev/".concat(revision, "/").concat(rest, "?").concat(remoteVersion).concat(opts).concat(ws);
                var remote = document.createElement('a');
                remote.setAttribute('tabIndex', '1');
                remote.className = 'action copy';
                remote.innerText = 'remote';
                remote.title = 'Copy link and open manually';
                actions.appendChild(remote);
                remote.setAttribute('href', url);
                remote.setAttribute('rel', 'noopener noreferrer');
                remote.setAttribute('target', '_blank');
                remote.onclick = this.onDevtoolsLinkClick;
            }
        }
        var pause = document.createElement('span');
        pause.setAttribute('hidden', 'hidden');
        pause.setAttribute('tabIndex', '1');
        pause.className = 'action';
        pause.innerText = 'pause';
        actions.appendChild(pause);
        return row;
    };
    DevtoolsClient.prototype.hideTooltip = function () {
        var _this = this;
        if (this.hideTimeout) {
            clearTimeout(this.hideTimeout);
        }
        this.hideTimeout = window.setTimeout(function () {
            _this.hideTimeout = undefined;
            _this.tooltip.style.display = 'none';
        }, 1000);
    };
    DevtoolsClient.prototype.buildList = function (info) {
        var _a;
        var block = this.createDeviceBlock(info);
        var header = this.createDeviceHeader(info);
        var browsers = this.createBrowsersBlock(info);
        block.appendChild(header);
        block.appendChild(browsers);
        var old = document.getElementById(block.id);
        if (old) {
            (_a = old.parentElement) === null || _a === void 0 ? void 0 : _a.replaceChild(block, old);
        }
        else {
            document.body.appendChild(block);
        }
    };
    DevtoolsClient.createEntryForDeviceList = function (descriptor, blockClass, params) {
        if (descriptor.state !== 'device') {
            return;
        }
        var entry = document.createElement('div');
        entry.classList.add('devtools', blockClass);
        entry.appendChild(BaseDeviceTracker_1.BaseDeviceTracker.buildLink({
            action: Action_1.ACTION.DEVTOOLS,
            udid: descriptor.udid,
        }, 'devtools', params));
        return entry;
    };
    DevtoolsClient.ACTION = Action_1.ACTION.DEVTOOLS;
    DevtoolsClient.TIMEOUT = 1000;
    DevtoolsClient.compareBrowsers = function (a, b) {
        var aBrowser = a.version.Browser;
        var bBrowser = b.version.Browser;
        if (aBrowser > bBrowser) {
            return 1;
        }
        else if (aBrowser < bBrowser) {
            return -1;
        }
        return 0;
    };
    return DevtoolsClient;
}(ManagerClient_1.ManagerClient));
exports.DevtoolsClient = DevtoolsClient;


/***/ }),

/***/ "./src/app/googDevice/client/FileListingClient.ts":
/*!********************************************************!*\
  !*** ./src/app/googDevice/client/FileListingClient.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileListingClient = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../style/filelisting.css */ "./src/style/filelisting.css");
var ManagerClient_1 = __webpack_require__(/*! ../../client/ManagerClient */ "./src/app/client/ManagerClient.ts");
var BaseDeviceTracker_1 = __webpack_require__(/*! ../../client/BaseDeviceTracker */ "./src/app/client/BaseDeviceTracker.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var protocol_1 = tslib_1.__importDefault(__webpack_require__(/*! @dead50f7/adbkit/lib/adb/protocol */ "./node_modules/@dead50f7/adbkit/lib/adb/protocol.js"));
var Entry_1 = __webpack_require__(/*! ../Entry */ "./src/app/googDevice/Entry.ts");
var HtmlTag_1 = __webpack_require__(/*! ../../ui/HtmlTag */ "./src/app/ui/HtmlTag.ts");
var path = tslib_1.__importStar(__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js"));
var ChannelCode_1 = __webpack_require__(/*! ../../../common/ChannelCode */ "./src/common/ChannelCode.ts");
var Multiplexer_1 = __webpack_require__(/*! ../../../packages/multiplexer/Multiplexer */ "./src/packages/multiplexer/Multiplexer.ts");
var FilePushHandler_1 = tslib_1.__importDefault(__webpack_require__(/*! ../filePush/FilePushHandler */ "./src/app/googDevice/filePush/FilePushHandler.ts"));
var AdbkitFilePushStream_1 = __webpack_require__(/*! ../filePush/AdbkitFilePushStream */ "./src/app/googDevice/filePush/AdbkitFilePushStream.ts");
var TAG = '[FileListing]';
var parentDirLinkBox = 'parentDirLinkBox';
var rootDirLinkBox = 'rootDirLinkBox';
var tempDirLinkBox = 'tempDirLinkBox';
var storageDirLinkBox = 'storageDirLinkBox';
var rootPath = '/';
var tempPath = '/data/local/tmp';
var storagePath = '/storage';
var Foreground;
(function (Foreground) {
    Foreground["Drop"] = "drop-target";
    Foreground["Connect"] = "connect";
})(Foreground || (Foreground = {}));
var Message = (_a = {},
    _a[Foreground.Drop] = 'Drop files here',
    _a[Foreground.Connect] = 'Connection lost',
    _a);
var FileListingClient = (function (_super) {
    tslib_1.__extends(FileListingClient, _super);
    function FileListingClient(params) {
        var _this = _super.call(this, params) || this;
        _this.enterCount = 0;
        _this.entries = [];
        _this.requireClean = false;
        _this.requestedPath = '';
        _this.downloads = new Map();
        _this.uploads = new Map();
        _this.channels = new Set();
        _this.parent = document.body;
        _this.serial = _this.params.udid;
        _this.path = _this.params.path;
        _this.openNewConnection();
        _this.setTitle("Listing ".concat(_this.serial));
        _this.setBodyClass('file-listing');
        _this.name = "".concat(TAG, " [").concat(_this.serial, "]");
        _this.tableBodyId = "".concat(Util_1.default.escapeUdid(_this.serial), "_list");
        _this.wrapperId = "wrapper_".concat(_this.tableBodyId);
        var fragment = (0, HtmlTag_1.html)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["<div id=\"", "\" class=\"listing\">\n            <h1 id=\"header\">Contents ", "</h1>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon up\" href=\"#!\" ", "=\"..\"> [parent] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "\"> [root] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "/\"> [storage] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "/\"> [temp] </a>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Size</th>\n                        <th>MTime</th>\n                    </tr>\n                </thead>\n                <tbody id=\"", "\"></tbody>\n            </table>\n        </div>"], ["<div id=\"", "\" class=\"listing\">\n            <h1 id=\"header\">Contents ", "</h1>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon up\" href=\"#!\" ", "=\"..\"> [parent] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "\"> [root] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "/\"> [storage] </a>\n            </div>\n            <div id=\"", "\" class=\"quick-link-box\">\n                <a class=\"icon dir\" href=\"#!\" ", "=\"", "/\"> [temp] </a>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Size</th>\n                        <th>MTime</th>\n                    </tr>\n                </thead>\n                <tbody id=\"", "\"></tbody>\n            </table>\n        </div>"])), _this.wrapperId, _this.path, parentDirLinkBox, FileListingClient.PROPERTY_NAME, rootDirLinkBox, FileListingClient.PROPERTY_NAME, rootPath, storageDirLinkBox, FileListingClient.PROPERTY_NAME, storagePath, tempDirLinkBox, FileListingClient.PROPERTY_NAME, tempPath, _this.tableBodyId).content;
        _this.tableBody = fragment.getElementById(_this.tableBodyId);
        var wrapper = fragment.getElementById(_this.wrapperId);
        if (wrapper) {
            wrapper.addEventListener('click', function (e) {
                if (!e.target || !(e.target instanceof HTMLElement)) {
                    return;
                }
                var name = e.target.getAttribute(FileListingClient.PROPERTY_NAME);
                if (!name) {
                    return;
                }
                e.preventDefault();
                e.cancelBubble = true;
                var newPath = path.resolve(_this.path, name);
                if (newPath !== _this.path) {
                    var entryIdString = e.target.getAttribute(FileListingClient.PROPERTY_ENTRY_ID);
                    var entry = void 0;
                    var anchor = void 0;
                    if (entryIdString) {
                        var entryId = parseInt(entryIdString, 10);
                        if (!isNaN(entryId) && _this.entries[entryId]) {
                            entry = _this.entries[entryId];
                            anchor = e.target;
                        }
                    }
                    _this.loadContent(newPath, entry, anchor);
                }
            });
            if (_this.ws instanceof Multiplexer_1.Multiplexer) {
                _this.filePushHandler = new FilePushHandler_1.default(_this.parent, new AdbkitFilePushStream_1.AdbkitFilePushStream(_this.ws, _this));
                _this.filePushHandler.addEventListener(_this);
            }
        }
        _this.parent.appendChild(fragment);
        return _this;
    }
    FileListingClient.start = function (params) {
        return new FileListingClient(params);
    };
    FileListingClient.createEntryForDeviceList = function (descriptor, blockClass, params) {
        if (descriptor.state !== 'device') {
            return;
        }
        var entry = document.createElement('div');
        entry.classList.add('file-listing', blockClass);
        entry.appendChild(BaseDeviceTracker_1.BaseDeviceTracker.buildLink({
            action: Action_1.ACTION.FILE_LISTING,
            udid: descriptor.udid,
            path: "".concat(tempPath, "/"),
        }, 'list files', params));
        return entry;
    };
    FileListingClient.prototype.onDragEnter = function () {
        if (this.enterCount === 0) {
            this.addForeground(Foreground.Drop);
        }
        this.enterCount++;
        return true;
    };
    FileListingClient.prototype.onDragLeave = function () {
        this.enterCount--;
        if (this.enterCount < 0) {
            this.enterCount = 0;
        }
        if (this.enterCount === 0) {
            this.removeForeground(Foreground.Drop);
        }
        return true;
    };
    FileListingClient.prototype.onDrop = function () {
        this.enterCount = 0;
        this.removeForeground(Foreground.Drop);
        return true;
    };
    FileListingClient.prototype.findOrCreateEntryRow = function (fileName) {
        var row = document.getElementById("entry-".concat(fileName));
        if (row) {
            return row;
        }
        return this.addRow(true, fileName, 'file');
    };
    FileListingClient.prototype.onFilePushUpdate = function (data) {
        var _this = this;
        var fileName = data.fileName, progress = data.progress, error = data.error, message = data.message, finished = data.finished;
        var upload = this.uploads.get(fileName);
        if (!upload || document.getElementById(upload.anchor.id) !== upload.anchor) {
            var row_1 = this.findOrCreateEntryRow(fileName);
            var anchor_1 = row_1.getElementsByTagName('a')[0];
            if (!anchor_1.id) {
                anchor_1.id = "upload_".concat(fileName);
            }
            var progressEl_1 = this.appendProgressElement(anchor_1);
            upload = { row: row_1, progressEl: progressEl_1, anchor: anchor_1, timeout: null };
            this.uploads.set(fileName, upload);
        }
        var row = upload.row, progressEl = upload.progressEl, anchor = upload.anchor;
        if (error) {
            this.uploads.delete(fileName);
            progressEl.style.width = "100%";
            progressEl.classList.add('error');
            if (!anchor.classList.contains('error')) {
                anchor.classList.add('error');
                anchor.innerText = "".concat(fileName, ". ").concat(message);
            }
            if (!upload.timeout) {
                upload.timeout = window.setTimeout(function () {
                    var parent = row.parentElement;
                    if (parent) {
                        parent.removeChild(row);
                        _this.reload();
                    }
                }, FileListingClient.REMOVE_ROW_TIMEOUT);
            }
        }
        else {
            anchor.innerText = "".concat(fileName, ". ").concat(message);
            progressEl.style.width = "".concat(progress, "%");
        }
        if (finished && !error) {
            this.uploads.delete(fileName);
            this.reload();
        }
    };
    FileListingClient.prototype.onError = function (error) {
        console.error(this.name, 'FIXME: implement', error);
    };
    FileListingClient.prototype.addForeground = function (type) {
        var fragment = (0, HtmlTag_1.html)(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["<div class=\"foreground ", "\">\n            <div class=\"foreground-message ", "-message\">", "</div>\n        </div>"], ["<div class=\"foreground ", "\">\n            <div class=\"foreground-message ", "-message\">", "</div>\n        </div>"])), type, type, Message[type]).content;
        this.parent.appendChild(fragment);
    };
    FileListingClient.prototype.removeForeground = function (type) {
        var _this = this;
        var els = this.parent.getElementsByClassName(type);
        Array.from(els).forEach(function (el) {
            _this.parent.removeChild(el);
        });
    };
    FileListingClient.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var action = typedParams.action;
        if (action !== Action_1.ACTION.FILE_LISTING) {
            throw Error('Incorrect action');
        }
        var pathParam = params.get('path');
        var path = pathParam || '/data/local/tmp';
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { action: action, udid: Util_1.default.parseString(params, 'udid', true), path: path });
    };
    FileListingClient.prototype.buildDirectWebSocketUrl = function () {
        var localUrl = _super.prototype.buildDirectWebSocketUrl.call(this);
        localUrl.searchParams.set('action', Action_1.ACTION.MULTIPLEX);
        return localUrl;
    };
    FileListingClient.prototype.onSocketClose = function (event) {
        if (this.filePushHandler) {
            this.filePushHandler.release();
        }
        console.error(this.name, 'socket closed', event.reason);
        this.addForeground(Foreground.Connect);
    };
    FileListingClient.prototype.onSocketMessage = function (_e) {
    };
    FileListingClient.prototype.onSocketOpen = function () {
        this.loadContent(this.path);
    };
    FileListingClient.prototype.loadContent = function (path, entry, anchor, pathToLoadAfter) {
        var _this = this;
        if (pathToLoadAfter === void 0) { pathToLoadAfter = ''; }
        if (!this.ws || this.ws.readyState !== this.ws.OPEN || !(this.ws instanceof Multiplexer_1.Multiplexer)) {
            return;
        }
        if (!entry && (this.channels.size || this.uploads.size)) {
            return;
        }
        this.requireClean = true;
        this.requestedPath = path;
        var cmd;
        if (!entry) {
            cmd = protocol_1.default.STAT;
        }
        else if (entry.isFile()) {
            cmd = protocol_1.default.RECV;
        }
        else {
            cmd = protocol_1.default.LIST;
        }
        var len = Buffer.byteLength(path, 'utf-8');
        var payload = Buffer.alloc(cmd.length + 4 + len);
        var pos = payload.write(cmd, 0);
        pos = payload.writeUInt32LE(len, pos);
        payload.write(path, pos);
        var channel = this.ws.createChannel(payload);
        this.channels.add(channel);
        var download = {
            receivedBytes: 0,
            path: path,
            entry: entry,
            anchor: anchor,
            chunks: [],
            pathToLoadAfter: pathToLoadAfter,
        };
        this.downloads.set(channel, download);
        var onMessage = function (event) {
            _this.handleReply(channel, event);
        };
        var onClose = function () {
            _this.channels.delete(channel);
            _this.downloads.delete(channel);
            channel.removeEventListener('message', onMessage);
            channel.removeEventListener('close', onClose);
        };
        channel.addEventListener('message', onMessage);
        channel.addEventListener('close', onClose);
    };
    FileListingClient.prototype.clean = function () {
        this.tableBody.innerHTML = '';
        var header = document.getElementById('header');
        if (header) {
            header.innerText = "Content ".concat(this.path);
        }
        this.toggleQuickLinks(this.path);
        var hash = location.hash.replace(/#!/, '');
        var params = new URLSearchParams(hash);
        if (params.get('action') === Action_1.ACTION.FILE_LISTING) {
            params.set('path', this.path);
            location.hash = "#!".concat(params.toString());
        }
    };
    FileListingClient.prototype.toggleQuickLinks = function (path) {
        var isRoot = path === rootPath;
        var parentEl = document.getElementById(parentDirLinkBox);
        if (parentEl) {
            parentEl.classList.toggle('hidden', isRoot);
        }
        var rootEl = document.getElementById(rootDirLinkBox);
        if (rootEl) {
            rootEl.classList.toggle('hidden', isRoot);
        }
        var isTemp = path === tempPath;
        var tempEl = document.getElementById(tempDirLinkBox);
        if (tempEl) {
            tempEl.classList.toggle('hidden', isTemp);
        }
        var isStorage = path === storagePath;
        var storageEl = document.getElementById(storageDirLinkBox);
        if (storageEl) {
            storageEl.classList.toggle('hidden', isStorage);
        }
    };
    FileListingClient.prototype.handleReply = function (channel, e) {
        var data = Buffer.from(e.data);
        var reply = data.slice(0, 4).toString('ascii');
        switch (reply) {
            case protocol_1.default.DENT:
                var stat = data.slice(4);
                var mode = stat.readUInt32LE(0);
                var size = stat.readUInt32LE(4);
                var mtime = stat.readUInt32LE(8);
                var namelen = stat.readUInt32LE(12);
                var name_1 = Util_1.default.utf8ByteArrayToString(stat.slice(16, 16 + namelen));
                this.addEntry(new Entry_1.Entry(name_1, mode, size, mtime));
                return;
            case protocol_1.default.DONE:
                this.finishDownload(channel);
                return;
            case protocol_1.default.STAT: {
                var download_1 = this.downloads.get(channel);
                if (!download_1) {
                    return;
                }
                var stat_1 = data.slice(4);
                var mode_1 = stat_1.readUInt32LE(0);
                var size_1 = stat_1.readUInt32LE(4);
                var mtime_1 = stat_1.readUInt32LE(8);
                var nameString = path.basename(download_1.path);
                if (mode_1 === 0) {
                    console.error('FIXME: show error in UI');
                    console.error("Error: no entity \"".concat(download_1.path, "\""));
                    this.channels.delete(channel);
                    this.loadContent(tempPath);
                    return;
                }
                var entry = new Entry_1.Entry(nameString, mode_1, size_1, mtime_1);
                var anchor = void 0;
                var nextPath = '';
                if (!entry.isDirectory()) {
                    nextPath = this.requestedPath = path.dirname(download_1.path);
                    var row = this.addEntry(entry);
                    anchor = row ? row.getElementsByTagName('a')[0] : undefined;
                }
                this.loadContent(download_1.path, entry, anchor, nextPath);
                break;
            }
            case protocol_1.default.FAIL:
                var length_1 = data.readUInt32LE(4);
                var message = Util_1.default.utf8ByteArrayToString(data.slice(8, 8 + length_1));
                console.error(TAG, "FAIL: ".concat(message));
                return;
            case protocol_1.default.DATA:
                var download = this.downloads.get(channel);
                if (!download) {
                    return;
                }
                download.chunks.push(data.slice(4));
                download.receivedBytes += data.length - 4;
                if (download.anchor) {
                    var progressElement = download.progressEl;
                    if (!progressElement) {
                        progressElement = this.appendProgressElement(download.anchor);
                        download.progressEl = progressElement;
                    }
                    if (download.entry) {
                        var size_2 = download.entry.size;
                        var percent = (download.receivedBytes * 100) / size_2;
                        progressElement.style.width = "".concat(percent, "%");
                    }
                }
                return;
            default:
                console.error("Unexpected \"".concat(reply, "\""));
        }
    };
    FileListingClient.prototype.appendProgressElement = function (anchor) {
        var progressElement = document.createElement('span');
        progressElement.className = 'background-progress';
        var parent = anchor.parentElement;
        if (parent) {
            parent.appendChild(progressElement);
        }
        return progressElement;
    };
    FileListingClient.prototype.addEntry = function (entry) {
        if (this.requireClean) {
            this.path = this.requestedPath;
            this.requestedPath = '';
            this.clean();
            this.requireClean = false;
            this.entries.length = 0;
        }
        this.entries.push(entry);
        var entryId = (this.entries.length - 1).toString();
        if (entry.name === '.') {
            return;
        }
        if (entry.name === FileListingClient.PARENT_DIR) {
            var el = document.getElementById(parentDirLinkBox);
            if (el) {
                var a = el.children[0];
                if (a) {
                    a.setAttribute(FileListingClient.PROPERTY_ENTRY_ID, entryId);
                }
            }
            return;
        }
        var type = entry.isDirectory() ? 'dir' : entry.isSymbolicLink() ? 'link' : entry.isFile() ? 'file' : 'else';
        var date = entry.mtime.toLocaleString();
        return this.addRow(false, entry.name, type, entry.size.toString(), date, entryId);
    };
    FileListingClient.prototype.addRow = function (push, name, typeClass, size, date, entryId) {
        if (size === void 0) { size = ''; }
        if (date === void 0) { date = ''; }
        if (entryId === void 0) { entryId = ''; }
        var row = document.createElement('tr');
        row.id = "entry-".concat(name);
        row.classList.add('entry-row');
        var nameTd = document.createElement('td');
        nameTd.classList.add('entry-name');
        var link = document.createElement('a');
        link.classList.add('icon', typeClass);
        link.setAttribute(FileListingClient.PROPERTY_NAME, name);
        if (entryId) {
            link.setAttribute(FileListingClient.PROPERTY_ENTRY_ID, entryId);
        }
        link.innerText = name;
        nameTd.appendChild(link);
        row.appendChild(nameTd);
        if (push) {
            nameTd.colSpan = 3;
            link.classList.add('push');
        }
        else {
            var href = new URL(location.href);
            var hash = new URLSearchParams(href.hash.replace(/^#!/, ''));
            hash.set('path', path.join(this.path, name));
            href.hash = "#!".concat(hash.toString());
            link.href = href.toString();
            var sizeTd = document.createElement('td');
            sizeTd.classList.add('entry-size');
            sizeTd.innerText = size;
            row.appendChild(sizeTd);
            var mtimeTd = document.createElement('td');
            mtimeTd.classList.add('entry-time');
            mtimeTd.innerText = date;
            row.appendChild(mtimeTd);
        }
        if (push || !this.tableBody.children.length) {
            this.tableBody.insertBefore(row, this.tableBody.firstChild);
        }
        else {
            this.tableBody.appendChild(row);
        }
        return row;
    };
    FileListingClient.prototype.finishDownload = function (channel) {
        var download = this.downloads.get(channel);
        if (!download) {
            return;
        }
        this.downloads.delete(channel);
        var el = download.progressEl;
        if (el) {
            this.cleanProgress(el);
        }
        var name;
        if (download.entry && download.entry.isFile()) {
            name = download.entry.name;
        }
        else {
            name = path.basename(this.path);
        }
        if (download.pathToLoadAfter) {
            this.channels.delete(channel);
            this.loadContent(download.pathToLoadAfter);
        }
        var file = new File(download.chunks, name, { type: 'application/octet-stream' });
        var a = document.createElement('a');
        a.href = URL.createObjectURL(file);
        a.download = "".concat(name);
        a.click();
    };
    FileListingClient.prototype.cleanProgress = function (el) {
        el.classList.add('finished');
        setTimeout(function () {
            var parent = el.parentElement;
            if (parent) {
                parent.removeChild(el);
            }
        });
    };
    FileListingClient.prototype.getPath = function () {
        return this.path;
    };
    FileListingClient.prototype.reload = function () {
        this.loadContent(this.path);
    };
    FileListingClient.prototype.supportMultiplexing = function () {
        return true;
    };
    FileListingClient.prototype.getChannelInitData = function () {
        var serial = Util_1.default.stringToUtf8ByteArray(this.serial);
        var buffer = Buffer.alloc(4 + 4 + serial.byteLength);
        buffer.write(ChannelCode_1.ChannelCode.FSLS, 'ascii');
        buffer.writeUInt32LE(serial.length, 4);
        buffer.set(serial, 8);
        return buffer;
    };
    FileListingClient.ACTION = Action_1.ACTION.FILE_LISTING;
    FileListingClient.PARENT_DIR = '..';
    FileListingClient.PROPERTY_NAME = 'data-name';
    FileListingClient.PROPERTY_ENTRY_ID = 'data-entry-id';
    FileListingClient.REMOVE_ROW_TIMEOUT = 2000;
    return FileListingClient;
}(ManagerClient_1.ManagerClient));
exports.FileListingClient = FileListingClient;
var templateObject_1, templateObject_2;


/***/ }),

/***/ "./src/app/googDevice/client/ShellClient.ts":
/*!**************************************************!*\
  !*** ./src/app/googDevice/client/ShellClient.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellClient = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! xterm/css/xterm.css */ "./node_modules/xterm/css/xterm.css");
var ManagerClient_1 = __webpack_require__(/*! ../../client/ManagerClient */ "./src/app/client/ManagerClient.ts");
var xterm_1 = __webpack_require__(/*! xterm */ "./node_modules/xterm/lib/xterm.js");
var xterm_addon_attach_1 = __webpack_require__(/*! xterm-addon-attach */ "./node_modules/xterm-addon-attach/lib/xterm-addon-attach.js");
var xterm_addon_fit_1 = __webpack_require__(/*! xterm-addon-fit */ "./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var BaseDeviceTracker_1 = __webpack_require__(/*! ../../client/BaseDeviceTracker */ "./src/app/client/BaseDeviceTracker.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var ChannelCode_1 = __webpack_require__(/*! ../../../common/ChannelCode */ "./src/common/ChannelCode.ts");
var TAG = '[ShellClient]';
var ShellClient = (function (_super) {
    tslib_1.__extends(ShellClient, _super);
    function ShellClient(params) {
        var _this = _super.call(this, params) || this;
        _this.onSocketOpen = function () {
            _this.startShell(_this.udid);
        };
        _this.udid = params.udid;
        _this.openNewConnection();
        _this.setTitle("Shell ".concat(_this.udid));
        _this.setBodyClass('shell');
        if (!_this.ws) {
            throw Error('No WebSocket');
        }
        _this.term = new xterm_1.Terminal();
        _this.term.loadAddon(new xterm_addon_attach_1.AttachAddon(_this.ws));
        _this.fitAddon = new xterm_addon_fit_1.FitAddon();
        _this.term.loadAddon(_this.fitAddon);
        _this.escapedUdid = Util_1.default.escapeUdid(_this.udid);
        _this.term.open(ShellClient.getOrCreateContainer(_this.escapedUdid));
        _this.updateTerminalSize();
        _this.term.focus();
        return _this;
    }
    ShellClient.start = function (params) {
        return new ShellClient(params);
    };
    ShellClient.prototype.supportMultiplexing = function () {
        return true;
    };
    ShellClient.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var action = typedParams.action;
        if (action !== Action_1.ACTION.SHELL) {
            throw Error('Incorrect action');
        }
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { action: action, udid: Util_1.default.parseString(params, 'udid', true) });
    };
    ShellClient.prototype.onSocketClose = function (event) {
        console.log(TAG, "Connection closed: ".concat(event.reason));
        this.term.dispose();
    };
    ShellClient.prototype.onSocketMessage = function () {
    };
    ShellClient.prototype.startShell = function (udid) {
        if (!udid || !this.ws || this.ws.readyState !== this.ws.OPEN) {
            return;
        }
        var _a = this.fitAddon.proposeDimensions(), rows = _a.rows, cols = _a.cols;
        var message = {
            id: 1,
            type: 'shell',
            data: {
                type: 'start',
                rows: rows,
                cols: cols,
                udid: udid,
            },
        };
        this.ws.send(JSON.stringify(message));
    };
    ShellClient.getOrCreateContainer = function (udid) {
        var container = document.getElementById(udid);
        if (!container) {
            container = document.createElement('div');
            container.className = 'terminal-container';
            container.id = udid;
            document.body.appendChild(container);
        }
        return container;
    };
    ShellClient.prototype.updateTerminalSize = function () {
        var term = this.term;
        var terminalContainer = ShellClient.getOrCreateContainer(this.escapedUdid);
        var _a = this.fitAddon.proposeDimensions(), rows = _a.rows, cols = _a.cols;
        var width = (cols * term._core._renderService.dimensions.actualCellWidth + term._core.viewport.scrollBarWidth).toFixed(2) + 'px';
        var height = (rows * term._core._renderService.dimensions.actualCellHeight).toFixed(2) + 'px';
        terminalContainer.style.width = width;
        terminalContainer.style.height = height;
        this.fitAddon.fit();
    };
    ShellClient.createEntryForDeviceList = function (descriptor, blockClass, params) {
        if (descriptor.state !== 'device') {
            return;
        }
        var entry = document.createElement('div');
        entry.classList.add('shell', blockClass);
        entry.appendChild(BaseDeviceTracker_1.BaseDeviceTracker.buildLink({
            action: Action_1.ACTION.SHELL,
            udid: descriptor.udid,
        }, 'shell', params));
        return entry;
    };
    ShellClient.prototype.getChannelInitData = function () {
        var buffer = Buffer.alloc(4);
        buffer.write(ChannelCode_1.ChannelCode.SHEL, 'ascii');
        return buffer;
    };
    ShellClient.ACTION = Action_1.ACTION.SHELL;
    return ShellClient;
}(ManagerClient_1.ManagerClient));
exports.ShellClient = ShellClient;


/***/ }),

/***/ "./src/app/googDevice/client/StreamClientScrcpy.ts":
/*!*********************************************************!*\
  !*** ./src/app/googDevice/client/StreamClientScrcpy.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StreamClientScrcpy = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BaseClient_1 = __webpack_require__(/*! ../../client/BaseClient */ "./src/app/client/BaseClient.ts");
var GoogMoreBox_1 = __webpack_require__(/*! ../toolbox/GoogMoreBox */ "./src/app/googDevice/toolbox/GoogMoreBox.ts");
var GoogToolBox_1 = __webpack_require__(/*! ../toolbox/GoogToolBox */ "./src/app/googDevice/toolbox/GoogToolBox.ts");
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../VideoSettings */ "./src/app/VideoSettings.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Size */ "./src/app/Size.ts"));
var CommandControlMessage_1 = __webpack_require__(/*! ../../controlMessage/CommandControlMessage */ "./src/app/controlMessage/CommandControlMessage.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var FilePushHandler_1 = tslib_1.__importDefault(__webpack_require__(/*! ../filePush/FilePushHandler */ "./src/app/googDevice/filePush/FilePushHandler.ts"));
var DragAndPushLogger_1 = tslib_1.__importDefault(__webpack_require__(/*! ../DragAndPushLogger */ "./src/app/googDevice/DragAndPushLogger.ts"));
var KeyInputHandler_1 = __webpack_require__(/*! ../KeyInputHandler */ "./src/app/googDevice/KeyInputHandler.ts");
var BasePlayer_1 = __webpack_require__(/*! ../../player/BasePlayer */ "./src/app/player/BasePlayer.ts");
var ConfigureScrcpy_1 = __webpack_require__(/*! ./ConfigureScrcpy */ "./src/app/googDevice/client/ConfigureScrcpy.ts");
var DeviceTracker_1 = __webpack_require__(/*! ./DeviceTracker */ "./src/app/googDevice/client/DeviceTracker.ts");
var ControlCenterCommand_1 = __webpack_require__(/*! ../../../common/ControlCenterCommand */ "./src/common/ControlCenterCommand.ts");
var HtmlTag_1 = __webpack_require__(/*! ../../ui/HtmlTag */ "./src/app/ui/HtmlTag.ts");
var FeaturedInteractionHandler_1 = __webpack_require__(/*! ../../interactionHandler/FeaturedInteractionHandler */ "./src/app/interactionHandler/FeaturedInteractionHandler.ts");
var Attribute_1 = __webpack_require__(/*! ../../Attribute */ "./src/app/Attribute.ts");
var HostTracker_1 = __webpack_require__(/*! ../../client/HostTracker */ "./src/app/client/HostTracker.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var StreamReceiverScrcpy_1 = __webpack_require__(/*! ./StreamReceiverScrcpy */ "./src/app/googDevice/client/StreamReceiverScrcpy.ts");
var ScrcpyFilePushStream_1 = __webpack_require__(/*! ../filePush/ScrcpyFilePushStream */ "./src/app/googDevice/filePush/ScrcpyFilePushStream.ts");
var TAG = '[StreamClientScrcpy]';
var StreamClientScrcpy = (function (_super) {
    tslib_1.__extends(StreamClientScrcpy, _super);
    function StreamClientScrcpy(params, streamReceiver, player, fitToScreen, videoSettings) {
        var _this = _super.call(this, params) || this;
        _this.deviceName = '';
        _this.clientId = -1;
        _this.clientsCount = -1;
        _this.joinedStream = false;
        _this.OnDeviceMessage = function (message) {
            if (_this.moreBox) {
                _this.moreBox.OnDeviceMessage(message);
            }
        };
        _this.onVideo = function (data) {
            if (!_this.player) {
                return;
            }
            var STATE = BasePlayer_1.BasePlayer.STATE;
            if (_this.player.getState() === STATE.PAUSED) {
                _this.player.play();
            }
            if (_this.player.getState() === STATE.PLAYING) {
                _this.player.pushFrame(new Uint8Array(data));
            }
        };
        _this.onClientsStats = function (stats) {
            _this.deviceName = stats.deviceName;
            _this.clientId = stats.clientId;
        };
        _this.onDisplayInfo = function (infoArray) {
            var _a;
            if (!_this.player) {
                return;
            }
            var currentSettings = _this.player.getVideoSettings();
            var displayId = currentSettings.displayId;
            var info = infoArray.find(function (value) {
                return value.displayInfo.displayId === displayId;
            });
            if (!info) {
                return;
            }
            if (_this.player.getState() === BasePlayer_1.BasePlayer.STATE.PAUSED) {
                _this.player.play();
            }
            var videoSettings = info.videoSettings, screenInfo = info.screenInfo;
            _this.player.setDisplayInfo(info.displayInfo);
            if (typeof _this.fitToScreen !== 'boolean') {
                _this.fitToScreen = _this.player.getFitToScreenStatus();
            }
            if (_this.fitToScreen) {
                var newBounds = _this.getMaxSize();
                if (newBounds) {
                    currentSettings = StreamClientScrcpy.createVideoSettingsWithBounds(currentSettings, newBounds);
                    _this.player.setVideoSettings(currentSettings, _this.fitToScreen, false);
                }
            }
            if (!videoSettings || !screenInfo) {
                _this.joinedStream = true;
                _this.sendMessage(CommandControlMessage_1.CommandControlMessage.createSetVideoSettingsCommand(currentSettings));
                return;
            }
            _this.clientsCount = info.connectionCount;
            var min = VideoSettings_1.default.copy(videoSettings);
            var oldInfo = _this.player.getScreenInfo();
            if (!screenInfo.equals(oldInfo)) {
                _this.player.setScreenInfo(screenInfo);
            }
            if (!videoSettings.equals(currentSettings)) {
                _this.applyNewVideoSettings(videoSettings, videoSettings.equals(_this.requestedVideoSettings));
            }
            if (!oldInfo) {
                var bounds = currentSettings.bounds;
                var videoSize = screenInfo.videoSize;
                var onlyOneClient = _this.clientsCount === 0;
                var smallerThenCurrent = bounds && (bounds.width < videoSize.width || bounds.height < videoSize.height);
                if (onlyOneClient || smallerThenCurrent) {
                    min = currentSettings;
                }
                var minBounds = (_a = currentSettings.bounds) === null || _a === void 0 ? void 0 : _a.intersect(min.bounds);
                if (minBounds && !minBounds.equals(min.bounds)) {
                    min = StreamClientScrcpy.createVideoSettingsWithBounds(min, minBounds);
                }
            }
            if (!min.equals(videoSettings) || !_this.joinedStream) {
                _this.joinedStream = true;
                _this.sendMessage(CommandControlMessage_1.CommandControlMessage.createSetVideoSettingsCommand(min));
            }
        };
        _this.onDisconnected = function () {
            var _a, _b;
            _this.streamReceiver.off('deviceMessage', _this.OnDeviceMessage);
            _this.streamReceiver.off('video', _this.onVideo);
            _this.streamReceiver.off('clientsStats', _this.onClientsStats);
            _this.streamReceiver.off('displayInfo', _this.onDisplayInfo);
            _this.streamReceiver.off('disconnected', _this.onDisconnected);
            (_a = _this.filePushHandler) === null || _a === void 0 ? void 0 : _a.release();
            _this.filePushHandler = undefined;
            (_b = _this.touchHandler) === null || _b === void 0 ? void 0 : _b.release();
            _this.touchHandler = undefined;
        };
        if (streamReceiver) {
            _this.streamReceiver = streamReceiver;
        }
        else {
            _this.streamReceiver = new StreamReceiverScrcpy_1.StreamReceiverScrcpy(_this.params);
        }
        var _a = _this.params, udid = _a.udid, playerName = _a.player;
        _this.startStream({ udid: udid, player: player, playerName: playerName, fitToScreen: fitToScreen, videoSettings: videoSettings });
        _this.setBodyClass('stream');
        return _this;
    }
    StreamClientScrcpy.registerPlayer = function (playerClass) {
        if (playerClass.isSupported()) {
            this.players.set(playerClass.playerFullName, playerClass);
        }
    };
    StreamClientScrcpy.getPlayers = function () {
        return Array.from(this.players.values());
    };
    StreamClientScrcpy.getPlayerClass = function (playerName) {
        var e_1, _a;
        var playerClass;
        try {
            for (var _b = tslib_1.__values(StreamClientScrcpy.players.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var value = _c.value;
                if (value.playerFullName === playerName || value.playerCodeName === playerName) {
                    playerClass = value;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return playerClass;
    };
    StreamClientScrcpy.createPlayer = function (playerName, udid, displayInfo) {
        var playerClass = this.getPlayerClass(playerName);
        if (!playerClass) {
            return;
        }
        return new playerClass(udid, displayInfo);
    };
    StreamClientScrcpy.getFitToScreen = function (playerName, udid, displayInfo) {
        var playerClass = this.getPlayerClass(playerName);
        if (!playerClass) {
            return false;
        }
        return playerClass.getFitToScreenStatus(udid, displayInfo);
    };
    StreamClientScrcpy.start = function (query, streamReceiver, player, fitToScreen, videoSettings) {
        if (query instanceof URLSearchParams) {
            var params = StreamClientScrcpy.parseParameters(query);
            return new StreamClientScrcpy(params, streamReceiver, player, fitToScreen, videoSettings);
        }
        else {
            return new StreamClientScrcpy(query, streamReceiver, player, fitToScreen, videoSettings);
        }
    };
    StreamClientScrcpy.createVideoSettingsWithBounds = function (old, newBounds) {
        return new VideoSettings_1.default({
            crop: old.crop,
            bitrate: old.bitrate,
            bounds: newBounds,
            maxFps: old.maxFps,
            iFrameInterval: old.iFrameInterval,
            sendFrameMeta: old.sendFrameMeta,
            lockedVideoOrientation: old.lockedVideoOrientation,
            displayId: old.displayId,
            codecOptions: old.codecOptions,
            encoderName: old.encoderName,
        });
    };
    StreamClientScrcpy.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var action = typedParams.action;
        if (action !== Action_1.ACTION.STREAM_SCRCPY) {
            throw Error('Incorrect action');
        }
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { action: action, player: Util_1.default.parseString(params, 'player', true), udid: Util_1.default.parseString(params, 'udid', true), ws: Util_1.default.parseString(params, 'ws', true) });
    };
    StreamClientScrcpy.prototype.startStream = function (_a) {
        var _this = this;
        var udid = _a.udid, player = _a.player, playerName = _a.playerName, videoSettings = _a.videoSettings, fitToScreen = _a.fitToScreen;
        if (!udid) {
            throw Error("Invalid udid value: \"".concat(udid, "\""));
        }
        this.fitToScreen = fitToScreen;
        if (!player) {
            if (typeof playerName !== 'string') {
                throw Error('Must provide BasePlayer instance or playerName');
            }
            var displayInfo = void 0;
            if (this.streamReceiver && videoSettings) {
                displayInfo = this.streamReceiver.getDisplayInfo(videoSettings.displayId);
            }
            var p = StreamClientScrcpy.createPlayer(playerName, udid, displayInfo);
            if (!p) {
                throw Error("Unsupported player: \"".concat(playerName, "\""));
            }
            if (typeof fitToScreen !== 'boolean') {
                fitToScreen = StreamClientScrcpy.getFitToScreen(playerName, udid, displayInfo);
            }
            player = p;
        }
        this.player = player;
        this.setTouchListeners(player);
        if (!videoSettings) {
            videoSettings = player.getVideoSettings();
        }
        var deviceView = document.createElement('div');
        deviceView.className = 'device-view';
        var stop = function (ev) {
            if (ev && ev instanceof Event && ev.type === 'error') {
                console.error(TAG, ev);
            }
            var parent;
            parent = deviceView.parentElement;
            if (parent) {
                parent.removeChild(deviceView);
            }
            parent = moreBox.parentElement;
            if (parent) {
                parent.removeChild(moreBox);
            }
            _this.streamReceiver.stop();
            if (_this.player) {
                _this.player.stop();
            }
        };
        var googMoreBox = (this.moreBox = new GoogMoreBox_1.GoogMoreBox(udid, player, this));
        var moreBox = googMoreBox.getHolderElement();
        googMoreBox.setOnStop(stop);
        var googToolBox = GoogToolBox_1.GoogToolBox.createToolBox(udid, player, this, moreBox);
        this.controlButtons = googToolBox.getHolderElement();
        deviceView.appendChild(this.controlButtons);
        var video = document.createElement('div');
        video.className = 'video';
        deviceView.appendChild(video);
        deviceView.appendChild(moreBox);
        player.setParent(video);
        player.pause();
        document.body.appendChild(deviceView);
        if (fitToScreen) {
            var newBounds = this.getMaxSize();
            if (newBounds) {
                videoSettings = StreamClientScrcpy.createVideoSettingsWithBounds(videoSettings, newBounds);
            }
        }
        this.applyNewVideoSettings(videoSettings, false);
        var element = player.getTouchableElement();
        var logger = new DragAndPushLogger_1.default(element);
        this.filePushHandler = new FilePushHandler_1.default(element, new ScrcpyFilePushStream_1.ScrcpyFilePushStream(this.streamReceiver));
        this.filePushHandler.addEventListener(logger);
        var streamReceiver = this.streamReceiver;
        streamReceiver.on('deviceMessage', this.OnDeviceMessage);
        streamReceiver.on('video', this.onVideo);
        streamReceiver.on('clientsStats', this.onClientsStats);
        streamReceiver.on('displayInfo', this.onDisplayInfo);
        streamReceiver.on('disconnected', this.onDisconnected);
        console.log(TAG, player.getName(), udid);
    };
    StreamClientScrcpy.prototype.sendMessage = function (message) {
        this.streamReceiver.sendEvent(message);
    };
    StreamClientScrcpy.prototype.getDeviceName = function () {
        return this.deviceName;
    };
    StreamClientScrcpy.prototype.setHandleKeyboardEvents = function (enabled) {
        if (enabled) {
            KeyInputHandler_1.KeyInputHandler.addEventListener(this);
        }
        else {
            KeyInputHandler_1.KeyInputHandler.removeEventListener(this);
        }
    };
    StreamClientScrcpy.prototype.onKeyEvent = function (event) {
        this.sendMessage(event);
    };
    StreamClientScrcpy.prototype.sendNewVideoSetting = function (videoSettings) {
        this.requestedVideoSettings = videoSettings;
        this.sendMessage(CommandControlMessage_1.CommandControlMessage.createSetVideoSettingsCommand(videoSettings));
    };
    StreamClientScrcpy.prototype.getClientId = function () {
        return this.clientId;
    };
    StreamClientScrcpy.prototype.getClientsCount = function () {
        return this.clientsCount;
    };
    StreamClientScrcpy.prototype.getMaxSize = function () {
        if (!this.controlButtons) {
            return;
        }
        var body = document.body;
        var width = (body.clientWidth - this.controlButtons.clientWidth) & ~15;
        var height = body.clientHeight & ~15;
        return new Size_1.default(width, height);
    };
    StreamClientScrcpy.prototype.setTouchListeners = function (player) {
        if (this.touchHandler) {
            return;
        }
        this.touchHandler = new FeaturedInteractionHandler_1.FeaturedInteractionHandler(player, this);
    };
    StreamClientScrcpy.prototype.applyNewVideoSettings = function (videoSettings, saveToStorage) {
        var fitToScreen = false;
        if (videoSettings.bounds && videoSettings.bounds.equals(this.getMaxSize())) {
            fitToScreen = true;
        }
        if (this.player) {
            this.player.setVideoSettings(videoSettings, fitToScreen, saveToStorage);
        }
    };
    StreamClientScrcpy.createEntryForDeviceList = function (descriptor, blockClass, fullName, params) {
        var hasPid = descriptor.pid !== -1;
        if (hasPid) {
            var configureButtonId = "configure_".concat(Util_1.default.escapeUdid(descriptor.udid));
            var e = (0, HtmlTag_1.html)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["<div class=\"stream ", "\">\n                <button\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    id=\"", "\"\n                    class=\"active action-button\"\n                >\n                    Configure stream\n                </button>\n            </div>"], ["<div class=\"stream ", "\">\n                <button\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    ", "=\"", "\"\n                    id=\"", "\"\n                    class=\"active action-button\"\n                >\n                    Configure stream\n                </button>\n            </div>"])), blockClass, Attribute_1.Attribute.UDID, descriptor.udid, Attribute_1.Attribute.COMMAND, ControlCenterCommand_1.ControlCenterCommand.CONFIGURE_STREAM, Attribute_1.Attribute.FULL_NAME, fullName, Attribute_1.Attribute.SECURE, params.secure, Attribute_1.Attribute.HOSTNAME, params.hostname, Attribute_1.Attribute.PORT, params.port, Attribute_1.Attribute.PATHNAME, params.pathname, Attribute_1.Attribute.USE_PROXY, params.useProxy, configureButtonId);
            var a = e.content.getElementById(configureButtonId);
            a && (a.onclick = this.onConfigureStreamClick);
            return e.content;
        }
        return;
    };
    StreamClientScrcpy.ACTION = 'stream';
    StreamClientScrcpy.players = new Map();
    StreamClientScrcpy.onConfigureStreamClick = function (event) {
        var button = event.currentTarget;
        var udid = Util_1.default.parseStringEnv(button.getAttribute(Attribute_1.Attribute.UDID) || '');
        var fullName = button.getAttribute(Attribute_1.Attribute.FULL_NAME);
        var secure = Util_1.default.parseBooleanEnv(button.getAttribute(Attribute_1.Attribute.SECURE) || undefined) || false;
        var hostname = Util_1.default.parseStringEnv(button.getAttribute(Attribute_1.Attribute.HOSTNAME) || undefined) || '';
        var port = Util_1.default.parseIntEnv(button.getAttribute(Attribute_1.Attribute.PORT) || undefined);
        var pathname = Util_1.default.parseStringEnv(button.getAttribute(Attribute_1.Attribute.PATHNAME) || undefined) || '';
        var useProxy = Util_1.default.parseBooleanEnv(button.getAttribute(Attribute_1.Attribute.USE_PROXY) || undefined);
        if (!udid) {
            throw Error("Invalid udid value: \"".concat(udid, "\""));
        }
        if (typeof port !== 'number') {
            throw Error("Invalid port type: ".concat(typeof port));
        }
        var tracker = DeviceTracker_1.DeviceTracker.getInstance({
            type: 'android',
            secure: secure,
            hostname: hostname,
            port: port,
            pathname: pathname,
            useProxy: useProxy,
        });
        var descriptor = tracker.getDescriptorByUdid(udid);
        if (!descriptor) {
            return;
        }
        event.preventDefault();
        var elements = document.getElementsByName("".concat(DeviceTracker_1.DeviceTracker.AttributePrefixInterfaceSelectFor).concat(fullName));
        if (!elements || !elements.length) {
            return;
        }
        var select = elements[0];
        var optionElement = select.options[select.selectedIndex];
        var ws = optionElement.getAttribute(Attribute_1.Attribute.URL);
        var name = optionElement.getAttribute(Attribute_1.Attribute.NAME);
        if (!ws || !name) {
            return;
        }
        var options = {
            udid: udid,
            ws: ws,
            player: '',
            action: Action_1.ACTION.STREAM_SCRCPY,
            secure: secure,
            hostname: hostname,
            port: port,
            pathname: pathname,
            useProxy: useProxy,
        };
        var dialog = new ConfigureScrcpy_1.ConfigureScrcpy(tracker, descriptor, options);
        dialog.on('closed', StreamClientScrcpy.onConfigureDialogClosed);
    };
    StreamClientScrcpy.onConfigureDialogClosed = function (event) {
        event.dialog.off('closed', StreamClientScrcpy.onConfigureDialogClosed);
        if (event.result) {
            HostTracker_1.HostTracker.getInstance().destroy();
        }
    };
    return StreamClientScrcpy;
}(BaseClient_1.BaseClient));
exports.StreamClientScrcpy = StreamClientScrcpy;
var templateObject_1;


/***/ }),

/***/ "./src/app/googDevice/client/StreamReceiverScrcpy.ts":
/*!***********************************************************!*\
  !*** ./src/app/googDevice/client/StreamReceiverScrcpy.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StreamReceiverScrcpy = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var StreamReceiver_1 = __webpack_require__(/*! ../../client/StreamReceiver */ "./src/app/client/StreamReceiver.ts");
var Action_1 = __webpack_require__(/*! ../../../common/Action */ "./src/common/Action.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Util */ "./src/app/Util.ts"));
var StreamReceiverScrcpy = (function (_super) {
    tslib_1.__extends(StreamReceiverScrcpy, _super);
    function StreamReceiverScrcpy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StreamReceiverScrcpy.parseParameters = function (params) {
        var typedParams = _super.parseParameters.call(this, params);
        var action = typedParams.action;
        if (action !== Action_1.ACTION.STREAM_SCRCPY) {
            throw Error('Incorrect action');
        }
        return tslib_1.__assign(tslib_1.__assign({}, typedParams), { action: action, udid: Util_1.default.parseString(params, 'udid', true), ws: Util_1.default.parseString(params, 'ws', true), player: Util_1.default.parseString(params, 'player', true) });
    };
    StreamReceiverScrcpy.prototype.buildDirectWebSocketUrl = function () {
        return new URL(this.params.ws);
    };
    return StreamReceiverScrcpy;
}(StreamReceiver_1.StreamReceiver));
exports.StreamReceiverScrcpy = StreamReceiverScrcpy;


/***/ }),

/***/ "./src/app/googDevice/filePush/AdbkitFilePushStream.ts":
/*!*************************************************************!*\
  !*** ./src/app/googDevice/filePush/AdbkitFilePushStream.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdbkitFilePushStream = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var FilePushStream_1 = __webpack_require__(/*! ./FilePushStream */ "./src/app/googDevice/filePush/FilePushStream.ts");
var CommandControlMessage_1 = __webpack_require__(/*! ../../controlMessage/CommandControlMessage */ "./src/app/controlMessage/CommandControlMessage.ts");
var FilePushResponseStatus_1 = __webpack_require__(/*! ./FilePushResponseStatus */ "./src/app/googDevice/filePush/FilePushResponseStatus.ts");
var protocol_1 = tslib_1.__importDefault(__webpack_require__(/*! @dead50f7/adbkit/lib/adb/protocol */ "./node_modules/@dead50f7/adbkit/lib/adb/protocol.js"));
var path = tslib_1.__importStar(__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js"));
var FilePushHandler_1 = tslib_1.__importDefault(__webpack_require__(/*! ./FilePushHandler */ "./src/app/googDevice/filePush/FilePushHandler.ts"));
var AdbkitFilePushStream = (function (_super) {
    tslib_1.__extends(AdbkitFilePushStream, _super);
    function AdbkitFilePushStream(socket, fileListingClient) {
        var _this = _super.call(this) || this;
        _this.socket = socket;
        _this.fileListingClient = fileListingClient;
        _this.channels = new Map();
        return _this;
    }
    AdbkitFilePushStream.prototype.hasConnection = function () {
        return this.socket.readyState == this.socket.OPEN;
    };
    AdbkitFilePushStream.prototype.isAllowedFile = function () {
        return true;
    };
    AdbkitFilePushStream.prototype.getChannel = function (id) {
        var channel = this.channels.get(id);
        var code = FilePushResponseStatus_1.FilePushResponseStatus.NO_ERROR;
        if (!channel) {
            code = FilePushResponseStatus_1.FilePushResponseStatus.ERROR_UNKNOWN_ID;
        }
        if (code) {
            this.emit('response', { id: id, code: code });
            return;
        }
        return channel;
    };
    AdbkitFilePushStream.prototype.sendEventAppend = function (_a) {
        var id = _a.id, chunk = _a.chunk;
        var appendParams = { id: id, chunk: chunk, state: CommandControlMessage_1.FilePushState.APPEND };
        var channel = this.getChannel(id);
        if (!channel) {
            return;
        }
        channel.send(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(appendParams).toBuffer());
    };
    AdbkitFilePushStream.prototype.sendEventFinish = function (_a) {
        var id = _a.id;
        var finishParams = { id: id, state: CommandControlMessage_1.FilePushState.FINISH };
        var channel = this.getChannel(id);
        if (!channel) {
            return;
        }
        channel.send(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(finishParams).toBuffer());
    };
    AdbkitFilePushStream.prototype.sendEventNew = function (_a) {
        var _this = this;
        var id = _a.id;
        var pushId = id;
        var newParams = { id: id, state: CommandControlMessage_1.FilePushState.NEW };
        var channel = this.socket.createChannel(Buffer.from(protocol_1.default.SEND));
        var onMessage = function (event) {
            var offset = 0;
            var buffer = Buffer.from(event.data);
            var id = buffer.readInt16BE(offset);
            offset += 2;
            var code = buffer.readInt8(offset);
            if (code === FilePushResponseStatus_1.FilePushResponseStatus.NEW_PUSH_ID) {
                _this.channels.set(id, channel);
                pushId = id;
            }
            _this.emit('response', { id: id, code: code });
        };
        var onClose = function (event) {
            if (!event.wasClean) {
                var code = 4000 - event.code;
                _this.emit('error', {
                    id: pushId,
                    error: new Error(FilePushHandler_1.default.getErrorMessage(code, event.reason)),
                });
            }
            channel.removeEventListener('message', onMessage);
            channel.removeEventListener('close', onClose);
        };
        channel.addEventListener('message', onMessage);
        channel.addEventListener('close', onClose);
        channel.send(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(newParams).toBuffer());
    };
    AdbkitFilePushStream.prototype.sendEventStart = function (_a) {
        var id = _a.id, fileName = _a.fileName, fileSize = _a.fileSize;
        var filePath = path.join(this.fileListingClient.getPath(), fileName);
        var startParams = { id: id, fileName: filePath, fileSize: fileSize, state: CommandControlMessage_1.FilePushState.START };
        var channel = this.getChannel(id);
        if (!channel) {
            return;
        }
        channel.send(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(startParams).toBuffer());
    };
    AdbkitFilePushStream.prototype.release = function () {
        this.channels.forEach(function (channel) {
            channel.close();
        });
    };
    return AdbkitFilePushStream;
}(FilePushStream_1.FilePushStream));
exports.AdbkitFilePushStream = AdbkitFilePushStream;


/***/ }),

/***/ "./src/app/googDevice/filePush/FilePushHandler.ts":
/*!********************************************************!*\
  !*** ./src/app/googDevice/filePush/FilePushHandler.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var DragAndDropHandler_1 = __webpack_require__(/*! ../DragAndDropHandler */ "./src/app/googDevice/DragAndDropHandler.ts");
var FilePushResponseStatus_1 = __webpack_require__(/*! ./FilePushResponseStatus */ "./src/app/googDevice/filePush/FilePushResponseStatus.ts");
var TAG = '[FilePushHandler]';
var FilePushHandler = (function () {
    function FilePushHandler(element, filePushStream) {
        var _this = this;
        this.element = element;
        this.filePushStream = filePushStream;
        this.responseWaiter = new Map();
        this.listeners = new Set();
        this.pushIdFileNameMap = new Map();
        this.onStreamError = function (_a) {
            var pushId = _a.id, error = _a.error;
            var fileName = _this.pushIdFileNameMap.get(pushId) || 'Unknown file';
            _this.sendUpdate({ pushId: pushId, fileName: fileName, message: error.message, progress: -1, error: true, finished: true });
        };
        this.onStreamResponse = function (response) {
            var func;
            var value;
            var code = response.code, idInResponse = response.id;
            var id = code === FilePushResponseStatus_1.FilePushResponseStatus.NEW_PUSH_ID ? FilePushHandler.REQUEST_NEW_PUSH_ID : response.id;
            var resolve = _this.responseWaiter.get(id);
            if (!resolve) {
                console.warn(TAG, "Unexpected push id: \"".concat(id, "\", ").concat(JSON.stringify(response)));
                return;
            }
            if (Array.isArray(resolve)) {
                func = resolve.shift();
                if (!resolve.length) {
                    _this.responseWaiter.delete(id);
                }
            }
            else {
                func = resolve;
                _this.responseWaiter.delete(id);
            }
            if (code === FilePushResponseStatus_1.FilePushResponseStatus.NEW_PUSH_ID) {
                value = { id: id, code: idInResponse };
            }
            else {
                value = { id: id, code: code };
            }
            func(value);
        };
        DragAndDropHandler_1.DragAndDropHandler.addEventListener(this);
        filePushStream.on('response', this.onStreamResponse);
        filePushStream.on('error', this.onStreamError);
    }
    FilePushHandler.prototype.sendUpdate = function (params) {
        if (params.error) {
            this.pushIdFileNameMap.delete(params.pushId);
        }
        this.listeners.forEach(function (listener) {
            listener.onFilePushUpdate(params);
        });
    };
    FilePushHandler.prototype.logError = function (pushId, fileName, code) {
        var msg = RESPONSE_CODES.get(code) || "Unknown error (".concat(code, ")");
        this.sendUpdate({ pushId: pushId, fileName: fileName, message: "error: \"".concat(msg, "\""), progress: -1, error: true, finished: true });
    };
    FilePushHandler.getStreamReader = function (file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var blob, reader, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, new Response(file).blob()];
                    case 1:
                        blob = _a.sent();
                        reader = blob.stream().getReader();
                        return [4, reader.read()];
                    case 2:
                        result = _a.sent();
                        return [2, { reader: reader, result: result }];
                }
            });
        });
    };
    FilePushHandler.prototype.pushFile = function (file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var start, fileName, fileSize, id, pushId, waitPromise, _a, startResponseCode, _b, reader, result, receivedBytes, processData;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        start = Date.now();
                        fileName = file.name, fileSize = file.size;
                        if (!this.filePushStream.hasConnection()) {
                            this.listeners.forEach(function (listener) {
                                listener.onError('WebSocket is not ready');
                            });
                            return [2];
                        }
                        id = FilePushHandler.REQUEST_NEW_PUSH_ID;
                        this.sendUpdate({ pushId: id, fileName: fileName, message: 'begins...', progress: 0, error: false, finished: false });
                        this.filePushStream.sendEventNew({ id: id });
                        return [4, this.waitForResponse(id)];
                    case 1:
                        pushId = (_c.sent()).code;
                        if (pushId <= 0) {
                            return [2, this.logError(pushId, fileName, pushId)];
                        }
                        this.pushIdFileNameMap.set(pushId, fileName);
                        waitPromise = this.waitForResponse(pushId);
                        this.filePushStream.sendEventStart({ id: pushId, fileName: fileName, fileSize: fileSize });
                        return [4, Promise.all([
                                waitPromise,
                                FilePushHandler.getStreamReader(file),
                            ])];
                    case 2:
                        _a = tslib_1.__read.apply(void 0, [_c.sent(), 2]), startResponseCode = _a[0].code, _b = _a[1], reader = _b.reader, result = _b.result;
                        if (startResponseCode !== FilePushResponseStatus_1.FilePushResponseStatus.NO_ERROR) {
                            this.logError(pushId, fileName, startResponseCode);
                            return [2];
                        }
                        receivedBytes = 0;
                        processData = function (_a) {
                            var done = _a.done, value = _a.value;
                            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var finishResponseCode, _b, appendResponseCode, result, progress, message;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            if (!(done || !value)) return [3, 2];
                                            this.filePushStream.sendEventFinish({ id: pushId });
                                            return [4, this.waitForResponse(pushId)];
                                        case 1:
                                            finishResponseCode = (_c.sent()).code;
                                            if (finishResponseCode !== 0) {
                                                this.logError(pushId, fileName, finishResponseCode);
                                            }
                                            else {
                                                this.sendUpdate({
                                                    pushId: pushId,
                                                    fileName: fileName,
                                                    message: 'success!',
                                                    progress: 100,
                                                    error: false,
                                                    finished: true,
                                                });
                                            }
                                            console.log(TAG, "File \"".concat(fileName, "\" uploaded in ").concat(Date.now() - start, "ms"));
                                            return [2];
                                        case 2:
                                            receivedBytes += value.length;
                                            this.filePushStream.sendEventAppend({ id: pushId, chunk: value });
                                            return [4, Promise.all([
                                                    this.waitForResponse(pushId),
                                                    reader.read(),
                                                ])];
                                        case 3:
                                            _b = tslib_1.__read.apply(void 0, [_c.sent(), 2]), appendResponseCode = _b[0].code, result = _b[1];
                                            if (appendResponseCode !== 0) {
                                                this.logError(pushId, fileName, appendResponseCode);
                                                return [2];
                                            }
                                            progress = (receivedBytes * 100) / fileSize;
                                            message = "".concat(progress.toFixed(2), "%");
                                            this.sendUpdate({ pushId: pushId, fileName: fileName, message: message, progress: progress, error: false, finished: false });
                                            return [2, processData(result)];
                                    }
                                });
                            });
                        };
                        return [2, processData(result)];
                }
            });
        });
    };
    FilePushHandler.prototype.waitForResponse = function (pushId) {
        var _this = this;
        return new Promise(function (resolve) {
            var stored = _this.responseWaiter.get(pushId);
            if (Array.isArray(stored)) {
                stored.push(resolve);
            }
            else if (stored) {
                var arr = [stored];
                arr.push(resolve);
                _this.responseWaiter.set(pushId, arr);
            }
            else {
                _this.responseWaiter.set(pushId, resolve);
            }
        });
    };
    FilePushHandler.prototype.onFilesDrop = function (files) {
        var _this = this;
        this.listeners.forEach(function (listener) {
            listener.onDrop();
        });
        files.forEach(function (file) {
            var type = file.type, name = file.name;
            if (_this.filePushStream.isAllowedFile(file)) {
                _this.pushFile(file);
            }
            else {
                var errorParams = {
                    pushId: FilePushHandler.REQUEST_NEW_PUSH_ID,
                    fileName: name,
                    message: "Unsupported type \"".concat(type, "\""),
                    progress: -1,
                    error: true,
                    finished: true,
                };
                _this.sendUpdate(errorParams);
            }
        });
        return true;
    };
    FilePushHandler.getErrorMessage = function (code, message) {
        return message || RESPONSE_CODES.get(code) || 'Unknown error';
    };
    FilePushHandler.prototype.onDragEnter = function () {
        var handled = false;
        this.listeners.forEach(function (listener) {
            handled = handled || listener.onDragEnter();
        });
        return handled;
    };
    FilePushHandler.prototype.onDragLeave = function () {
        var handled = false;
        this.listeners.forEach(function (listener) {
            handled = handled || listener.onDragLeave();
        });
        return handled;
    };
    FilePushHandler.prototype.getElement = function () {
        return this.element;
    };
    FilePushHandler.prototype.release = function () {
        this.filePushStream.off('response', this.onStreamResponse);
        this.filePushStream.off('error', this.onStreamError);
        this.filePushStream.release();
        DragAndDropHandler_1.DragAndDropHandler.removeEventListener(this);
        this.listeners.clear();
    };
    FilePushHandler.prototype.addEventListener = function (listener) {
        this.listeners.add(listener);
    };
    FilePushHandler.prototype.removeEventListener = function (listener) {
        this.listeners.delete(listener);
    };
    FilePushHandler.REQUEST_NEW_PUSH_ID = 0;
    return FilePushHandler;
}());
exports["default"] = FilePushHandler;
var RESPONSE_CODES = new Map([
    [FilePushResponseStatus_1.FilePushResponseStatus.NEW_PUSH_ID, 'New push id'],
    [FilePushResponseStatus_1.FilePushResponseStatus.NO_ERROR, 'No error'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_INVALID_NAME, 'Invalid name'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_NO_SPACE, 'No space'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_FAILED_TO_DELETE, 'Failed to delete existing'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_FAILED_TO_CREATE, 'Failed to create new file'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_FILE_NOT_FOUND, 'File not found'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_FAILED_TO_WRITE, 'Failed to write to file'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_FILE_IS_BUSY, 'File is busy'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_INVALID_STATE, 'Invalid state'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_UNKNOWN_ID, 'Unknown id'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_NO_FREE_ID, 'No free id'],
    [FilePushResponseStatus_1.FilePushResponseStatus.ERROR_INCORRECT_SIZE, 'Incorrect size'],
]);


/***/ }),

/***/ "./src/app/googDevice/filePush/FilePushResponseStatus.ts":
/*!***************************************************************!*\
  !*** ./src/app/googDevice/filePush/FilePushResponseStatus.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilePushResponseStatus = void 0;
var FilePushResponseStatus;
(function (FilePushResponseStatus) {
    FilePushResponseStatus[FilePushResponseStatus["NEW_PUSH_ID"] = 1] = "NEW_PUSH_ID";
    FilePushResponseStatus[FilePushResponseStatus["NO_ERROR"] = 0] = "NO_ERROR";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_INVALID_NAME"] = -1] = "ERROR_INVALID_NAME";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_NO_SPACE"] = -2] = "ERROR_NO_SPACE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_FAILED_TO_DELETE"] = -3] = "ERROR_FAILED_TO_DELETE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_FAILED_TO_CREATE"] = -4] = "ERROR_FAILED_TO_CREATE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_FILE_NOT_FOUND"] = -5] = "ERROR_FILE_NOT_FOUND";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_FAILED_TO_WRITE"] = -6] = "ERROR_FAILED_TO_WRITE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_FILE_IS_BUSY"] = -7] = "ERROR_FILE_IS_BUSY";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_INVALID_STATE"] = -8] = "ERROR_INVALID_STATE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_UNKNOWN_ID"] = -9] = "ERROR_UNKNOWN_ID";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_NO_FREE_ID"] = -10] = "ERROR_NO_FREE_ID";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_INCORRECT_SIZE"] = -11] = "ERROR_INCORRECT_SIZE";
    FilePushResponseStatus[FilePushResponseStatus["ERROR_OTHER"] = -12] = "ERROR_OTHER";
})(FilePushResponseStatus = exports.FilePushResponseStatus || (exports.FilePushResponseStatus = {}));


/***/ }),

/***/ "./src/app/googDevice/filePush/FilePushStream.ts":
/*!*******************************************************!*\
  !*** ./src/app/googDevice/filePush/FilePushStream.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilePushStream = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var TypedEmitter_1 = __webpack_require__(/*! ../../../common/TypedEmitter */ "./src/common/TypedEmitter.ts");
var FilePushStream = (function (_super) {
    tslib_1.__extends(FilePushStream, _super);
    function FilePushStream() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FilePushStream;
}(TypedEmitter_1.TypedEmitter));
exports.FilePushStream = FilePushStream;


/***/ }),

/***/ "./src/app/googDevice/filePush/ScrcpyFilePushStream.ts":
/*!*************************************************************!*\
  !*** ./src/app/googDevice/filePush/ScrcpyFilePushStream.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScrcpyFilePushStream = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var FilePushStream_1 = __webpack_require__(/*! ./FilePushStream */ "./src/app/googDevice/filePush/FilePushStream.ts");
var DeviceMessage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../DeviceMessage */ "./src/app/googDevice/DeviceMessage.ts"));
var CommandControlMessage_1 = __webpack_require__(/*! ../../controlMessage/CommandControlMessage */ "./src/app/controlMessage/CommandControlMessage.ts");
var ALLOWED_TYPES = ['application/vnd.android.package-archive'];
var ALLOWED_NAME_RE = /\.apk$/i;
var ScrcpyFilePushStream = (function (_super) {
    tslib_1.__extends(ScrcpyFilePushStream, _super);
    function ScrcpyFilePushStream(streamReceiver) {
        var _this = _super.call(this) || this;
        _this.streamReceiver = streamReceiver;
        _this.onDeviceMessage = function (ev) {
            if (ev.type !== DeviceMessage_1.default.TYPE_PUSH_RESPONSE) {
                return;
            }
            var stats = ev.getPushStats();
            _this.emit('response', stats);
        };
        streamReceiver.on('deviceMessage', _this.onDeviceMessage);
        return _this;
    }
    ScrcpyFilePushStream.prototype.hasConnection = function () {
        return this.streamReceiver.hasConnection();
    };
    ScrcpyFilePushStream.prototype.isAllowedFile = function (file) {
        var type = file.type, name = file.name;
        return (type && ALLOWED_TYPES.includes(type)) || (!type && ALLOWED_NAME_RE.test(name));
    };
    ScrcpyFilePushStream.prototype.sendEventAppend = function (_a) {
        var id = _a.id, chunk = _a.chunk;
        var appendParams = { id: id, chunk: chunk, state: CommandControlMessage_1.FilePushState.APPEND };
        this.streamReceiver.sendEvent(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(appendParams));
    };
    ScrcpyFilePushStream.prototype.sendEventFinish = function (_a) {
        var id = _a.id;
        var finishParams = { id: id, state: CommandControlMessage_1.FilePushState.FINISH };
        this.streamReceiver.sendEvent(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(finishParams));
    };
    ScrcpyFilePushStream.prototype.sendEventNew = function (_a) {
        var id = _a.id;
        var newParams = { id: id, state: CommandControlMessage_1.FilePushState.NEW };
        this.streamReceiver.sendEvent(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(newParams));
    };
    ScrcpyFilePushStream.prototype.sendEventStart = function (_a) {
        var id = _a.id, fileName = _a.fileName, fileSize = _a.fileSize;
        var startParams = { id: id, fileName: fileName, fileSize: fileSize, state: CommandControlMessage_1.FilePushState.START };
        this.streamReceiver.sendEvent(CommandControlMessage_1.CommandControlMessage.createPushFileCommand(startParams));
    };
    ScrcpyFilePushStream.prototype.release = function () {
        this.streamReceiver.off('deviceMessage', this.onDeviceMessage);
    };
    return ScrcpyFilePushStream;
}(FilePushStream_1.FilePushStream));
exports.ScrcpyFilePushStream = ScrcpyFilePushStream;


/***/ }),

/***/ "./src/app/googDevice/toolbox/GoogMoreBox.ts":
/*!***************************************************!*\
  !*** ./src/app/googDevice/toolbox/GoogMoreBox.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GoogMoreBox = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../style/morebox.css */ "./src/style/morebox.css");
var BasePlayer_1 = __webpack_require__(/*! ../../player/BasePlayer */ "./src/app/player/BasePlayer.ts");
var TextControlMessage_1 = __webpack_require__(/*! ../../controlMessage/TextControlMessage */ "./src/app/controlMessage/TextControlMessage.ts");
var CommandControlMessage_1 = __webpack_require__(/*! ../../controlMessage/CommandControlMessage */ "./src/app/controlMessage/CommandControlMessage.ts");
var ControlMessage_1 = __webpack_require__(/*! ../../controlMessage/ControlMessage */ "./src/app/controlMessage/ControlMessage.ts");
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../Size */ "./src/app/Size.ts"));
var DeviceMessage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../DeviceMessage */ "./src/app/googDevice/DeviceMessage.ts"));
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../VideoSettings */ "./src/app/VideoSettings.ts"));
var TAG = '[GoogMoreBox]';
var GoogMoreBox = (function () {
    function GoogMoreBox(udid, player, client) {
        var e_1, _a;
        var _this = this;
        var _b, _c;
        this.player = player;
        this.client = client;
        this.onViewVideoResize = function (size) {
            _this.holder.style.width = "".concat(size.width - 2 * 10, "px");
        };
        this.onVideoSettings = function (videoSettings) {
            if (_this.bitrateInput) {
                _this.bitrateInput.value = videoSettings.bitrate.toString();
            }
            if (_this.maxFpsInput) {
                _this.maxFpsInput.value = videoSettings.maxFps.toString();
            }
            if (_this.iFrameIntervalInput) {
                _this.iFrameIntervalInput.value = videoSettings.iFrameInterval.toString();
            }
            if (videoSettings.bounds) {
                var _a = videoSettings.bounds, width = _a.width, height = _a.height;
                if (_this.maxWidthInput) {
                    _this.maxWidthInput.value = width.toString();
                }
                if (_this.maxHeightInput) {
                    _this.maxHeightInput.value = height.toString();
                }
            }
        };
        this.fit = function () {
            var _a = _this.client.getMaxSize() || GoogMoreBox.defaultSize, width = _a.width, height = _a.height;
            if (_this.maxWidthInput) {
                _this.maxWidthInput.value = width.toString();
            }
            if (_this.maxHeightInput) {
                _this.maxHeightInput.value = height.toString();
            }
        };
        this.reset = function () {
            var preferredSettings = _this.player.getPreferredVideoSetting();
            _this.onVideoSettings(preferredSettings);
        };
        var playerName = player.getName();
        var videoSettings = player.getVideoSettings();
        var displayId = videoSettings.displayId;
        var preferredSettings = player.getPreferredVideoSetting();
        var moreBox = document.createElement('div');
        moreBox.className = 'more-box';
        var nameBox = document.createElement('p');
        nameBox.innerText = "".concat(udid, " (").concat(playerName, ")");
        nameBox.className = 'text-with-shadow';
        moreBox.appendChild(nameBox);
        var input = (this.input = document.createElement('textarea'));
        input.classList.add('text-area');
        var sendButton = document.createElement('button');
        sendButton.innerText = 'Enviar como teclas';
        var inputWrapper = GoogMoreBox.wrap('p', [input, sendButton], moreBox);
        sendButton.onclick = function () {
            if (input.value) {
                client.sendMessage(new TextControlMessage_1.TextControlMessage(input.value));
            }
        };
        var commands = [];
        var codes = CommandControlMessage_1.CommandControlMessage.Commands;
        var _loop_1 = function (action, command) {
            var btn = document.createElement('button');
            var bitrateInput;
            var maxFpsInput;
            var iFrameIntervalInput;
            var maxWidthInput;
            var maxHeightInput;
            if (action === ControlMessage_1.ControlMessage.TYPE_CHANGE_STREAM_PARAMETERS) {
                var spoiler = document.createElement('div');
                var spoilerLabel = document.createElement('label');
                var spoilerCheck = document.createElement('input');
                var innerDiv = document.createElement('div');
                var id = "spoiler_video_".concat(udid, "_").concat(playerName, "_").concat(displayId, "_").concat(action);
                spoiler.className = 'spoiler';
                spoilerCheck.type = 'checkbox';
                spoilerCheck.id = id;
                spoilerLabel.htmlFor = id;
                spoilerLabel.innerText = command;
                innerDiv.className = 'box';
                spoiler.appendChild(spoilerCheck);
                spoiler.appendChild(spoilerLabel);
                spoiler.appendChild(innerDiv);
                var bitrateLabel = document.createElement('label');
                bitrateLabel.innerText = 'Bitrate:';
                bitrateInput = document.createElement('input');
                bitrateInput.placeholder = "".concat(preferredSettings.bitrate, " bps");
                bitrateInput.value = videoSettings.bitrate.toString();
                GoogMoreBox.wrap('div', [bitrateLabel, bitrateInput], innerDiv);
                this_1.bitrateInput = bitrateInput;
                var maxFpsLabel = document.createElement('label');
                maxFpsLabel.innerText = 'Max fps:';
                maxFpsInput = document.createElement('input');
                maxFpsInput.placeholder = "".concat(preferredSettings.maxFps, " fps");
                maxFpsInput.value = videoSettings.maxFps.toString();
                GoogMoreBox.wrap('div', [maxFpsLabel, maxFpsInput], innerDiv);
                this_1.maxFpsInput = maxFpsInput;
                var iFrameIntervalLabel = document.createElement('label');
                iFrameIntervalLabel.innerText = 'I-Frame Interval:';
                iFrameIntervalInput = document.createElement('input');
                iFrameIntervalInput.placeholder = "".concat(preferredSettings.iFrameInterval, " seconds");
                iFrameIntervalInput.value = videoSettings.iFrameInterval.toString();
                GoogMoreBox.wrap('div', [iFrameIntervalLabel, iFrameIntervalInput], innerDiv);
                this_1.iFrameIntervalInput = iFrameIntervalInput;
                var _g = videoSettings.bounds || client.getMaxSize() || GoogMoreBox.defaultSize, width = _g.width, height = _g.height;
                var pWidth = ((_b = preferredSettings.bounds) === null || _b === void 0 ? void 0 : _b.width) || width;
                var pHeight = ((_c = preferredSettings.bounds) === null || _c === void 0 ? void 0 : _c.height) || height;
                var maxWidthLabel = document.createElement('label');
                maxWidthLabel.innerText = 'Max width:';
                maxWidthInput = document.createElement('input');
                maxWidthInput.placeholder = "".concat(pWidth, " px");
                maxWidthInput.value = width.toString();
                GoogMoreBox.wrap('div', [maxWidthLabel, maxWidthInput], innerDiv);
                this_1.maxWidthInput = maxWidthInput;
                var maxHeightLabel = document.createElement('label');
                maxHeightLabel.innerText = 'Max height:';
                maxHeightInput = document.createElement('input');
                maxHeightInput.placeholder = "".concat(pHeight, " px");
                maxHeightInput.value = height.toString();
                GoogMoreBox.wrap('div', [maxHeightLabel, maxHeightInput], innerDiv);
                this_1.maxHeightInput = maxHeightInput;
                innerDiv.appendChild(btn);
                var fitButton = document.createElement('button');
                fitButton.innerText = 'Fit';
                fitButton.onclick = this_1.fit;
                innerDiv.insertBefore(fitButton, innerDiv.firstChild);
                var resetButton = document.createElement('button');
                resetButton.innerText = 'Reset';
                resetButton.onclick = this_1.reset;
                innerDiv.insertBefore(resetButton, innerDiv.firstChild);
                commands.push(spoiler);
            }
            else {
                if (action === CommandControlMessage_1.CommandControlMessage.TYPE_SET_CLIPBOARD ||
                    action === CommandControlMessage_1.CommandControlMessage.TYPE_GET_CLIPBOARD) {
                    inputWrapper.appendChild(btn);
                }
                else {
                    commands.push(btn);
                }
            }
            btn.innerText = command;
            if (action === ControlMessage_1.ControlMessage.TYPE_CHANGE_STREAM_PARAMETERS) {
                btn.onclick = function () {
                    var bitrate = parseInt(bitrateInput.value, 10);
                    var maxFps = parseInt(maxFpsInput.value, 10);
                    var iFrameInterval = parseInt(iFrameIntervalInput.value, 10);
                    if (isNaN(bitrate) || isNaN(maxFps)) {
                        return;
                    }
                    var width = parseInt(maxWidthInput.value, 10) & ~15;
                    var height = parseInt(maxHeightInput.value, 10) & ~15;
                    var bounds = new Size_1.default(width, height);
                    var current = player.getVideoSettings();
                    var lockedVideoOrientation = current.lockedVideoOrientation, sendFrameMeta = current.sendFrameMeta, displayId = current.displayId, codecOptions = current.codecOptions, encoderName = current.encoderName;
                    var videoSettings = new VideoSettings_1.default({
                        bounds: bounds,
                        bitrate: bitrate,
                        maxFps: maxFps,
                        iFrameInterval: iFrameInterval,
                        lockedVideoOrientation: lockedVideoOrientation,
                        sendFrameMeta: sendFrameMeta,
                        displayId: displayId,
                        codecOptions: codecOptions,
                        encoderName: encoderName,
                    });
                    client.sendNewVideoSetting(videoSettings);
                };
            }
            else if (action === CommandControlMessage_1.CommandControlMessage.TYPE_SET_CLIPBOARD) {
                btn.onclick = function () {
                    var text = input.value;
                    if (text) {
                        client.sendMessage(CommandControlMessage_1.CommandControlMessage.createSetClipboardCommand(text));
                    }
                };
            }
            else {
                btn.onclick = function () {
                    client.sendMessage(new CommandControlMessage_1.CommandControlMessage(action));
                };
            }
        };
        var this_1 = this;
        try {
            for (var _d = tslib_1.__values(codes.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = tslib_1.__read(_e.value, 2), action = _f[0], command = _f[1];
                _loop_1(action, command);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        GoogMoreBox.wrap('p', commands, moreBox);
        var screenPowerModeId = "screen_power_mode_".concat(udid, "_").concat(playerName, "_").concat(displayId);
        var screenPowerModeLabel = document.createElement('label');
        screenPowerModeLabel.style.display = 'none';
        var labelTextPrefix = 'Mode';
        var buttonTextPrefix = 'Ahorro de energía';
        var screenPowerModeCheck = document.createElement('input');
        screenPowerModeCheck.type = 'checkbox';
        var mode = (screenPowerModeCheck.checked = false) ? 'ON' : 'OFF';
        screenPowerModeCheck.id = screenPowerModeLabel.htmlFor = screenPowerModeId;
        screenPowerModeLabel.innerText = "".concat(labelTextPrefix, " ").concat(mode);
        screenPowerModeCheck.onchange = function () {
            mode = screenPowerModeCheck.checked ? 'ON' : 'OFF';
            screenPowerModeLabel.innerText = "".concat(labelTextPrefix, " ").concat(mode);
            sendScreenPowerModeButton.innerText = "".concat(buttonTextPrefix, " ").concat(mode);
        };
        var sendScreenPowerModeButton = document.createElement('button');
        sendScreenPowerModeButton.innerText = "".concat(buttonTextPrefix, " ").concat(mode);
        sendScreenPowerModeButton.onclick = function () {
            var message = CommandControlMessage_1.CommandControlMessage.createSetScreenPowerModeCommand(screenPowerModeCheck.checked);
            client.sendMessage(message);
        };
        GoogMoreBox.wrap('p', [screenPowerModeCheck, screenPowerModeLabel, sendScreenPowerModeButton], moreBox, [
            'flex-center',
        ]);
        var qualityId = "show_video_quality_".concat(udid, "_").concat(playerName, "_").concat(displayId);
        var qualityLabel = document.createElement('label');
        var qualityCheck = document.createElement('input');
        qualityCheck.type = 'checkbox';
        qualityCheck.checked = BasePlayer_1.BasePlayer.DEFAULT_SHOW_QUALITY_STATS;
        qualityCheck.id = qualityId;
        qualityLabel.htmlFor = qualityId;
        qualityLabel.innerText = 'Ver stats';
        GoogMoreBox.wrap('p', [qualityCheck, qualityLabel], moreBox, ['flex-center']);
        qualityCheck.onchange = function () {
            player.setShowQualityStats(qualityCheck.checked);
        };
        var stop = function (ev) {
            if (ev && ev instanceof Event && ev.type === 'error') {
                console.error(TAG, ev);
            }
            var parent = moreBox.parentElement;
            if (parent) {
                parent.removeChild(moreBox);
            }
            player.off('video-view-resize', _this.onViewVideoResize);
            if (_this.onStop) {
                _this.onStop();
                delete _this.onStop;
            }
        };
        var stopBtn = document.createElement('button');
        stopBtn.innerText = "Desconectar";
        stopBtn.onclick = stop;
        GoogMoreBox.wrap('p', [stopBtn], moreBox);
        player.on('video-view-resize', this.onViewVideoResize);
        player.on('video-settings', this.onVideoSettings);
        this.holder = moreBox;
    }
    GoogMoreBox.prototype.OnDeviceMessage = function (ev) {
        if (ev.type !== DeviceMessage_1.default.TYPE_CLIPBOARD) {
            return;
        }
        this.input.value = ev.getText();
        this.input.select();
        document.execCommand('copy');
    };
    GoogMoreBox.wrap = function (tagName, elements, parent, opt_classes) {
        var _a;
        var wrap = document.createElement(tagName);
        if (opt_classes) {
            (_a = wrap.classList).add.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(opt_classes), false));
        }
        elements.forEach(function (e) {
            wrap.appendChild(e);
        });
        parent.appendChild(wrap);
        return wrap;
    };
    GoogMoreBox.prototype.getHolderElement = function () {
        return this.holder;
    };
    GoogMoreBox.prototype.setOnStop = function (listener) {
        this.onStop = listener;
    };
    GoogMoreBox.defaultSize = new Size_1.default(480, 800);
    return GoogMoreBox;
}());
exports.GoogMoreBox = GoogMoreBox;


/***/ }),

/***/ "./src/app/googDevice/toolbox/GoogToolBox.ts":
/*!***************************************************!*\
  !*** ./src/app/googDevice/toolbox/GoogToolBox.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GoogToolBox = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ToolBox_1 = __webpack_require__(/*! ../../toolbox/ToolBox */ "./src/app/toolbox/ToolBox.ts");
var KeyEvent_1 = tslib_1.__importDefault(__webpack_require__(/*! ../android/KeyEvent */ "./src/app/googDevice/android/KeyEvent.ts"));
var SvgImage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../ui/SvgImage */ "./src/app/ui/SvgImage.ts"));
var KeyCodeControlMessage_1 = __webpack_require__(/*! ../../controlMessage/KeyCodeControlMessage */ "./src/app/controlMessage/KeyCodeControlMessage.ts");
var ToolBoxButton_1 = __webpack_require__(/*! ../../toolbox/ToolBoxButton */ "./src/app/toolbox/ToolBoxButton.ts");
var ToolBoxCheckbox_1 = __webpack_require__(/*! ../../toolbox/ToolBoxCheckbox */ "./src/app/toolbox/ToolBoxCheckbox.ts");
var BUTTONS = [
    {
        title: 'Apagar',
        code: KeyEvent_1.default.KEYCODE_POWER,
        icon: SvgImage_1.default.Icon.POWER,
    },
    {
        title: 'Subir Vol.',
        code: KeyEvent_1.default.KEYCODE_VOLUME_UP,
        icon: SvgImage_1.default.Icon.VOLUME_UP,
    },
    {
        title: 'Bajar Vol.',
        code: KeyEvent_1.default.KEYCODE_VOLUME_DOWN,
        icon: SvgImage_1.default.Icon.VOLUME_DOWN,
    },
    {
        title: 'Volver',
        code: KeyEvent_1.default.KEYCODE_BACK,
        icon: SvgImage_1.default.Icon.BACK,
    },
    {
        title: 'Home',
        code: KeyEvent_1.default.KEYCODE_HOME,
        icon: SvgImage_1.default.Icon.HOME,
    },
    {
        title: 'Switch',
        code: KeyEvent_1.default.KEYCODE_APP_SWITCH,
        icon: SvgImage_1.default.Icon.OVERVIEW,
    },
];
var GoogToolBox = (function (_super) {
    tslib_1.__extends(GoogToolBox, _super);
    function GoogToolBox(list) {
        return _super.call(this, list) || this;
    }
    GoogToolBox.createToolBox = function (udid, player, client, moreBox) {
        var playerName = player.getName();
        var list = BUTTONS.slice();
        var handler = function (type, element) {
            var _a;
            if (!((_a = element.optional) === null || _a === void 0 ? void 0 : _a.code)) {
                return;
            }
            var code = element.optional.code;
            var action = type === 'mousedown' ? KeyEvent_1.default.ACTION_DOWN : KeyEvent_1.default.ACTION_UP;
            var event = new KeyCodeControlMessage_1.KeyCodeControlMessage(action, code, 0, 0);
            client.sendMessage(event);
        };
        var elements = list.map(function (item) {
            var button = new ToolBoxButton_1.ToolBoxButton(item.title, item.icon, {
                code: item.code,
            });
            button.addEventListener('mousedown', handler);
            button.addEventListener('mouseup', handler);
            return button;
        });
        if (player.supportsScreenshot) {
            var screenshot = new ToolBoxButton_1.ToolBoxButton('Capturar pantalla', SvgImage_1.default.Icon.CAMERA);
            screenshot.addEventListener('click', function () {
                player.createScreenshot(client.getDeviceName());
            });
            elements.push(screenshot);
        }
        var keyboard = new ToolBoxCheckbox_1.ToolBoxCheckbox('Capture keyboard', SvgImage_1.default.Icon.KEYBOARD, "capture_keyboard_".concat(udid, "_").concat(playerName));
        keyboard.addEventListener('click', function (_, el) {
            var element = el.getElement();
            client.setHandleKeyboardEvents(element.checked);
        });
        elements.push(keyboard);
        if (moreBox) {
            var displayId = player.getVideoSettings().displayId;
            var id = "show_more_".concat(udid, "_").concat(playerName, "_").concat(displayId);
            var more = new ToolBoxCheckbox_1.ToolBoxCheckbox('Opciones', SvgImage_1.default.Icon.MORE, id);
            more.addEventListener('click', function (_, el) {
                var element = el.getElement();
                moreBox.style.display = element.checked ? 'block' : 'none';
            });
            elements.unshift(more);
        }
        return new GoogToolBox(elements);
    };
    return GoogToolBox;
}(ToolBox_1.ToolBox));
exports.GoogToolBox = GoogToolBox;


/***/ }),

/***/ "./src/app/interactionHandler/FeaturedInteractionHandler.ts":
/*!******************************************************************!*\
  !*** ./src/app/interactionHandler/FeaturedInteractionHandler.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeaturedInteractionHandler = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var InteractionHandler_1 = __webpack_require__(/*! ./InteractionHandler */ "./src/app/interactionHandler/InteractionHandler.ts");
var MotionEvent_1 = tslib_1.__importDefault(__webpack_require__(/*! ../MotionEvent */ "./src/app/MotionEvent.ts"));
var ScrollControlMessage_1 = __webpack_require__(/*! ../controlMessage/ScrollControlMessage */ "./src/app/controlMessage/ScrollControlMessage.ts");
var TAG = '[FeaturedTouchHandler]';
var FeaturedInteractionHandler = (function (_super) {
    tslib_1.__extends(FeaturedInteractionHandler, _super);
    function FeaturedInteractionHandler(player, listener) {
        var _this = _super.call(this, player, FeaturedInteractionHandler.touchEventsNames, FeaturedInteractionHandler.keyEventsNames) || this;
        _this.listener = listener;
        _this.storedFromMouseEvent = new Map();
        _this.storedFromTouchEvent = new Map();
        _this.onMouseEnter = function () {
            _this.over = true;
        };
        _this.onMouseLeave = function () {
            _this.lastPosition = undefined;
            _this.over = false;
            _this.storedFromMouseEvent.forEach(function (message) {
                _this.listener.sendMessage(InteractionHandler_1.InteractionHandler.createEmulatedMessage(MotionEvent_1.default.ACTION_UP, message));
            });
            _this.storedFromMouseEvent.clear();
            _this.clearCanvas();
        };
        _this.tag.addEventListener('mouseleave', _this.onMouseLeave);
        _this.tag.addEventListener('mouseenter', _this.onMouseEnter);
        return _this;
    }
    FeaturedInteractionHandler.prototype.buildScrollEvent = function (event, screenInfo) {
        var messages = [];
        var touchOnClient = InteractionHandler_1.InteractionHandler.buildTouchOnClient(event, screenInfo);
        if (touchOnClient) {
            var hScroll = event.deltaX > 0 ? -1 : event.deltaX < -0 ? 1 : 0;
            var vScroll = event.deltaY > 0 ? -1 : event.deltaY < -0 ? 1 : 0;
            var time = Date.now();
            if (!this.lastScrollEvent ||
                time - this.lastScrollEvent.time > FeaturedInteractionHandler.SCROLL_EVENT_THROTTLING_TIME ||
                this.lastScrollEvent.vScroll !== vScroll ||
                this.lastScrollEvent.hScroll !== hScroll) {
                this.lastScrollEvent = { time: time, hScroll: hScroll, vScroll: vScroll };
                messages.push(new ScrollControlMessage_1.ScrollControlMessage(touchOnClient.touch.position, hScroll, vScroll));
            }
        }
        return messages;
    };
    FeaturedInteractionHandler.prototype.onInteraction = function (event) {
        var _this = this;
        var screenInfo = this.player.getScreenInfo();
        if (!screenInfo) {
            return;
        }
        var messages;
        var storage;
        if (event instanceof MouseEvent) {
            if (event.target !== this.tag) {
                return;
            }
            if (window['WheelEvent'] && event instanceof WheelEvent) {
                messages = this.buildScrollEvent(event, screenInfo);
            }
            else {
                storage = this.storedFromMouseEvent;
                messages = this.buildTouchEvent(event, screenInfo, storage);
            }
            if (this.over) {
                this.lastPosition = event;
            }
        }
        else if (window['TouchEvent'] && event instanceof TouchEvent) {
            if (event.target !== this.tag) {
                return;
            }
            storage = this.storedFromTouchEvent;
            messages = this.formatTouchEvent(event, screenInfo, storage);
        }
        else {
            console.error(TAG, 'Unsupported event', event);
            return;
        }
        if (event.cancelable) {
            event.preventDefault();
        }
        event.stopPropagation();
        messages.forEach(function (message) {
            _this.listener.sendMessage(message);
        });
    };
    FeaturedInteractionHandler.prototype.onKey = function (event) {
        if (!this.lastPosition) {
            return;
        }
        var screenInfo = this.player.getScreenInfo();
        if (!screenInfo) {
            return;
        }
        var ctrlKey = event.ctrlKey, shiftKey = event.shiftKey;
        var _a = this.lastPosition, target = _a.target, button = _a.button, buttons = _a.buttons, clientY = _a.clientY, clientX = _a.clientX;
        var type = InteractionHandler_1.InteractionHandler.SIMULATE_MULTI_TOUCH;
        var props = { ctrlKey: ctrlKey, shiftKey: shiftKey, type: type, target: target, button: button, buttons: buttons, clientX: clientX, clientY: clientY };
        this.buildTouchEvent(props, screenInfo, new Map());
    };
    FeaturedInteractionHandler.prototype.release = function () {
        _super.prototype.release.call(this);
        this.tag.removeEventListener('mouseleave', this.onMouseLeave);
        this.tag.removeEventListener('mouseenter', this.onMouseEnter);
        this.storedFromMouseEvent.clear();
    };
    FeaturedInteractionHandler.touchEventsNames = [
        'touchstart',
        'touchend',
        'touchmove',
        'touchcancel',
        'mousedown',
        'mouseup',
        'mousemove',
        'wheel',
    ];
    FeaturedInteractionHandler.keyEventsNames = ['keydown', 'keyup'];
    FeaturedInteractionHandler.SCROLL_EVENT_THROTTLING_TIME = 30;
    return FeaturedInteractionHandler;
}(InteractionHandler_1.InteractionHandler));
exports.FeaturedInteractionHandler = FeaturedInteractionHandler;


/***/ }),

/***/ "./src/app/interactionHandler/InteractionHandler.ts":
/*!**********************************************************!*\
  !*** ./src/app/interactionHandler/InteractionHandler.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InteractionHandler = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var MotionEvent_1 = tslib_1.__importDefault(__webpack_require__(/*! ../MotionEvent */ "./src/app/MotionEvent.ts"));
var TouchControlMessage_1 = __webpack_require__(/*! ../controlMessage/TouchControlMessage */ "./src/app/controlMessage/TouchControlMessage.ts");
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var Point_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Point */ "./src/app/Point.ts"));
var Position_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Position */ "./src/app/Position.ts"));
var touch_point_png_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/multitouch/touch_point.png */ "./src/public/images/multitouch/touch_point.png"));
var center_point_png_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/multitouch/center_point.png */ "./src/public/images/multitouch/center_point.png"));
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var TAG = '[TouchHandler]';
var InteractionHandler = (function () {
    function InteractionHandler(player, touchEventsNames, keyEventsNames) {
        this.player = player;
        this.touchEventsNames = touchEventsNames;
        this.keyEventsNames = keyEventsNames;
        this.multiTouchActive = false;
        this.multiTouchShift = false;
        this.dirtyPlace = [];
        this.over = false;
        this.tag = player.getTouchableElement();
        this.ctx = this.tag.getContext('2d');
        InteractionHandler.loadImages();
        InteractionHandler.bindGlobalListeners(this);
    }
    InteractionHandler.bindGlobalListeners = function (interactionHandler) {
        var _this = this;
        interactionHandler.touchEventsNames.forEach(function (eventName) {
            var set = InteractionHandler.eventListeners.get(eventName);
            if (!set) {
                set = new Set();
                document.body.addEventListener(eventName, _this.onInteractionEvent, InteractionHandler.options);
                _this.eventListeners.set(eventName, set);
            }
            set.add(interactionHandler);
        });
        interactionHandler.keyEventsNames.forEach(function (eventName) {
            var set = InteractionHandler.eventListeners.get(eventName);
            if (!set) {
                set = new Set();
                document.body.addEventListener(eventName, _this.onKeyEvent);
                _this.eventListeners.set(eventName, set);
            }
            set.add(interactionHandler);
        });
    };
    InteractionHandler.unbindListeners = function (touchHandler) {
        var _this = this;
        touchHandler.touchEventsNames.forEach(function (eventName) {
            var set = InteractionHandler.eventListeners.get(eventName);
            if (!set) {
                return;
            }
            set.delete(touchHandler);
            if (set.size <= 0) {
                _this.eventListeners.delete(eventName);
                document.body.removeEventListener(eventName, _this.onInteractionEvent);
            }
        });
        touchHandler.keyEventsNames.forEach(function (eventName) {
            var set = InteractionHandler.eventListeners.get(eventName);
            if (!set) {
                return;
            }
            set.delete(touchHandler);
            if (set.size <= 0) {
                _this.eventListeners.delete(eventName);
                document.body.removeEventListener(eventName, _this.onKeyEvent);
            }
        });
    };
    InteractionHandler.loadImages = function () {
        var _this = this;
        if (this.pointImagesLoaded) {
            return;
        }
        var total = 2;
        var current = 0;
        var onload = function (event) {
            if (++current === total) {
                _this.pointImagesLoaded = true;
            }
            if (event.target === _this.touchPointImage) {
                _this.touchPointRadius = _this.touchPointImage.width / 2;
            }
            else if (event.target === _this.centerPointImage) {
                _this.centerPointRadius = _this.centerPointImage.width / 2;
            }
        };
        var touch = (this.touchPointImage = new Image());
        touch.src = touch_point_png_1.default;
        touch.onload = onload;
        var center = (this.centerPointImage = new Image());
        center.src = center_point_png_1.default;
        center.onload = onload;
    };
    InteractionHandler.getPointerId = function (type, identifier) {
        if (this.idToPointerMap.has(identifier)) {
            var pointerId_1 = this.idToPointerMap.get(identifier);
            if (type === 'touchend' || type === 'touchcancel') {
                this.idToPointerMap.delete(identifier);
                this.pointerToIdMap.delete(pointerId_1);
            }
            return pointerId_1;
        }
        var pointerId = 0;
        while (this.pointerToIdMap.has(pointerId)) {
            pointerId++;
        }
        this.idToPointerMap.set(identifier, pointerId);
        this.pointerToIdMap.set(pointerId, identifier);
        return pointerId;
    };
    InteractionHandler.buildTouchOnClient = function (event, screenInfo) {
        var action = this.mapTypeToAction(event.type);
        var _a = screenInfo.videoSize, width = _a.width, height = _a.height;
        var target = event.target;
        var rect = target.getBoundingClientRect();
        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
        var touchX = event.clientX - rect.left;
        var touchY = event.clientY - rect.top;
        var invalid = false;
        if (touchX < 0 || touchX > clientWidth || touchY < 0 || touchY > clientHeight) {
            invalid = true;
        }
        var eps = 1e5;
        var ratio = width / height;
        var shouldBe = Math.round(eps * ratio);
        var haveNow = Math.round((eps * clientWidth) / clientHeight);
        if (shouldBe > haveNow) {
            var realHeight = Math.ceil(clientWidth / ratio);
            var top_1 = (clientHeight - realHeight) / 2;
            if (touchY < top_1 || touchY > top_1 + realHeight) {
                invalid = true;
            }
            touchY -= top_1;
            clientHeight = realHeight;
        }
        else if (shouldBe < haveNow) {
            var realWidth = Math.ceil(clientHeight * ratio);
            var left = (clientWidth - realWidth) / 2;
            if (touchX < left || touchX > left + realWidth) {
                invalid = true;
            }
            touchX -= left;
            clientWidth = realWidth;
        }
        var x = (touchX * width) / clientWidth;
        var y = (touchY * height) / clientHeight;
        var size = new Size_1.default(width, height);
        var point = new Point_1.default(x, y);
        var position = new Position_1.default(point, size);
        if (x < 0 || y < 0 || x > width || y > height) {
            invalid = true;
        }
        return {
            client: {
                width: clientWidth,
                height: clientHeight,
            },
            touch: {
                invalid: invalid,
                action: action,
                position: position,
                buttons: event.buttons,
            },
        };
    };
    InteractionHandler.validateMessage = function (originalEvent, message, storage, logPrefix) {
        var messages = [];
        var action = message.action, pointerId = message.pointerId;
        var previous = storage.get(pointerId);
        if (action === MotionEvent_1.default.ACTION_UP) {
            if (!previous) {
                console.warn(logPrefix, 'Received ACTION_UP while there are no DOWN stored');
            }
            else {
                storage.delete(pointerId);
                messages.push(message);
            }
        }
        else if (action === MotionEvent_1.default.ACTION_DOWN) {
            if (previous) {
                console.warn(logPrefix, 'Received ACTION_DOWN while already has one stored');
            }
            else {
                storage.set(pointerId, message);
                messages.push(message);
            }
        }
        else if (action === MotionEvent_1.default.ACTION_MOVE) {
            if (!previous) {
                if ((originalEvent instanceof MouseEvent && originalEvent.buttons) ||
                    (window['TouchEvent'] && originalEvent instanceof TouchEvent)) {
                    console.warn(logPrefix, 'Received ACTION_MOVE while there are no DOWN stored');
                    var emulated = InteractionHandler.createEmulatedMessage(MotionEvent_1.default.ACTION_DOWN, message);
                    messages.push(emulated);
                    storage.set(pointerId, emulated);
                }
            }
            else {
                messages.push(message);
                storage.set(pointerId, message);
            }
        }
        return messages;
    };
    InteractionHandler.createEmulatedMessage = function (action, event) {
        var pointerId = event.pointerId, position = event.position, buttons = event.buttons;
        var pressure = event.pressure;
        if (action === MotionEvent_1.default.ACTION_UP) {
            pressure = 0;
        }
        return new TouchControlMessage_1.TouchControlMessage(action, pointerId, position, pressure, buttons);
    };
    InteractionHandler.mapTypeToAction = function (type) {
        return this.EVENT_ACTION_MAP[type];
    };
    InteractionHandler.prototype.getTouch = function (e, screenInfo, ctrlKey, shiftKey) {
        var touchOnClient = InteractionHandler.buildTouchOnClient(e, screenInfo);
        if (!touchOnClient) {
            return null;
        }
        var client = touchOnClient.client, touch = touchOnClient.touch;
        var result = [touch];
        if (!ctrlKey) {
            this.multiTouchActive = false;
            this.multiTouchCenter = undefined;
            this.multiTouchShift = false;
            this.clearCanvas();
            return result;
        }
        var position = touch.position, action = touch.action, buttons = touch.buttons;
        var point = position.point, screenSize = position.screenSize;
        var width = screenSize.width, height = screenSize.height;
        var x = point.x, y = point.y;
        if (!this.multiTouchActive) {
            if (shiftKey) {
                this.multiTouchCenter = point;
                this.multiTouchShift = true;
            }
            else {
                this.multiTouchCenter = new Point_1.default(client.width / 2, client.height / 2);
            }
        }
        this.multiTouchActive = true;
        var opposite;
        var invalid = false;
        if (this.multiTouchShift && this.multiTouchCenter) {
            var oppoX = 2 * this.multiTouchCenter.x - x;
            var oppoY = 2 * this.multiTouchCenter.y - y;
            opposite = new Point_1.default(oppoX, oppoY);
            if (!(oppoX <= width && oppoX >= 0 && oppoY <= height && oppoY >= 0)) {
                invalid = true;
            }
        }
        else {
            opposite = new Point_1.default(client.width - x, client.height - y);
            invalid = touch.invalid;
        }
        if (opposite) {
            result.push({
                invalid: invalid,
                action: action,
                buttons: buttons,
                position: new Position_1.default(opposite, screenSize),
            });
        }
        return result;
    };
    InteractionHandler.prototype.drawCircle = function (ctx, point, radius) {
        ctx.beginPath();
        ctx.arc(point.x, point.y, radius, 0, Math.PI * 2, true);
        ctx.stroke();
    };
    InteractionHandler.prototype.drawLine = function (point1, point2) {
        if (!this.ctx) {
            return;
        }
        this.ctx.save();
        this.ctx.strokeStyle = InteractionHandler.STROKE_STYLE;
        this.ctx.beginPath();
        this.ctx.moveTo(point1.x, point1.y);
        this.ctx.lineTo(point2.x, point2.y);
        this.ctx.stroke();
        this.ctx.restore();
    };
    InteractionHandler.prototype.drawPoint = function (point, radius, image) {
        if (!this.ctx) {
            return;
        }
        var lineWidth = this.ctx.lineWidth;
        if (InteractionHandler.pointImagesLoaded && image) {
            radius = image.width / 2;
            lineWidth = 0;
            this.ctx.drawImage(image, point.x - radius, point.y - radius);
        }
        else {
            this.drawCircle(this.ctx, point, radius);
        }
        var topLeft = new Point_1.default(point.x - radius - lineWidth, point.y - radius - lineWidth);
        var bottomRight = new Point_1.default(point.x + radius + lineWidth, point.y + radius + lineWidth);
        this.updateDirty(topLeft, bottomRight);
    };
    InteractionHandler.prototype.drawPointer = function (point) {
        this.drawPoint(point, InteractionHandler.touchPointRadius, InteractionHandler.touchPointImage);
        if (this.multiTouchCenter) {
            this.drawLine(this.multiTouchCenter, point);
        }
    };
    InteractionHandler.prototype.drawCenter = function (point) {
        this.drawPoint(point, InteractionHandler.centerPointRadius, InteractionHandler.centerPointImage);
    };
    InteractionHandler.prototype.updateDirty = function (topLeft, bottomRight) {
        if (!this.dirtyPlace.length) {
            this.dirtyPlace.push(topLeft, bottomRight);
            return;
        }
        var currentTopLeft = this.dirtyPlace[0];
        var currentBottomRight = this.dirtyPlace[1];
        var newTopLeft = new Point_1.default(Math.min(currentTopLeft.x, topLeft.x), Math.min(currentTopLeft.y, topLeft.y));
        var newBottomRight = new Point_1.default(Math.max(currentBottomRight.x, bottomRight.x), Math.max(currentBottomRight.y, bottomRight.y));
        this.dirtyPlace.length = 0;
        this.dirtyPlace.push(newTopLeft, newBottomRight);
    };
    InteractionHandler.prototype.clearCanvas = function () {
        var _a = this.tag, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
        var ctx = this.ctx;
        if (ctx && this.dirtyPlace.length) {
            var topLeft = this.dirtyPlace[0];
            var bottomRight = this.dirtyPlace[1];
            this.dirtyPlace.length = 0;
            var x = Math.max(topLeft.x, 0);
            var y = Math.max(topLeft.y, 0);
            var w = Math.min(clientWidth, bottomRight.x - x);
            var h = Math.min(clientHeight, bottomRight.y - y);
            ctx.clearRect(x, y, w, h);
            ctx.strokeStyle = InteractionHandler.STROKE_STYLE;
        }
    };
    InteractionHandler.prototype.formatTouchEvent = function (e, screenInfo, storage) {
        var logPrefix = "".concat(TAG, "[formatTouchEvent]");
        var messages = [];
        var touches = e.changedTouches;
        if (touches && touches.length) {
            for (var i = 0, l = touches.length; i < l; i++) {
                var touch = touches[i];
                var pointerId = InteractionHandler.getPointerId(e.type, touch.identifier);
                if (touch.target !== this.tag) {
                    continue;
                }
                var previous = storage.get(pointerId);
                var item = {
                    clientX: touch.clientX,
                    clientY: touch.clientY,
                    type: e.type,
                    buttons: MotionEvent_1.default.BUTTON_PRIMARY,
                    target: e.target,
                };
                var event_1 = InteractionHandler.buildTouchOnClient(item, screenInfo);
                if (event_1) {
                    var _a = event_1.touch, action = _a.action, buttons = _a.buttons, position = _a.position, invalid = _a.invalid;
                    var pressure = 1;
                    if (action === MotionEvent_1.default.ACTION_UP) {
                        pressure = 0;
                    }
                    else if (typeof touch.force === 'number') {
                        pressure = touch.force;
                    }
                    if (!invalid) {
                        var message = new TouchControlMessage_1.TouchControlMessage(action, pointerId, position, pressure, buttons);
                        messages.push.apply(messages, tslib_1.__spreadArray([], tslib_1.__read(InteractionHandler.validateMessage(e, message, storage, "".concat(logPrefix, "[validate]"))), false));
                    }
                    else {
                        if (previous) {
                            messages.push(InteractionHandler.createEmulatedMessage(MotionEvent_1.default.ACTION_UP, previous));
                            storage.delete(pointerId);
                        }
                    }
                }
                else {
                    console.error(logPrefix, "Failed to format touch", touch);
                }
            }
        }
        else {
            console.error(logPrefix, 'No "touches"', e);
        }
        return messages;
    };
    InteractionHandler.prototype.buildTouchEvent = function (e, screenInfo, storage) {
        var _this = this;
        var logPrefix = "".concat(TAG, "[buildTouchEvent]");
        var touches = this.getTouch(e, screenInfo, e.ctrlKey, e.shiftKey);
        if (!touches) {
            return [];
        }
        var messages = [];
        var points = [];
        this.clearCanvas();
        touches.forEach(function (touch, pointerId) {
            var action = touch.action, buttons = touch.buttons, position = touch.position;
            var previous = storage.get(pointerId);
            if (!touch.invalid) {
                var pressure = 1.0;
                if (action === MotionEvent_1.default.ACTION_UP) {
                    pressure = 0;
                }
                var message = new TouchControlMessage_1.TouchControlMessage(action, pointerId, position, pressure, buttons);
                messages.push.apply(messages, tslib_1.__spreadArray([], tslib_1.__read(InteractionHandler.validateMessage(e, message, storage, "".concat(logPrefix, "[validate]"))), false));
                points.push(touch.position.point);
            }
            else {
                if (previous) {
                    points.push(previous.position.point);
                }
            }
        });
        if (this.multiTouchActive) {
            if (this.multiTouchCenter) {
                this.drawCenter(this.multiTouchCenter);
            }
            points.forEach(function (point) {
                _this.drawPointer(point);
            });
        }
        var hasActionUp = messages.find(function (message) {
            return message.action === MotionEvent_1.default.ACTION_UP;
        });
        if (hasActionUp && storage.size) {
            console.warn(logPrefix, 'Looks like one of Multi-touch pointers was not raised up');
            storage.forEach(function (message) {
                messages.push(InteractionHandler.createEmulatedMessage(MotionEvent_1.default.ACTION_UP, message));
            });
            storage.clear();
        }
        return messages;
    };
    InteractionHandler.prototype.release = function () {
        InteractionHandler.unbindListeners(this);
    };
    InteractionHandler.SIMULATE_MULTI_TOUCH = 'SIMULATE_MULTI_TOUCH';
    InteractionHandler.STROKE_STYLE = '#00BEA4';
    InteractionHandler.EVENT_ACTION_MAP = (_a = {
            touchstart: MotionEvent_1.default.ACTION_DOWN,
            touchend: MotionEvent_1.default.ACTION_UP,
            touchmove: MotionEvent_1.default.ACTION_MOVE,
            touchcancel: MotionEvent_1.default.ACTION_UP,
            mousedown: MotionEvent_1.default.ACTION_DOWN,
            mousemove: MotionEvent_1.default.ACTION_MOVE,
            mouseup: MotionEvent_1.default.ACTION_UP
        },
        _a[InteractionHandler.SIMULATE_MULTI_TOUCH] = -1,
        _a);
    InteractionHandler.options = Util_1.default.supportsPassive() ? { passive: false } : false;
    InteractionHandler.idToPointerMap = new Map();
    InteractionHandler.pointerToIdMap = new Map();
    InteractionHandler.touchPointRadius = 10;
    InteractionHandler.centerPointRadius = 5;
    InteractionHandler.pointImagesLoaded = false;
    InteractionHandler.eventListeners = new Map();
    InteractionHandler.onInteractionEvent = function (event) {
        var set = InteractionHandler.eventListeners.get(event.type);
        if (!set) {
            return;
        }
        set.forEach(function (instance) {
            instance.onInteraction(event);
        });
    };
    InteractionHandler.onKeyEvent = function (event) {
        var set = InteractionHandler.eventListeners.get(event.type);
        if (!set) {
            return;
        }
        set.forEach(function (instance) {
            instance.onKey(event);
        });
    };
    return InteractionHandler;
}());
exports.InteractionHandler = InteractionHandler;


/***/ }),

/***/ "./src/app/player/BaseCanvasBasedPlayer.ts":
/*!*************************************************!*\
  !*** ./src/app/player/BaseCanvasBasedPlayer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseCanvasBasedPlayer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BasePlayer_1 = __webpack_require__(/*! ./BasePlayer */ "./src/app/player/BasePlayer.ts");
var BaseCanvasBasedPlayer = (function (_super) {
    tslib_1.__extends(BaseCanvasBasedPlayer, _super);
    function BaseCanvasBasedPlayer(udid, displayInfo, name, storageKeyPrefix, tag) {
        if (name === void 0) { name = 'Canvas'; }
        if (storageKeyPrefix === void 0) { storageKeyPrefix = 'DummyCanvas'; }
        if (tag === void 0) { tag = BaseCanvasBasedPlayer.createElement(); }
        var _this = _super.call(this, udid, displayInfo, name, storageKeyPrefix, tag) || this;
        _this.tag = tag;
        _this.framesList = [];
        _this.decodedFrames = [];
        _this.videoStats = [];
        _this.drawDecoded = function () {
            if (!_this.canvas) {
                return;
            }
            if (_this.receivedFirstFrame) {
                var data = _this.decodedFrames.shift();
                if (data) {
                    var frame = data.frame, width = data.width, height = data.height;
                    _this.canvas.decode(frame, width, height);
                }
            }
            if (_this.decodedFrames.length) {
                _this.animationFrameId = requestAnimationFrame(_this.drawDecoded);
            }
            else {
                _this.animationFrameId = undefined;
            }
        };
        return _this;
    }
    BaseCanvasBasedPlayer.hasWebGLSupport = function () {
        var testCanvas = document.createElement('canvas');
        var validContextNames = ['webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];
        var index = 0;
        var gl = null;
        while (!gl && index++ < validContextNames.length) {
            try {
                gl = testCanvas.getContext(validContextNames[index]);
            }
            catch (error) {
                gl = null;
            }
        }
        return !!gl;
    };
    BaseCanvasBasedPlayer.createElement = function (id) {
        var tag = document.createElement('canvas');
        if (typeof id === 'string') {
            tag.id = id;
        }
        tag.className = 'video-layer';
        return tag;
    };
    BaseCanvasBasedPlayer.prototype.onFrameDecoded = function (width, height, frame) {
        if (!this.receivedFirstFrame) {
            return;
        }
        var dropped = 0;
        var maxStored = this.videoSettings.maxFps / 10;
        while (this.decodedFrames.length > maxStored) {
            var data = this.decodedFrames.shift();
            if (data) {
                this.dropFrame(data.frame);
                dropped++;
            }
        }
        this.decodedFrames.push({ width: width, height: height, frame: frame });
        this.videoStats.push({
            decodedFrames: 1,
            droppedFrames: dropped,
            inputBytes: 0,
            inputFrames: 0,
            timestamp: Date.now(),
        });
        if (!this.animationFrameId) {
            this.animationFrameId = requestAnimationFrame(this.drawDecoded);
        }
    };
    BaseCanvasBasedPlayer.prototype.dropFrame = function (_frame) {
    };
    BaseCanvasBasedPlayer.prototype.shiftFrame = function () {
        if (this.getState() !== BasePlayer_1.BasePlayer.STATE.PLAYING) {
            return;
        }
        var first = this.framesList.shift();
        if (first) {
            this.decode(first);
        }
    };
    BaseCanvasBasedPlayer.prototype.calculateMomentumStats = function () {
        var timestamp = Date.now();
        var oneSecondBefore = timestamp - 1000;
        while (this.videoStats.length && this.videoStats[0].timestamp < oneSecondBefore) {
            this.videoStats.shift();
        }
        while (this.inputBytes.length && this.inputBytes[0].timestamp < oneSecondBefore) {
            this.inputBytes.shift();
        }
        var decodedFrames = 0;
        var droppedFrames = 0;
        var inputBytes = 0;
        this.videoStats.forEach(function (item) {
            decodedFrames += item.decodedFrames;
            droppedFrames += item.droppedFrames;
        });
        this.inputBytes.forEach(function (item) {
            inputBytes += item.bytes;
        });
        this.momentumQualityStats = {
            decodedFrames: decodedFrames,
            droppedFrames: droppedFrames,
            inputFrames: this.inputBytes.length,
            inputBytes: inputBytes,
            timestamp: timestamp,
        };
    };
    BaseCanvasBasedPlayer.prototype.resetStats = function () {
        _super.prototype.resetStats.call(this);
        this.videoStats = [];
    };
    BaseCanvasBasedPlayer.prototype.getImageDataURL = function () {
        return this.tag.toDataURL();
    };
    BaseCanvasBasedPlayer.prototype.initCanvas = function (width, height) {
        var _this = this;
        if (this.canvas) {
            var parent_1 = this.tag.parentNode;
            if (parent_1) {
                var tag = BaseCanvasBasedPlayer.createElement(this.tag.id);
                tag.className = this.tag.className;
                parent_1.replaceChild(tag, this.tag);
                parent_1.appendChild(this.touchableCanvas);
                this.tag = tag;
            }
        }
        this.tag.onerror = function (event) {
            console.error("[".concat(_this.name, "]"), event);
        };
        this.tag.oncontextmenu = function (event) {
            event.preventDefault();
        };
        this.tag.width = Math.round(width);
        this.tag.height = Math.round(height);
    };
    BaseCanvasBasedPlayer.prototype.play = function () {
        _super.prototype.play.call(this);
        if (this.getState() !== BasePlayer_1.BasePlayer.STATE.PLAYING || !this.screenInfo) {
            return;
        }
        if (!this.canvas) {
            var _a = this.screenInfo.videoSize, width = _a.width, height = _a.height;
            this.initCanvas(width, height);
            this.resetStats();
        }
        this.shiftFrame();
    };
    BaseCanvasBasedPlayer.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this.clearState();
    };
    BaseCanvasBasedPlayer.prototype.setScreenInfo = function (screenInfo) {
        _super.prototype.setScreenInfo.call(this, screenInfo);
        this.clearState();
        var _a = screenInfo.videoSize, width = _a.width, height = _a.height;
        this.initCanvas(width, height);
        this.framesList = [];
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = undefined;
        }
    };
    BaseCanvasBasedPlayer.prototype.pushFrame = function (frame) {
        _super.prototype.pushFrame.call(this, frame);
        if (BasePlayer_1.BasePlayer.isIFrame(frame)) {
            if (this.videoSettings) {
                var maxFps = this.videoSettings.maxFps;
                if (this.framesList.length > maxFps / 2) {
                    var dropped = this.framesList.length;
                    this.framesList = [];
                    this.videoStats.push({
                        decodedFrames: 0,
                        droppedFrames: dropped,
                        inputBytes: 0,
                        inputFrames: 0,
                        timestamp: Date.now(),
                    });
                }
            }
        }
        this.framesList.push(frame);
        this.shiftFrame();
    };
    BaseCanvasBasedPlayer.prototype.clearState = function () {
        this.framesList = [];
    };
    return BaseCanvasBasedPlayer;
}(BasePlayer_1.BasePlayer));
exports.BaseCanvasBasedPlayer = BaseCanvasBasedPlayer;


/***/ }),

/***/ "./src/app/player/BasePlayer.ts":
/*!**************************************!*\
  !*** ./src/app/player/BasePlayer.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasePlayer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var ScreenInfo_1 = tslib_1.__importDefault(__webpack_require__(/*! ../ScreenInfo */ "./src/app/ScreenInfo.ts"));
var Rect_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Rect */ "./src/app/Rect.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Util */ "./src/app/Util.ts"));
var TypedEmitter_1 = __webpack_require__(/*! ../../common/TypedEmitter */ "./src/common/TypedEmitter.ts");
var DisplayInfo_1 = __webpack_require__(/*! ../DisplayInfo */ "./src/app/DisplayInfo.ts");
var BasePlayer = (function (_super) {
    tslib_1.__extends(BasePlayer, _super);
    function BasePlayer(udid, displayInfo, name, storageKeyPrefix, tag) {
        if (name === void 0) { name = 'BasePlayer'; }
        if (storageKeyPrefix === void 0) { storageKeyPrefix = 'Dummy'; }
        if (tag === void 0) { tag = document.createElement('div'); }
        var _this = _super.call(this) || this;
        _this.udid = udid;
        _this.displayInfo = displayInfo;
        _this.name = name;
        _this.storageKeyPrefix = storageKeyPrefix;
        _this.tag = tag;
        _this.inputBytes = [];
        _this.bounds = null;
        _this.totalStats = {
            decodedFrames: 0,
            droppedFrames: 0,
            inputFrames: 0,
            inputBytes: 0,
            timestamp: 0,
        };
        _this.totalStatsCounter = 0;
        _this.dirtyStatsWidth = 0;
        _this.state = BasePlayer.STATE.STOPPED;
        _this.showQualityStats = BasePlayer.DEFAULT_SHOW_QUALITY_STATS;
        _this.receivedFirstFrame = false;
        _this.statLines = [];
        _this.supportsScreenshot = false;
        _this.resizeVideoToBounds = false;
        _this.videoHeight = -1;
        _this.videoWidth = -1;
        _this.updateQualityStats = function () {
            var now = Date.now();
            var oneSecondBefore = now - 1000;
            _this.calculateMomentumStats();
            if (!_this.momentumQualityStats) {
                return;
            }
            if (_this.totalStats.timestamp < oneSecondBefore) {
                _this.totalStats = {
                    timestamp: now,
                    decodedFrames: _this.totalStats.decodedFrames + _this.momentumQualityStats.decodedFrames,
                    droppedFrames: _this.totalStats.droppedFrames + _this.momentumQualityStats.droppedFrames,
                    inputFrames: _this.totalStats.inputFrames + _this.momentumQualityStats.inputFrames,
                    inputBytes: _this.totalStats.inputBytes + _this.momentumQualityStats.inputBytes,
                };
                if (_this.totalStatsCounter !== 0) {
                    _this.perSecondQualityStats = {
                        avgDecoded: _this.totalStats.decodedFrames / _this.totalStatsCounter,
                        avgDropped: _this.totalStats.droppedFrames / _this.totalStatsCounter,
                        avgInput: _this.totalStats.inputFrames / _this.totalStatsCounter,
                        avgSize: _this.totalStats.inputBytes / _this.totalStatsCounter,
                    };
                }
                _this.totalStatsCounter++;
            }
            _this.drawStats();
            if (_this.state !== BasePlayer.STATE.STOPPED) {
                _this.qualityAnimationId = requestAnimationFrame(_this.updateQualityStats);
            }
        };
        _this.touchableCanvas = document.createElement('canvas');
        _this.touchableCanvas.className = 'touch-layer';
        _this.touchableCanvas.oncontextmenu = function (event) {
            event.preventDefault();
        };
        var preferred = _this.getPreferredVideoSetting();
        _this.videoSettings = BasePlayer.getVideoSettingFromStorage(preferred, _this.storageKeyPrefix, udid, displayInfo);
        return _this;
    }
    BasePlayer.isSupported = function () {
        return false;
    };
    BasePlayer.prototype.calculateScreenInfoForBounds = function (videoWidth, videoHeight) {
        this.videoWidth = videoWidth;
        this.videoHeight = videoHeight;
        if (this.resizeVideoToBounds) {
            var w = videoWidth;
            var h = videoHeight;
            if (this.bounds) {
                var _a = this.bounds, boundsWidth = _a.w, boundsHeight = _a.h;
                if (w > boundsWidth || h > boundsHeight) {
                    var scaledHeight = void 0;
                    var scaledWidth = void 0;
                    if (boundsWidth > w) {
                        scaledHeight = h;
                    }
                    else {
                        scaledHeight = (boundsWidth * h) / w;
                    }
                    if (boundsHeight > scaledHeight) {
                        boundsHeight = scaledHeight;
                    }
                    if (boundsHeight == h) {
                        scaledWidth = w;
                    }
                    else {
                        scaledWidth = (boundsHeight * w) / h;
                    }
                    if (boundsWidth > scaledWidth) {
                        boundsWidth = scaledWidth;
                    }
                    w = boundsWidth | 0;
                    h = boundsHeight | 0;
                    this.tag.style.maxWidth = "".concat(w, "px");
                    this.tag.style.maxHeight = "".concat(h, "px");
                }
            }
            var realScreen = new ScreenInfo_1.default(new Rect_1.default(0, 0, videoWidth, videoHeight), new Size_1.default(w, h), 0);
            this.emit('input-video-resize', realScreen);
            this.setScreenInfo(new ScreenInfo_1.default(new Rect_1.default(0, 0, w, h), new Size_1.default(w, h), 0));
        }
    };
    BasePlayer.isIFrame = function (frame) {
        return frame && frame.length > 4 && (frame[4] & 31) === 5;
    };
    BasePlayer.getStorageKey = function (storageKeyPrefix, udid) {
        var innerHeight = window.innerHeight, innerWidth = window.innerWidth;
        return "".concat(storageKeyPrefix, ":").concat(udid, ":").concat(innerWidth, "x").concat(innerHeight);
    };
    BasePlayer.getFullStorageKey = function (storageKeyPrefix, udid, displayInfo) {
        var innerHeight = window.innerHeight, innerWidth = window.innerWidth;
        var base = "".concat(storageKeyPrefix, ":").concat(udid, ":").concat(innerWidth, "x").concat(innerHeight);
        if (displayInfo) {
            var displayId = displayInfo.displayId, size = displayInfo.size;
            base = "".concat(base, ":").concat(displayId, ":").concat(size.width, "x").concat(size.height);
        }
        return base;
    };
    BasePlayer.getFromStorageCompat = function (prefix, udid, displayInfo) {
        var shortKey = this.getStorageKey(prefix, udid);
        var savedInShort = window.localStorage.getItem(shortKey);
        if (!displayInfo) {
            return savedInShort;
        }
        var isDefaultDisplay = displayInfo.displayId === DisplayInfo_1.DisplayInfo.DEFAULT_DISPLAY;
        var fullKey = this.getFullStorageKey(prefix, udid, displayInfo);
        var savedInFull = window.localStorage.getItem(fullKey);
        if (savedInFull) {
            if (savedInShort && isDefaultDisplay) {
                window.localStorage.removeItem(shortKey);
            }
            return savedInFull;
        }
        if (isDefaultDisplay) {
            return savedInShort;
        }
        return null;
    };
    BasePlayer.getFitToScreenFromStorage = function (storageKeyPrefix, udid, displayInfo) {
        if (!window.localStorage) {
            return false;
        }
        var parsedValue = false;
        var key = "".concat(this.getFullStorageKey(storageKeyPrefix, udid, displayInfo), ":fit");
        var saved = window.localStorage.getItem(key);
        if (!saved) {
            return false;
        }
        try {
            parsedValue = JSON.parse(saved);
        }
        catch (error) {
            console.error("[".concat(this.name, "]"), 'Failed to parse', saved);
        }
        return parsedValue;
    };
    BasePlayer.getVideoSettingFromStorage = function (preferred, storageKeyPrefix, udid, displayInfo) {
        if (!window.localStorage) {
            return preferred;
        }
        var saved = this.getFromStorageCompat(storageKeyPrefix, udid, displayInfo);
        if (!saved) {
            return preferred;
        }
        var parsed = JSON.parse(saved);
        var displayId = parsed.displayId, crop = parsed.crop, bitrate = parsed.bitrate, iFrameInterval = parsed.iFrameInterval, sendFrameMeta = parsed.sendFrameMeta, lockedVideoOrientation = parsed.lockedVideoOrientation, codecOptions = parsed.codecOptions, encoderName = parsed.encoderName;
        var maxFps = isNaN(parsed.maxFps) ? parsed.frameRate : parsed.maxFps;
        var bounds = null;
        if (typeof parsed.bounds !== 'object' || isNaN(parsed.bounds.width) || isNaN(parsed.bounds.height)) {
            if (!isNaN(parsed.maxSize)) {
                bounds = new Size_1.default(parsed.maxSize, parsed.maxSize);
            }
        }
        else {
            bounds = new Size_1.default(parsed.bounds.width, parsed.bounds.height);
        }
        return new VideoSettings_1.default({
            displayId: typeof displayId === 'number' ? displayId : 0,
            crop: crop ? new Rect_1.default(crop.left, crop.top, crop.right, crop.bottom) : preferred.crop,
            bitrate: !isNaN(bitrate) ? bitrate : preferred.bitrate,
            bounds: bounds !== null ? bounds : preferred.bounds,
            maxFps: !isNaN(maxFps) ? maxFps : preferred.maxFps,
            iFrameInterval: !isNaN(iFrameInterval) ? iFrameInterval : preferred.iFrameInterval,
            sendFrameMeta: typeof sendFrameMeta === 'boolean' ? sendFrameMeta : preferred.sendFrameMeta,
            lockedVideoOrientation: !isNaN(lockedVideoOrientation)
                ? lockedVideoOrientation
                : preferred.lockedVideoOrientation,
            codecOptions: codecOptions,
            encoderName: encoderName,
        });
    };
    BasePlayer.putVideoSettingsToStorage = function (storageKeyPrefix, udid, videoSettings, fitToScreen, displayInfo) {
        if (!window.localStorage) {
            return;
        }
        var key = this.getFullStorageKey(storageKeyPrefix, udid, displayInfo);
        window.localStorage.setItem(key, JSON.stringify(videoSettings));
        var fitKey = "".concat(key, ":fit");
        window.localStorage.setItem(fitKey, JSON.stringify(fitToScreen));
    };
    BasePlayer.prototype.createScreenshot = function (deviceName) {
        var a = document.createElement('a');
        a.href = this.getImageDataURL();
        a.download = "".concat(deviceName, " ").concat(new Date().toLocaleString(), ".png");
        a.click();
    };
    BasePlayer.prototype.play = function () {
        if (this.needScreenInfoBeforePlay() && !this.screenInfo) {
            return;
        }
        this.state = BasePlayer.STATE.PLAYING;
    };
    BasePlayer.prototype.pause = function () {
        this.state = BasePlayer.STATE.PAUSED;
    };
    BasePlayer.prototype.stop = function () {
        this.state = BasePlayer.STATE.STOPPED;
    };
    BasePlayer.prototype.getState = function () {
        return this.state;
    };
    BasePlayer.prototype.pushFrame = function (frame) {
        if (!this.receivedFirstFrame) {
            this.receivedFirstFrame = true;
            if (typeof this.qualityAnimationId !== 'number') {
                this.qualityAnimationId = requestAnimationFrame(this.updateQualityStats);
            }
        }
        this.inputBytes.push({
            timestamp: Date.now(),
            bytes: frame.byteLength,
        });
    };
    BasePlayer.prototype.getTouchableElement = function () {
        return this.touchableCanvas;
    };
    BasePlayer.prototype.setParent = function (parent) {
        this.parentElement = parent;
        parent.appendChild(this.tag);
        parent.appendChild(this.touchableCanvas);
    };
    BasePlayer.prototype.needScreenInfoBeforePlay = function () {
        return true;
    };
    BasePlayer.prototype.getVideoSettings = function () {
        return this.videoSettings;
    };
    BasePlayer.prototype.setVideoSettings = function (videoSettings, fitToScreen, saveToStorage) {
        this.videoSettings = videoSettings;
        if (saveToStorage) {
            BasePlayer.putVideoSettingsToStorage(this.storageKeyPrefix, this.udid, videoSettings, fitToScreen, this.displayInfo);
        }
        this.resetStats();
        this.emit('video-settings', VideoSettings_1.default.copy(videoSettings));
    };
    BasePlayer.prototype.getScreenInfo = function () {
        return this.screenInfo;
    };
    BasePlayer.prototype.setScreenInfo = function (screenInfo) {
        if (this.needScreenInfoBeforePlay()) {
            this.pause();
        }
        this.receivedFirstFrame = false;
        this.screenInfo = screenInfo;
        var _a = screenInfo.videoSize, width = _a.width, height = _a.height;
        this.touchableCanvas.width = width;
        this.touchableCanvas.height = height;
        if (this.parentElement) {
            this.parentElement.style.height = "".concat(height, "px");
            this.parentElement.style.width = "".concat(width, "px");
        }
        var size = new Size_1.default(width, height);
        this.emit('video-view-resize', size);
    };
    BasePlayer.prototype.getName = function () {
        return this.name;
    };
    BasePlayer.prototype.resetStats = function () {
        this.receivedFirstFrame = false;
        this.totalStatsCounter = 0;
        this.totalStats = {
            droppedFrames: 0,
            decodedFrames: 0,
            inputFrames: 0,
            inputBytes: 0,
            timestamp: 0,
        };
        this.perSecondQualityStats = {
            avgDecoded: 0,
            avgDropped: 0,
            avgInput: 0,
            avgSize: 0,
        };
    };
    BasePlayer.prototype.drawStats = function () {
        if (!this.showQualityStats) {
            return;
        }
        var ctx = this.touchableCanvas.getContext('2d');
        if (!ctx) {
            return;
        }
        var newStats = [];
        if (this.perSecondQualityStats && this.momentumQualityStats) {
            var _a = this.momentumQualityStats, decodedFrames = _a.decodedFrames, droppedFrames = _a.droppedFrames, inputBytes = _a.inputBytes, inputFrames = _a.inputFrames;
            var _b = this.perSecondQualityStats, avgDecoded = _b.avgDecoded, avgDropped = _b.avgDropped, avgSize = _b.avgSize, avgInput = _b.avgInput;
            var padInput = inputFrames.toString().padStart(3, ' ');
            var padDecoded = decodedFrames.toString().padStart(3, ' ');
            var padDropped = droppedFrames.toString().padStart(3, ' ');
            var padAvgDecoded = avgDecoded.toFixed(1).padStart(5, ' ');
            var padAvgDropped = avgDropped.toFixed(1).padStart(5, ' ');
            var padAvgInput = avgInput.toFixed(1).padStart(5, ' ');
            var prettyBytes = Util_1.default.prettyBytes(inputBytes).padStart(8, ' ');
            var prettyAvgBytes = Util_1.default.prettyBytes(avgSize).padStart(8, ' ');
            newStats.push("Input bytes: ".concat(prettyBytes, " (avg: ").concat(prettyAvgBytes, "/s)"));
            newStats.push("Input   FPS: ".concat(padInput, " (avg: ").concat(padAvgInput, ")"));
            newStats.push("Dropped FPS: ".concat(padDropped, " (avg: ").concat(padAvgDropped, ")"));
            newStats.push("Decoded FPS: ".concat(padDecoded, " (avg: ").concat(padAvgDecoded, ")"));
        }
        else {
            newStats.push("Not supported");
        }
        var changed = this.statLines.length !== newStats.length;
        var i = 0;
        while (!changed && i++ < newStats.length) {
            if (newStats[i] !== this.statLines[i]) {
                changed = true;
            }
        }
        if (changed) {
            this.statLines = newStats;
            this.updateCanvas(false);
        }
    };
    BasePlayer.prototype.updateCanvas = function (onlyClear) {
        var _this = this;
        var ctx = this.touchableCanvas.getContext('2d');
        if (!ctx) {
            return;
        }
        var y = this.touchableCanvas.height;
        var height = BasePlayer.STATS_HEIGHT;
        var lines = this.statLines.length;
        var spaces = lines + 1;
        var p = height / 2;
        var d = p * 2;
        var totalHeight = height * lines + p * spaces;
        ctx.clearRect(0, y - totalHeight, this.dirtyStatsWidth + d, totalHeight);
        this.dirtyStatsWidth = 0;
        if (onlyClear) {
            return;
        }
        ctx.save();
        ctx.font = "".concat(height, "px monospace");
        this.statLines.forEach(function (text) {
            var textMetrics = ctx.measureText(text);
            var dirty = Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);
            _this.dirtyStatsWidth = Math.max(dirty, _this.dirtyStatsWidth);
        });
        ctx.fillStyle = BasePlayer.STAT_BACKGROUND;
        ctx.fillRect(0, y - totalHeight, this.dirtyStatsWidth + d, totalHeight);
        ctx.fillStyle = BasePlayer.STAT_TEXT_COLOR;
        this.statLines.forEach(function (text, line) {
            ctx.fillText(text, p, y - p - line * (height + p));
        });
        ctx.restore();
    };
    BasePlayer.prototype.setShowQualityStats = function (value) {
        this.showQualityStats = value;
        if (!value) {
            this.updateCanvas(true);
        }
        else {
            this.drawStats();
        }
    };
    BasePlayer.prototype.getShowQualityStats = function () {
        return this.showQualityStats;
    };
    BasePlayer.prototype.setBounds = function (bounds) {
        this.bounds = Size_1.default.copy(bounds);
    };
    BasePlayer.prototype.getDisplayInfo = function () {
        return this.displayInfo;
    };
    BasePlayer.prototype.setDisplayInfo = function (displayInfo) {
        this.displayInfo = displayInfo;
    };
    BasePlayer.loadVideoSettings = function (udid, displayInfo) {
        return this.getVideoSettingFromStorage(this.preferredVideoSettings, this.storageKeyPrefix, udid, displayInfo);
    };
    BasePlayer.getFitToScreenStatus = function (udid, displayInfo) {
        return this.getFitToScreenFromStorage(this.storageKeyPrefix, udid, displayInfo);
    };
    BasePlayer.getPreferredVideoSetting = function () {
        return this.preferredVideoSettings;
    };
    BasePlayer.saveVideoSettings = function (udid, videoSettings, fitToScreen, displayInfo) {
        this.putVideoSettingsToStorage(this.storageKeyPrefix, udid, videoSettings, fitToScreen, displayInfo);
    };
    BasePlayer.STAT_BACKGROUND = 'rgba(0, 0, 0, 0.5)';
    BasePlayer.STAT_TEXT_COLOR = 'hsl(24, 85%, 50%)';
    BasePlayer.DEFAULT_SHOW_QUALITY_STATS = false;
    BasePlayer.STATE = {
        PLAYING: 1,
        PAUSED: 2,
        STOPPED: 3,
    };
    BasePlayer.STATS_HEIGHT = 12;
    BasePlayer.storageKeyPrefix = 'BaseDecoder';
    BasePlayer.playerFullName = 'BasePlayer';
    BasePlayer.playerCodeName = 'baseplayer';
    BasePlayer.preferredVideoSettings = new VideoSettings_1.default({
        lockedVideoOrientation: -1,
        bitrate: 524288,
        maxFps: 24,
        iFrameInterval: 5,
        bounds: new Size_1.default(480, 1080),
        sendFrameMeta: false,
    });
    return BasePlayer;
}(TypedEmitter_1.TypedEmitter));
exports.BasePlayer = BasePlayer;


/***/ }),

/***/ "./src/app/player/BroadwayPlayer.ts":
/*!******************************************!*\
  !*** ./src/app/player/BroadwayPlayer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BroadwayPlayer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../../../vendor/Broadway/avc.wasm.asset */ "./vendor/Broadway/avc.wasm.asset");
var BaseCanvasBasedPlayer_1 = __webpack_require__(/*! ./BaseCanvasBasedPlayer */ "./src/app/player/BaseCanvasBasedPlayer.ts");
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var YUVCanvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../../vendor/h264-live-player/YUVCanvas */ "./vendor/h264-live-player/YUVCanvas.ts"));
var YUVWebGLCanvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../../vendor/h264-live-player/YUVWebGLCanvas */ "./vendor/h264-live-player/YUVWebGLCanvas.ts"));
var Decoder_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../../vendor/Broadway/Decoder */ "./vendor/Broadway/Decoder.js"));
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var BroadwayPlayer = (function (_super) {
    tslib_1.__extends(BroadwayPlayer, _super);
    function BroadwayPlayer(udid, displayInfo, name) {
        if (name === void 0) { name = BroadwayPlayer.playerFullName; }
        var _this = _super.call(this, udid, displayInfo, name, BroadwayPlayer.storageKeyPrefix) || this;
        _this.supportsScreenshot = true;
        return _this;
    }
    BroadwayPlayer.isSupported = function () {
        return typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function';
    };
    BroadwayPlayer.prototype.initCanvas = function (width, height) {
        var _this = this;
        _super.prototype.initCanvas.call(this, width, height);
        if (BaseCanvasBasedPlayer_1.BaseCanvasBasedPlayer.hasWebGLSupport()) {
            this.canvas = new YUVWebGLCanvas_1.default(this.tag, new Size_1.default(width, height));
        }
        else {
            this.canvas = new YUVCanvas_1.default(this.tag, new Size_1.default(width, height));
        }
        if (!this.avc) {
            this.avc = new Decoder_1.default();
        }
        this.avc.onPictureDecoded = function (buffer, width, height) {
            _this.onFrameDecoded(width, height, buffer);
        };
    };
    BroadwayPlayer.prototype.decode = function (data) {
        if (!this.avc) {
            return;
        }
        this.avc.decode(data);
    };
    BroadwayPlayer.prototype.getPreferredVideoSetting = function () {
        return BroadwayPlayer.preferredVideoSettings;
    };
    BroadwayPlayer.prototype.getFitToScreenStatus = function () {
        return BroadwayPlayer.getFitToScreenStatus(this.udid, this.displayInfo);
    };
    BroadwayPlayer.prototype.loadVideoSettings = function () {
        return BroadwayPlayer.loadVideoSettings(this.udid, this.displayInfo);
    };
    BroadwayPlayer.storageKeyPrefix = 'BroadwayDecoder';
    BroadwayPlayer.playerFullName = 'Noded Visor';
    BroadwayPlayer.playerCodeName = 'broadway';
    BroadwayPlayer.preferredVideoSettings = new VideoSettings_1.default({
        lockedVideoOrientation: -1,
        bitrate: 524288,
        maxFps: 24,
        iFrameInterval: 5,
        bounds: new Size_1.default(480, 800),
        sendFrameMeta: false,
    });
    return BroadwayPlayer;
}(BaseCanvasBasedPlayer_1.BaseCanvasBasedPlayer));
exports.BroadwayPlayer = BroadwayPlayer;


/***/ }),

/***/ "./src/app/player/MsePlayer.ts":
/*!*************************************!*\
  !*** ./src/app/player/MsePlayer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MsePlayer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BasePlayer_1 = __webpack_require__(/*! ./BasePlayer */ "./src/app/player/BasePlayer.ts");
var h264_converter_1 = tslib_1.__importStar(__webpack_require__(/*! h264-converter */ "./node_modules/h264-converter/dist/index.js"));
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var MsePlayer = (function (_super) {
    tslib_1.__extends(MsePlayer, _super);
    function MsePlayer(udid, displayInfo, name, tag) {
        if (name === void 0) { name = MsePlayer.playerFullName; }
        if (tag === void 0) { tag = MsePlayer.createElement(); }
        var _this = _super.call(this, udid, displayInfo, name, MsePlayer.storageKeyPrefix, tag) || this;
        _this.tag = tag;
        _this.videoStats = [];
        _this.noDecodedFramesSince = -1;
        _this.currentTimeNotChangedSince = -1;
        _this.bigBufferSince = -1;
        _this.aheadOfBufferSince = -1;
        _this.fpf = MsePlayer.DEFAULT_FRAMES_PER_FRAGMENT;
        _this.supportsScreenshot = true;
        _this.waitUntilSegmentRemoved = false;
        _this.blocks = [];
        _this.frames = [];
        _this.jumpEnd = -1;
        _this.lastTime = -1;
        _this.canPlay = false;
        _this.seekingSince = -1;
        _this.isSafari = !!window['safari'];
        _this.isChrome = navigator.userAgent.includes('Chrome');
        _this.isMac = navigator.platform.startsWith('Mac');
        _this.MAX_TIME_TO_RECOVER = 200;
        _this.MAX_BUFFER = _this.isSafari ? 2 : _this.isChrome && _this.isMac ? 0.9 : 0.2;
        _this.MAX_AHEAD = -0.2;
        _this.onVideoError = function (event) {
            console.error("[".concat(_this.name, "]"), event);
        };
        _this.onVideoCanPlay = function () {
            _this.onCanPlayHandler();
        };
        _this.checkVideoResize = function () {
            if (!_this.tag) {
                return;
            }
            var _a = _this.tag, videoHeight = _a.videoHeight, videoWidth = _a.videoWidth;
            if (_this.videoHeight !== videoHeight || _this.videoWidth !== videoWidth) {
                _this.calculateScreenInfoForBounds(videoWidth, videoHeight);
            }
        };
        _this.cleanSourceBuffer = function () {
            if (!_this.sourceBuffer) {
                return;
            }
            if (_this.sourceBuffer.updating) {
                return;
            }
            if (_this.blocks.length < 10) {
                return;
            }
            try {
                _this.sourceBuffer.removeEventListener('updateend', _this.cleanSourceBuffer);
                _this.waitUntilSegmentRemoved = false;
                var removeStart = _this.blocks[0].start;
                var removeEnd = _this.blocks[4].end;
                _this.blocks = _this.blocks.slice(5);
                _this.sourceBuffer.remove(removeStart, removeEnd);
                var frame = _this.frames.shift();
                while (frame) {
                    if (!_this.checkForIFrame(frame)) {
                        _this.frames.unshift(frame);
                        break;
                    }
                    frame = _this.frames.shift();
                }
            }
            catch (error) {
                console.error("[".concat(_this.name, "]"), 'Failed to clean source buffer');
            }
        };
        _this.jumpToEnd = function () {
            if (!_this.sourceBuffer) {
                return;
            }
            if (_this.sourceBuffer.updating) {
                return;
            }
            if (!_this.tag.buffered.length) {
                return;
            }
            var end = _this.tag.buffered.end(_this.tag.seekable.length - 1);
            console.log("[".concat(_this.name, "]"), "Jumping to the end (".concat(_this.jumpEnd, ", ").concat(end - _this.jumpEnd, ")."));
            _this.tag.currentTime = end;
            _this.jumpEnd = -1;
            _this.sourceBuffer.removeEventListener('updateend', _this.jumpToEnd);
        };
        tag.oncontextmenu = function (event) {
            event.preventDefault();
            return false;
        };
        tag.addEventListener('error', _this.onVideoError);
        tag.addEventListener('canplay', _this.onVideoCanPlay);
        (0, h264_converter_1.setLogger)(function () { }, console.error);
        return _this;
    }
    MsePlayer.createElement = function (id) {
        var tag = document.createElement('video');
        tag.muted = true;
        tag.autoplay = true;
        tag.setAttribute('muted', 'muted');
        tag.setAttribute('autoplay', 'autoplay');
        if (typeof id === 'string') {
            tag.id = id;
        }
        tag.className = 'video-layer';
        return tag;
    };
    MsePlayer.isSupported = function () {
        return typeof MediaSource !== 'undefined' && MediaSource.isTypeSupported(h264_converter_1.mimeType);
    };
    MsePlayer.createConverter = function (tag, fps, fpf) {
        if (fps === void 0) { fps = MsePlayer.DEFAULT_FRAMES_PER_SECOND; }
        if (fpf === void 0) { fpf = MsePlayer.DEFAULT_FRAMES_PER_FRAGMENT; }
        return new h264_converter_1.default(tag, fps, fpf);
    };
    MsePlayer.prototype.getVideoPlaybackQuality = function () {
        var video = this.tag;
        if (typeof video.mozDecodedFrames !== 'undefined') {
            return null;
        }
        var now = Date.now();
        if (typeof this.tag.getVideoPlaybackQuality == 'function') {
            var temp = this.tag.getVideoPlaybackQuality();
            return {
                timestamp: now,
                decodedFrames: temp.totalVideoFrames,
                droppedFrames: temp.droppedVideoFrames,
            };
        }
        if (typeof video.webkitDecodedFrameCount !== 'undefined') {
            return {
                timestamp: now,
                decodedFrames: video.webkitDecodedFrameCount,
                droppedFrames: video.webkitDroppedFrameCount,
            };
        }
        return null;
    };
    MsePlayer.prototype.onCanPlayHandler = function () {
        this.canPlay = true;
        this.tag.play();
        this.tag.removeEventListener('canplay', this.onVideoCanPlay);
        this.checkVideoResize();
    };
    MsePlayer.prototype.calculateMomentumStats = function () {
        var stat = this.getVideoPlaybackQuality();
        if (!stat) {
            return;
        }
        var timestamp = Date.now();
        var oneSecondBefore = timestamp - 1000;
        this.videoStats.push(stat);
        while (this.videoStats.length && this.videoStats[0].timestamp < oneSecondBefore) {
            this.videoStats.shift();
        }
        while (this.inputBytes.length && this.inputBytes[0].timestamp < oneSecondBefore) {
            this.inputBytes.shift();
        }
        var inputBytes = 0;
        this.inputBytes.forEach(function (item) {
            inputBytes += item.bytes;
        });
        var inputFrames = this.inputBytes.length;
        if (this.videoStats.length) {
            var oldest = this.videoStats[0];
            var decodedFrames = stat.decodedFrames - oldest.decodedFrames;
            var droppedFrames = stat.droppedFrames - oldest.droppedFrames;
            this.momentumQualityStats = {
                decodedFrames: decodedFrames,
                droppedFrames: droppedFrames,
                inputBytes: inputBytes,
                inputFrames: inputFrames,
                timestamp: timestamp,
            };
        }
    };
    MsePlayer.prototype.resetStats = function () {
        _super.prototype.resetStats.call(this);
        this.videoStats = [];
    };
    MsePlayer.prototype.getImageDataURL = function () {
        var canvas = document.createElement('canvas');
        canvas.width = this.tag.clientWidth;
        canvas.height = this.tag.clientHeight;
        var ctx = canvas.getContext('2d');
        if (ctx) {
            ctx.drawImage(this.tag, 0, 0, canvas.width, canvas.height);
        }
        return canvas.toDataURL();
    };
    MsePlayer.prototype.play = function () {
        _super.prototype.play.call(this);
        if (this.getState() !== BasePlayer_1.BasePlayer.STATE.PLAYING) {
            return;
        }
        if (!this.converter) {
            var fps = MsePlayer.DEFAULT_FRAMES_PER_SECOND;
            if (this.videoSettings) {
                fps = this.videoSettings.maxFps;
            }
            this.converter = MsePlayer.createConverter(this.tag, fps, this.fpf);
            this.canPlay = false;
            this.resetStats();
        }
        this.converter.play();
    };
    MsePlayer.prototype.pause = function () {
        _super.prototype.pause.call(this);
        this.stopConverter();
    };
    MsePlayer.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this.stopConverter();
    };
    MsePlayer.prototype.setVideoSettings = function (videoSettings, fitToScreen, saveToStorage) {
        if (this.videoSettings && this.videoSettings.maxFps !== videoSettings.maxFps) {
            var state = this.getState();
            if (this.converter) {
                this.stop();
                this.converter = MsePlayer.createConverter(this.tag, videoSettings.maxFps, this.fpf);
                this.canPlay = false;
            }
            if (state === BasePlayer_1.BasePlayer.STATE.PLAYING) {
                this.play();
            }
        }
        _super.prototype.setVideoSettings.call(this, videoSettings, fitToScreen, saveToStorage);
    };
    MsePlayer.prototype.getPreferredVideoSetting = function () {
        return MsePlayer.preferredVideoSettings;
    };
    MsePlayer.prototype.pushFrame = function (frame) {
        _super.prototype.pushFrame.call(this, frame);
        if (!this.checkForIFrame(frame)) {
            this.frames.push(frame);
        }
        else {
            this.checkForBadState();
        }
    };
    MsePlayer.prototype.checkForBadState = function () {
        var _this = this;
        var currentTime = this.tag.currentTime;
        var now = Date.now();
        var hasReasonToJump = false;
        if (this.momentumQualityStats) {
            if (this.momentumQualityStats.decodedFrames === 0 && this.momentumQualityStats.inputFrames > 0) {
                if (this.noDecodedFramesSince === -1) {
                    this.noDecodedFramesSince = now;
                }
                else {
                    var time = now - this.noDecodedFramesSince;
                    if (time > this.MAX_TIME_TO_RECOVER) {
                        hasReasonToJump = true;
                    }
                }
            }
            else {
                this.noDecodedFramesSince = -1;
            }
        }
        if (currentTime === this.lastTime && this.currentTimeNotChangedSince === -1) {
            this.currentTimeNotChangedSince = now;
        }
        else {
            this.currentTimeNotChangedSince = -1;
        }
        this.lastTime = currentTime;
        if (this.tag.buffered.length) {
            var end = this.tag.buffered.end(0);
            var buffered = end - currentTime;
            if ((end | 0) - currentTime > this.MAX_BUFFER) {
                if (this.bigBufferSince === -1) {
                    this.bigBufferSince = now;
                }
                else {
                    var time = now - this.bigBufferSince;
                    if (time > this.MAX_TIME_TO_RECOVER) {
                        hasReasonToJump = true;
                    }
                }
            }
            else {
                this.bigBufferSince = -1;
            }
            if (buffered < this.MAX_AHEAD) {
                if (this.aheadOfBufferSince === -1) {
                    this.aheadOfBufferSince = now;
                }
                else {
                    var time = now - this.aheadOfBufferSince;
                    if (time > this.MAX_TIME_TO_RECOVER) {
                        hasReasonToJump = true;
                    }
                }
            }
            else {
                this.aheadOfBufferSince = -1;
            }
            if (this.currentTimeNotChangedSince !== -1) {
                var time = now - this.currentTimeNotChangedSince;
                if (time > this.MAX_TIME_TO_RECOVER) {
                    hasReasonToJump = true;
                }
            }
            if (!hasReasonToJump) {
                return;
            }
            var waitingForSeekEnd = 0;
            if (this.seekingSince !== -1) {
                waitingForSeekEnd = now - this.seekingSince;
                if (waitingForSeekEnd < 1500) {
                    return;
                }
            }
            var onSeekEnd_1 = function () {
                _this.seekingSince = -1;
                _this.tag.removeEventListener('seeked', onSeekEnd_1);
                _this.tag.play();
            };
            if (this.seekingSince !== -1) {
                console.warn("[".concat(this.name, "]"), "Attempt to seek while already seeking! ".concat(waitingForSeekEnd));
            }
            this.seekingSince = now;
            this.tag.addEventListener('seeked', onSeekEnd_1);
            this.tag.currentTime = this.tag.buffered.end(0);
        }
    };
    MsePlayer.prototype.checkForIFrame = function (frame) {
        if (!this.converter) {
            return false;
        }
        this.sourceBuffer = this.converter.sourceBuffer;
        if (BasePlayer_1.BasePlayer.isIFrame(frame)) {
            var start = 0;
            var end = 0;
            if (this.tag.buffered && this.tag.buffered.length) {
                start = this.tag.buffered.start(0);
                end = this.tag.buffered.end(0);
            }
            if (end !== 0 && start < end) {
                var block = {
                    start: start,
                    end: end,
                };
                this.blocks.push(block);
                if (this.blocks.length > 10) {
                    this.waitUntilSegmentRemoved = true;
                    this.sourceBuffer.addEventListener('updateend', this.cleanSourceBuffer);
                    this.converter.appendRawData(frame);
                    return true;
                }
            }
            if (this.sourceBuffer) {
                this.sourceBuffer.onupdateend = this.checkVideoResize;
            }
        }
        if (this.waitUntilSegmentRemoved) {
            return false;
        }
        this.converter.appendRawData(frame);
        return true;
    };
    MsePlayer.prototype.stopConverter = function () {
        if (this.converter) {
            this.converter.appendRawData(new Uint8Array([]));
            this.converter.pause();
            delete this.converter;
        }
    };
    MsePlayer.prototype.getFitToScreenStatus = function () {
        return MsePlayer.getFitToScreenStatus(this.udid, this.displayInfo);
    };
    MsePlayer.prototype.loadVideoSettings = function () {
        return MsePlayer.loadVideoSettings(this.udid, this.displayInfo);
    };
    MsePlayer.storageKeyPrefix = 'MseDecoder';
    MsePlayer.playerFullName = 'H264 Converter';
    MsePlayer.playerCodeName = 'mse';
    MsePlayer.preferredVideoSettings = new VideoSettings_1.default({
        lockedVideoOrientation: -1,
        bitrate: 7340032,
        maxFps: 60,
        iFrameInterval: 10,
        bounds: new Size_1.default(720, 720),
        sendFrameMeta: false,
    });
    MsePlayer.DEFAULT_FRAMES_PER_FRAGMENT = 1;
    MsePlayer.DEFAULT_FRAMES_PER_SECOND = 60;
    return MsePlayer;
}(BasePlayer_1.BasePlayer));
exports.MsePlayer = MsePlayer;


/***/ }),

/***/ "./src/app/player/TinyH264Player.ts":
/*!******************************************!*\
  !*** ./src/app/player/TinyH264Player.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TinyH264Player = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BaseCanvasBasedPlayer_1 = __webpack_require__(/*! ./BaseCanvasBasedPlayer */ "./src/app/player/BaseCanvasBasedPlayer.ts");
var H264NALDecoder_worker_1 = tslib_1.__importDefault(__webpack_require__(/*! worker-loader!./../../../vendor/tinyh264/H264NALDecoder.worker */ "./node_modules/worker-loader/dist/cjs.js!./vendor/tinyh264/H264NALDecoder.worker.ts"));
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var YUVWebGLCanvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../../vendor/tinyh264/YUVWebGLCanvas */ "./vendor/tinyh264/YUVWebGLCanvas.ts"));
var YUVCanvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../../vendor/tinyh264/YUVCanvas */ "./vendor/tinyh264/YUVCanvas.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var TinyH264Player = (function (_super) {
    tslib_1.__extends(TinyH264Player, _super);
    function TinyH264Player(udid, displayInfo, name) {
        if (name === void 0) { name = TinyH264Player.playerFullName; }
        var _this = _super.call(this, udid, displayInfo, name, TinyH264Player.storageKeyPrefix) || this;
        _this.isDecoderReady = false;
        _this.supportsScreenshot = true;
        _this.onWorkerMessage = function (event) {
            var message = event.data;
            switch (message.type) {
                case 'pictureReady':
                    var width = message.width, height = message.height, data = message.data;
                    _this.onFrameDecoded(width, height, new Uint8Array(data));
                    break;
                case 'decoderReady':
                    _this.isDecoderReady = true;
                    break;
                default:
                    console.error("[".concat(_this.name, "]"), Error("Wrong message type \"".concat(message.type, "\"")));
            }
        };
        return _this;
    }
    TinyH264Player.isSupported = function () {
        return typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function';
    };
    TinyH264Player.prototype.initWorker = function () {
        this.worker = new H264NALDecoder_worker_1.default();
        this.worker.addEventListener('message', this.onWorkerMessage);
    };
    TinyH264Player.prototype.initCanvas = function (width, height) {
        _super.prototype.initCanvas.call(this, width, height);
        if (BaseCanvasBasedPlayer_1.BaseCanvasBasedPlayer.hasWebGLSupport()) {
            this.canvas = new YUVWebGLCanvas_1.default(this.tag);
        }
        else {
            this.canvas = new YUVCanvas_1.default(this.tag);
        }
    };
    TinyH264Player.prototype.decode = function (data) {
        if (!this.worker || !this.isDecoderReady) {
            return;
        }
        this.worker.postMessage({
            type: 'decode',
            data: data.buffer,
            offset: data.byteOffset,
            length: data.byteLength,
            renderStateId: TinyH264Player.videoStreamId,
        }, [data.buffer]);
    };
    TinyH264Player.prototype.play = function () {
        _super.prototype.play.call(this);
        if (!this.worker) {
            this.initWorker();
        }
    };
    TinyH264Player.prototype.stop = function () {
        _super.prototype.stop.call(this);
        if (this.worker) {
            this.worker.removeEventListener('message', this.onWorkerMessage);
            this.worker.postMessage({ type: 'release', renderStateId: TinyH264Player.videoStreamId });
            delete this.worker;
        }
    };
    TinyH264Player.prototype.getPreferredVideoSetting = function () {
        return TinyH264Player.preferredVideoSettings;
    };
    TinyH264Player.prototype.clearState = function () {
        _super.prototype.clearState.call(this);
        if (this.worker) {
            this.worker.postMessage({ type: 'release', renderStateId: TinyH264Player.videoStreamId });
            TinyH264Player.videoStreamId++;
        }
    };
    TinyH264Player.prototype.getFitToScreenStatus = function () {
        return TinyH264Player.getFitToScreenStatus(this.udid, this.displayInfo);
    };
    TinyH264Player.prototype.loadVideoSettings = function () {
        return TinyH264Player.loadVideoSettings(this.udid, this.displayInfo);
    };
    TinyH264Player.storageKeyPrefix = 'Tinyh264Decoder';
    TinyH264Player.playerFullName = 'Tiny H264';
    TinyH264Player.playerCodeName = 'tinyh264';
    TinyH264Player.videoStreamId = 1;
    TinyH264Player.preferredVideoSettings = new VideoSettings_1.default({
        lockedVideoOrientation: -1,
        bitrate: 524288,
        maxFps: 24,
        iFrameInterval: 5,
        bounds: new Size_1.default(480, 480),
        sendFrameMeta: false,
    });
    return TinyH264Player;
}(BaseCanvasBasedPlayer_1.BaseCanvasBasedPlayer));
exports.TinyH264Player = TinyH264Player;


/***/ }),

/***/ "./src/app/player/WebCodecsPlayer.ts":
/*!*******************************************!*\
  !*** ./src/app/player/WebCodecsPlayer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebCodecsPlayer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var BaseCanvasBasedPlayer_1 = __webpack_require__(/*! ./BaseCanvasBasedPlayer */ "./src/app/player/BaseCanvasBasedPlayer.ts");
var VideoSettings_1 = tslib_1.__importDefault(__webpack_require__(/*! ../VideoSettings */ "./src/app/VideoSettings.ts"));
var Size_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Size */ "./src/app/Size.ts"));
var h264_parser_1 = tslib_1.__importDefault(__webpack_require__(/*! h264-converter/dist/h264-parser */ "./node_modules/h264-converter/dist/h264-parser.js"));
var NALU_1 = tslib_1.__importDefault(__webpack_require__(/*! h264-converter/dist/util/NALU */ "./node_modules/h264-converter/dist/util/NALU.js"));
var ScreenInfo_1 = tslib_1.__importDefault(__webpack_require__(/*! ../ScreenInfo */ "./src/app/ScreenInfo.ts"));
var Rect_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Rect */ "./src/app/Rect.ts"));
function toHex(value) {
    return value.toString(16).padStart(2, '0').toUpperCase();
}
var WebCodecsPlayer = (function (_super) {
    tslib_1.__extends(WebCodecsPlayer, _super);
    function WebCodecsPlayer(udid, displayInfo, name) {
        if (name === void 0) { name = WebCodecsPlayer.playerFullName; }
        var _this = _super.call(this, udid, displayInfo, name, WebCodecsPlayer.storageKeyPrefix) || this;
        _this.supportsScreenshot = true;
        _this.hadIDR = false;
        _this.bufferedSPS = false;
        _this.bufferedPPS = false;
        _this.drawDecoded = function () {
            if (_this.receivedFirstFrame) {
                var data = _this.decodedFrames.shift();
                if (data) {
                    var frame = data.frame;
                    _this.context.drawImage(frame, 0, 0);
                    frame.close();
                }
            }
            if (_this.decodedFrames.length) {
                _this.animationFrameId = requestAnimationFrame(_this.drawDecoded);
            }
            else {
                _this.animationFrameId = undefined;
            }
        };
        var context = _this.tag.getContext('2d');
        if (!context) {
            throw Error('Failed to get 2d context from canvas');
        }
        _this.context = context;
        _this.decoder = _this.createDecoder();
        return _this;
    }
    WebCodecsPlayer.isSupported = function () {
        if (typeof VideoDecoder !== 'function' || typeof VideoDecoder.isConfigSupported !== 'function') {
            return false;
        }
        return true;
    };
    WebCodecsPlayer.parseSPS = function (data) {
        var _a = h264_parser_1.default.parseSPS(data), profile_idc = _a.profile_idc, constraint_set_flags = _a.constraint_set_flags, level_idc = _a.level_idc, pic_width_in_mbs_minus1 = _a.pic_width_in_mbs_minus1, frame_crop_left_offset = _a.frame_crop_left_offset, frame_crop_right_offset = _a.frame_crop_right_offset, frame_mbs_only_flag = _a.frame_mbs_only_flag, pic_height_in_map_units_minus1 = _a.pic_height_in_map_units_minus1, frame_crop_top_offset = _a.frame_crop_top_offset, frame_crop_bottom_offset = _a.frame_crop_bottom_offset, sar = _a.sar;
        var sarScale = sar[0] / sar[1];
        var codec = "avc1.".concat([profile_idc, constraint_set_flags, level_idc].map(toHex).join(''));
        var width = Math.ceil(((pic_width_in_mbs_minus1 + 1) * 16 - frame_crop_left_offset * 2 - frame_crop_right_offset * 2) * sarScale);
        var height = (2 - frame_mbs_only_flag) * (pic_height_in_map_units_minus1 + 1) * 16 -
            (frame_mbs_only_flag ? 2 : 4) * (frame_crop_top_offset + frame_crop_bottom_offset);
        return { codec: codec, width: width, height: height };
    };
    WebCodecsPlayer.prototype.createDecoder = function () {
        var _this = this;
        return new VideoDecoder({
            output: function (frame) {
                _this.onFrameDecoded(0, 0, frame);
            },
            error: function (error) {
                console.error(error, "code: ".concat(error.code));
                _this.stop();
            },
        });
    };
    WebCodecsPlayer.prototype.addToBuffer = function (data) {
        var array;
        if (this.buffer) {
            array = new Uint8Array(this.buffer.byteLength + data.byteLength);
            array.set(new Uint8Array(this.buffer));
            array.set(new Uint8Array(data), this.buffer.byteLength);
        }
        else {
            array = data;
        }
        this.buffer = array.buffer;
        return array;
    };
    WebCodecsPlayer.prototype.scaleCanvas = function (width, height) {
        var videoSize = new Size_1.default(width, height);
        var scale = 1;
        if (this.bounds && !this.bounds.intersect(videoSize).equals(videoSize)) {
            scale = Math.min(this.bounds.w / width, this.bounds.h / height);
        }
        var w = width * scale;
        var h = height * scale;
        var screenInfo = new ScreenInfo_1.default(new Rect_1.default(0, 0, width, height), new Size_1.default(w, h), 0);
        this.emit('input-video-resize', screenInfo);
        this.setScreenInfo(screenInfo);
        this.initCanvas(width, height);
        if (scale !== 1) {
            this.tag.style.transform = "scale(".concat(scale.toFixed(4), ")");
        }
        else {
            this.tag.style.transform = "";
        }
        this.tag.style.transformOrigin = 'top left';
    };
    WebCodecsPlayer.prototype.decode = function (data) {
        if (!data || data.length < 4) {
            return;
        }
        var type = data[4] & 31;
        var isIDR = type === NALU_1.default.IDR;
        if (type === NALU_1.default.SPS) {
            var _a = WebCodecsPlayer.parseSPS(data.subarray(4)), codec = _a.codec, width = _a.width, height = _a.height;
            this.scaleCanvas(width, height);
            var config = {
                codec: codec,
                optimizeForLatency: true,
            };
            this.decoder.configure(config);
            this.bufferedSPS = true;
            this.addToBuffer(data);
            this.hadIDR = false;
            return;
        }
        else if (type === NALU_1.default.PPS) {
            this.bufferedPPS = true;
            this.addToBuffer(data);
            return;
        }
        else if (type === NALU_1.default.SEI) {
            if (!this.bufferedSPS || !this.bufferedPPS) {
                return;
            }
        }
        var array = this.addToBuffer(data);
        this.hadIDR = this.hadIDR || isIDR;
        if (array && this.decoder.state === 'configured' && this.hadIDR) {
            this.buffer = undefined;
            this.bufferedPPS = false;
            this.bufferedSPS = false;
            this.decoder.decode(new EncodedVideoChunk({
                type: 'key',
                timestamp: 0,
                data: array.buffer,
            }));
            return;
        }
    };
    WebCodecsPlayer.prototype.dropFrame = function (frame) {
        frame.close();
    };
    WebCodecsPlayer.prototype.getFitToScreenStatus = function () {
        return false;
    };
    WebCodecsPlayer.prototype.getPreferredVideoSetting = function () {
        return WebCodecsPlayer.preferredVideoSettings;
    };
    WebCodecsPlayer.prototype.loadVideoSettings = function () {
        return WebCodecsPlayer.loadVideoSettings(this.udid, this.displayInfo);
    };
    WebCodecsPlayer.prototype.needScreenInfoBeforePlay = function () {
        return false;
    };
    WebCodecsPlayer.prototype.stop = function () {
        _super.prototype.stop.call(this);
        if (this.decoder.state === 'configured') {
            this.decoder.close();
        }
    };
    WebCodecsPlayer.storageKeyPrefix = 'WebCodecsPlayer';
    WebCodecsPlayer.playerFullName = 'WebCodecs';
    WebCodecsPlayer.playerCodeName = 'webcodecs';
    WebCodecsPlayer.preferredVideoSettings = new VideoSettings_1.default({
        lockedVideoOrientation: -1,
        bitrate: 524288,
        maxFps: 24,
        iFrameInterval: 5,
        bounds: new Size_1.default(480, 480),
        sendFrameMeta: false,
    });
    return WebCodecsPlayer;
}(BaseCanvasBasedPlayer_1.BaseCanvasBasedPlayer));
exports.WebCodecsPlayer = WebCodecsPlayer;


/***/ }),

/***/ "./src/app/toolbox/ToolBox.ts":
/*!************************************!*\
  !*** ./src/app/toolbox/ToolBox.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolBox = void 0;
var ToolBox = (function () {
    function ToolBox(list) {
        var _this = this;
        this.holder = document.createElement('div');
        this.holder.classList.add('control-buttons-list', 'control-wrapper');
        list.forEach(function (item) {
            item.getAllElements().forEach(function (el) {
                _this.holder.appendChild(el);
            });
        });
    }
    ToolBox.prototype.getHolderElement = function () {
        return this.holder;
    };
    return ToolBox;
}());
exports.ToolBox = ToolBox;


/***/ }),

/***/ "./src/app/toolbox/ToolBoxButton.ts":
/*!******************************************!*\
  !*** ./src/app/toolbox/ToolBoxButton.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolBoxButton = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ToolBoxElement_1 = __webpack_require__(/*! ./ToolBoxElement */ "./src/app/toolbox/ToolBoxElement.ts");
var SvgImage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../ui/SvgImage */ "./src/app/ui/SvgImage.ts"));
var ToolBoxButton = (function (_super) {
    tslib_1.__extends(ToolBoxButton, _super);
    function ToolBoxButton(title, icon, optional) {
        var _this = _super.call(this, title, optional) || this;
        var btn = document.createElement('button');
        btn.classList.add('control-button');
        btn.title = title;
        btn.appendChild(SvgImage_1.default.create(icon));
        _this.btn = btn;
        return _this;
    }
    ToolBoxButton.prototype.getElement = function () {
        return this.btn;
    };
    ToolBoxButton.prototype.getAllElements = function () {
        return [this.btn];
    };
    return ToolBoxButton;
}(ToolBoxElement_1.ToolBoxElement));
exports.ToolBoxButton = ToolBoxButton;


/***/ }),

/***/ "./src/app/toolbox/ToolBoxCheckbox.ts":
/*!********************************************!*\
  !*** ./src/app/toolbox/ToolBoxCheckbox.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolBoxCheckbox = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ToolBoxElement_1 = __webpack_require__(/*! ./ToolBoxElement */ "./src/app/toolbox/ToolBoxElement.ts");
var SvgImage_1 = tslib_1.__importDefault(__webpack_require__(/*! ../ui/SvgImage */ "./src/app/ui/SvgImage.ts"));
var ToolBoxCheckbox = (function (_super) {
    tslib_1.__extends(ToolBoxCheckbox, _super);
    function ToolBoxCheckbox(title, icons, opt_id, optional) {
        var _this = _super.call(this, title, optional) || this;
        var input = document.createElement('input');
        input.type = 'checkbox';
        var label = document.createElement('label');
        label.title = title;
        label.classList.add('control-button');
        var iconOff;
        var iconOn;
        if (typeof icons !== 'number') {
            iconOff = icons.off;
            iconOn = icons.on;
        }
        else {
            iconOff = icons;
        }
        _this.imageOff = SvgImage_1.default.create(iconOff);
        _this.imageOff.classList.add('image', 'image-off');
        label.appendChild(_this.imageOff);
        if (iconOn) {
            _this.imageOn = SvgImage_1.default.create(iconOn);
            _this.imageOn.classList.add('image', 'image-on');
            label.appendChild(_this.imageOn);
            input.classList.add('two-images');
        }
        var id = opt_id || title.toLowerCase().replace(' ', '_');
        label.htmlFor = input.id = "input_".concat(id);
        _this.input = input;
        _this.label = label;
        return _this;
    }
    ToolBoxCheckbox.prototype.getElement = function () {
        return this.input;
    };
    ToolBoxCheckbox.prototype.getAllElements = function () {
        return [this.input, this.label];
    };
    return ToolBoxCheckbox;
}(ToolBoxElement_1.ToolBoxElement));
exports.ToolBoxCheckbox = ToolBoxCheckbox;


/***/ }),

/***/ "./src/app/toolbox/ToolBoxElement.ts":
/*!*******************************************!*\
  !*** ./src/app/toolbox/ToolBoxElement.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolBoxElement = void 0;
var ToolBoxElement = (function () {
    function ToolBoxElement(title, optional) {
        var _this = this;
        this.title = title;
        this.optional = optional;
        this.listeners = new Map();
        this.onEvent = function (ev) {
            var set = _this.listeners.get(ev.type);
            if (!set) {
                return;
            }
            var type = ev.type;
            set.forEach(function (listener) {
                listener(type, _this);
            });
        };
    }
    ToolBoxElement.prototype.addEventListener = function (type, listener, options) {
        var set = this.listeners.get(type) || new Set();
        if (!set.size) {
            var element = this.getElement();
            element.addEventListener(type, this.onEvent, options);
        }
        set.add(listener);
        this.listeners.set(type, set);
    };
    ToolBoxElement.prototype.removeEventListener = function (type, listener) {
        var set = this.listeners.get(type);
        if (!set) {
            return;
        }
        set.delete(listener);
        if (!set.size) {
            this.listeners.delete(type);
            var element = this.getElement();
            element.removeEventListener(type, this.onEvent);
        }
    };
    return ToolBoxElement;
}());
exports.ToolBoxElement = ToolBoxElement;


/***/ }),

/***/ "./src/app/ui/HtmlTag.ts":
/*!*******************************!*\
  !*** ./src/app/ui/HtmlTag.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.html = void 0;
function htmlValue(value) {
    if (value instanceof HTMLTemplateElement) {
        return value.innerHTML;
    }
    if (typeof value === 'undefined') {
        return 'undefined';
    }
    if (value === null) {
        return 'null';
    }
    var e = document.createElement('dummy');
    e.innerText = value.toString();
    return e.innerHTML;
}
var html = function html(strings) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var template = document.createElement('template');
    template.innerHTML = values.reduce(function (acc, v, idx) { return acc + htmlValue(v) + strings[idx + 1]; }, strings[0]).toString();
    return template;
};
exports.html = html;


/***/ }),

/***/ "./src/app/ui/SvgImage.ts":
/*!********************************!*\
  !*** ./src/app/ui/SvgImage.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Icon = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ic_keyboard_678_48dp_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_keyboard_678_48dp.svg */ "./src/public/images/skin-light/ic_keyboard_678_48dp.svg"));
var ic_more_horiz_678_48dp_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_more_horiz_678_48dp.svg */ "./src/public/images/skin-light/ic_more_horiz_678_48dp.svg"));
var ic_photo_camera_678_48dp_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_photo_camera_678_48dp.svg */ "./src/public/images/skin-light/ic_photo_camera_678_48dp.svg"));
var ic_power_settings_new_678_48px_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_power_settings_new_678_48px.svg */ "./src/public/images/skin-light/ic_power_settings_new_678_48px.svg"));
var ic_volume_down_678_48px_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_volume_down_678_48px.svg */ "./src/public/images/skin-light/ic_volume_down_678_48px.svg"));
var ic_volume_up_678_48px_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/ic_volume_up_678_48px.svg */ "./src/public/images/skin-light/ic_volume_up_678_48px.svg"));
var System_Back_678_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/System_Back_678.svg */ "./src/public/images/skin-light/System_Back_678.svg"));
var System_Home_678_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/System_Home_678.svg */ "./src/public/images/skin-light/System_Home_678.svg"));
var System_Overview_678_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/skin-light/System_Overview_678.svg */ "./src/public/images/skin-light/System_Overview_678.svg"));
var cancel_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/cancel.svg */ "./src/public/images/buttons/cancel.svg"));
var offline_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/offline.svg */ "./src/public/images/buttons/offline.svg"));
var refresh_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/refresh.svg */ "./src/public/images/buttons/refresh.svg"));
var settings_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/settings.svg */ "./src/public/images/buttons/settings.svg"));
var menu_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/menu.svg */ "./src/public/images/buttons/menu.svg"));
var arrow_back_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/arrow_back.svg */ "./src/public/images/buttons/arrow_back.svg"));
var toggle_on_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/toggle_on.svg */ "./src/public/images/buttons/toggle_on.svg"));
var toggle_off_svg_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../public/images/buttons/toggle_off.svg */ "./src/public/images/buttons/toggle_off.svg"));
var Icon;
(function (Icon) {
    Icon[Icon["BACK"] = 0] = "BACK";
    Icon[Icon["HOME"] = 1] = "HOME";
    Icon[Icon["OVERVIEW"] = 2] = "OVERVIEW";
    Icon[Icon["POWER"] = 3] = "POWER";
    Icon[Icon["VOLUME_UP"] = 4] = "VOLUME_UP";
    Icon[Icon["VOLUME_DOWN"] = 5] = "VOLUME_DOWN";
    Icon[Icon["MORE"] = 6] = "MORE";
    Icon[Icon["CAMERA"] = 7] = "CAMERA";
    Icon[Icon["KEYBOARD"] = 8] = "KEYBOARD";
    Icon[Icon["CANCEL"] = 9] = "CANCEL";
    Icon[Icon["OFFLINE"] = 10] = "OFFLINE";
    Icon[Icon["REFRESH"] = 11] = "REFRESH";
    Icon[Icon["SETTINGS"] = 12] = "SETTINGS";
    Icon[Icon["MENU"] = 13] = "MENU";
    Icon[Icon["ARROW_BACK"] = 14] = "ARROW_BACK";
    Icon[Icon["TOGGLE_ON"] = 15] = "TOGGLE_ON";
    Icon[Icon["TOGGLE_OFF"] = 16] = "TOGGLE_OFF";
})(Icon = exports.Icon || (exports.Icon = {}));
var SvgImage = (function () {
    function SvgImage() {
    }
    SvgImage.getSvgString = function (type) {
        switch (type) {
            case Icon.KEYBOARD:
                return ic_keyboard_678_48dp_svg_1.default;
            case Icon.MORE:
                return ic_more_horiz_678_48dp_svg_1.default;
            case Icon.CAMERA:
                return ic_photo_camera_678_48dp_svg_1.default;
            case Icon.POWER:
                return ic_power_settings_new_678_48px_svg_1.default;
            case Icon.VOLUME_DOWN:
                return ic_volume_down_678_48px_svg_1.default;
            case Icon.VOLUME_UP:
                return ic_volume_up_678_48px_svg_1.default;
            case Icon.BACK:
                return System_Back_678_svg_1.default;
            case Icon.HOME:
                return System_Home_678_svg_1.default;
            case Icon.OVERVIEW:
                return System_Overview_678_svg_1.default;
            case Icon.CANCEL:
                return cancel_svg_1.default;
            case Icon.OFFLINE:
                return offline_svg_1.default;
            case Icon.REFRESH:
                return refresh_svg_1.default;
            case Icon.SETTINGS:
                return settings_svg_1.default;
            case Icon.MENU:
                return menu_svg_1.default;
            case Icon.ARROW_BACK:
                return arrow_back_svg_1.default;
            case Icon.TOGGLE_ON:
                return toggle_on_svg_1.default;
            case Icon.TOGGLE_OFF:
                return toggle_off_svg_1.default;
            default:
                return '';
        }
    };
    SvgImage.create = function (type) {
        var dummy = document.createElement('div');
        dummy.innerHTML = this.getSvgString(type);
        var svg = dummy.children[0];
        var titles = svg.getElementsByTagName('title');
        for (var i = 0, l = titles.length; i < l; i++) {
            svg.removeChild(titles[i]);
        }
        return svg;
    };
    SvgImage.Icon = Icon;
    return SvgImage;
}());
exports["default"] = SvgImage;


/***/ }),

/***/ "./src/common/Action.ts":
/*!******************************!*\
  !*** ./src/common/Action.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ACTION = void 0;
var ACTION;
(function (ACTION) {
    ACTION["LIST_HOSTS"] = "list-hosts";
    ACTION["APPL_DEVICE_LIST"] = "appl-device-list";
    ACTION["GOOG_DEVICE_LIST"] = "goog-device-list";
    ACTION["MULTIPLEX"] = "multiplex";
    ACTION["SHELL"] = "shell";
    ACTION["PROXY_WS"] = "proxy-ws";
    ACTION["PROXY_ADB"] = "proxy-adb";
    ACTION["DEVTOOLS"] = "devtools";
    ACTION["STREAM_SCRCPY"] = "stream";
    ACTION["STREAM_WS_QVH"] = "stream-qvh";
    ACTION["STREAM_MJPEG"] = "stream-mjpeg";
    ACTION["PROXY_WDA"] = "proxy-wda";
    ACTION["FILE_LISTING"] = "list-files";
})(ACTION = exports.ACTION || (exports.ACTION = {}));


/***/ }),

/***/ "./src/common/ChannelCode.ts":
/*!***********************************!*\
  !*** ./src/common/ChannelCode.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelCode = void 0;
var ChannelCode;
(function (ChannelCode) {
    ChannelCode["FSLS"] = "FSLS";
    ChannelCode["HSTS"] = "HSTS";
    ChannelCode["SHEL"] = "SHEL";
    ChannelCode["GTRC"] = "GTRC";
    ChannelCode["ATRC"] = "ATRC";
    ChannelCode["WDAP"] = "WDAP";
    ChannelCode["QVHS"] = "QVHS";
})(ChannelCode = exports.ChannelCode || (exports.ChannelCode = {}));


/***/ }),

/***/ "./src/common/Constants.ts":
/*!*********************************!*\
  !*** ./src/common/Constants.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ARGS_STRING = exports.SERVER_PROCESS_NAME = exports.LOG_LEVEL = exports.SERVER_TYPE = exports.SERVER_VERSION = exports.SERVER_PORT = exports.SERVER_PACKAGE = void 0;
exports.SERVER_PACKAGE = 'com.genymobile.scrcpy.Server';
exports.SERVER_PORT = 8886;
exports.SERVER_VERSION = '1.19-ws6';
exports.SERVER_TYPE = 'web';
exports.LOG_LEVEL = 'ERROR';
var SCRCPY_LISTENS_ON_ALL_INTERFACES;
SCRCPY_LISTENS_ON_ALL_INTERFACES = true;
var ARGUMENTS = [exports.SERVER_VERSION, exports.SERVER_TYPE, exports.LOG_LEVEL, exports.SERVER_PORT, SCRCPY_LISTENS_ON_ALL_INTERFACES];
exports.SERVER_PROCESS_NAME = 'app_process';
exports.ARGS_STRING = "/ ".concat(exports.SERVER_PACKAGE, " ").concat(ARGUMENTS.join(' '), " 2>&1 > /dev/null");


/***/ }),

/***/ "./src/common/ControlCenterCommand.ts":
/*!********************************************!*\
  !*** ./src/common/ControlCenterCommand.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ControlCenterCommand = void 0;
var ControlCenterCommand = (function () {
    function ControlCenterCommand() {
        this.id = -1;
        this.type = '';
        this.pid = 0;
        this.udid = '';
        this.method = '';
    }
    ControlCenterCommand.fromJSON = function (json) {
        var body = JSON.parse(json);
        if (!body) {
            throw new Error('Invalid input');
        }
        var command = new ControlCenterCommand();
        var data = (command.data = body.data);
        command.id = body.id;
        command.type = body.type;
        if (typeof data.udid === 'string') {
            command.udid = data.udid;
        }
        switch (body.type) {
            case this.KILL_SERVER:
                if (typeof data.pid !== 'number' && data.pid <= 0) {
                    throw new Error('Invalid "pid" value');
                }
                command.pid = data.pid;
                return command;
            case this.REQUEST_WDA:
                if (typeof data.method !== 'string') {
                    throw new Error('Invalid "method" value');
                }
                command.method = data.method;
                command.args = data.args;
                return command;
            case this.START_SERVER:
            case this.UPDATE_INTERFACES:
            case this.CONFIGURE_STREAM:
            case this.RUN_WDA:
                return command;
            default:
                throw new Error("Unknown command \"".concat(body.command, "\""));
        }
    };
    ControlCenterCommand.prototype.getType = function () {
        return this.type;
    };
    ControlCenterCommand.prototype.getPid = function () {
        return this.pid;
    };
    ControlCenterCommand.prototype.getUdid = function () {
        return this.udid;
    };
    ControlCenterCommand.prototype.getId = function () {
        return this.id;
    };
    ControlCenterCommand.prototype.getMethod = function () {
        return this.method;
    };
    ControlCenterCommand.prototype.getData = function () {
        return this.data;
    };
    ControlCenterCommand.prototype.getArgs = function () {
        return this.args;
    };
    ControlCenterCommand.KILL_SERVER = 'kill_server';
    ControlCenterCommand.START_SERVER = 'start_server';
    ControlCenterCommand.UPDATE_INTERFACES = 'update_interfaces';
    ControlCenterCommand.CONFIGURE_STREAM = 'configure_stream';
    ControlCenterCommand.RUN_WDA = 'run-wda';
    ControlCenterCommand.REQUEST_WDA = 'request-wda';
    return ControlCenterCommand;
}());
exports.ControlCenterCommand = ControlCenterCommand;


/***/ }),

/***/ "./src/common/DeviceState.ts":
/*!***********************************!*\
  !*** ./src/common/DeviceState.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeviceState = void 0;
var DeviceState;
(function (DeviceState) {
    DeviceState["DEVICE"] = "device";
    DeviceState["DISCONNECTED"] = "disconnected";
    DeviceState["CONNECTED"] = "Connected";
})(DeviceState = exports.DeviceState || (exports.DeviceState = {}));


/***/ }),

/***/ "./src/common/HostTrackerMessage.ts":
/*!******************************************!*\
  !*** ./src/common/HostTrackerMessage.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageType = void 0;
var MessageType;
(function (MessageType) {
    MessageType["HOSTS"] = "hosts";
    MessageType["ERROR"] = "error";
})(MessageType = exports.MessageType || (exports.MessageType = {}));


/***/ }),

/***/ "./src/common/TypedEmitter.ts":
/*!************************************!*\
  !*** ./src/common/TypedEmitter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypedEmitter = void 0;
var events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
var TypedEmitter = (function () {
    function TypedEmitter() {
        this.emitter = new events_1.EventEmitter();
    }
    TypedEmitter.prototype.addEventListener = function (eventName, fn) {
        this.emitter.on(eventName, fn);
    };
    TypedEmitter.prototype.removeEventListener = function (eventName, fn) {
        this.emitter.off(eventName, fn);
    };
    TypedEmitter.prototype.dispatchEvent = function (event) {
        return this.emitter.emit(event.type, event);
    };
    TypedEmitter.prototype.on = function (eventName, fn) {
        this.emitter.on(eventName, fn);
    };
    TypedEmitter.prototype.once = function (eventName, fn) {
        this.emitter.once(eventName, fn);
    };
    TypedEmitter.prototype.off = function (eventName, fn) {
        this.emitter.off(eventName, fn);
    };
    TypedEmitter.prototype.emit = function (eventName, params) {
        return this.emitter.emit(eventName, params);
    };
    return TypedEmitter;
}());
exports.TypedEmitter = TypedEmitter;


/***/ }),

/***/ "./src/packages/multiplexer/CloseEventClass.ts":
/*!*****************************************************!*\
  !*** ./src/packages/multiplexer/CloseEventClass.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloseEventClass = exports.CloseEvent2 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Event_1 = __webpack_require__(/*! ./Event */ "./src/packages/multiplexer/Event.ts");
var CloseEvent2 = (function (_super) {
    tslib_1.__extends(CloseEvent2, _super);
    function CloseEvent2(type, _a) {
        var _b = _a === void 0 ? {} : _a, code = _b.code, reason = _b.reason;
        var _this = _super.call(this, type) || this;
        _this.code = code || 0;
        _this.reason = reason || '';
        _this.wasClean = _this.code === 0;
        return _this;
    }
    return CloseEvent2;
}(Event_1.Event2));
exports.CloseEvent2 = CloseEvent2;
exports.CloseEventClass = typeof CloseEvent !== 'undefined' ? CloseEvent : CloseEvent2;


/***/ }),

/***/ "./src/packages/multiplexer/ErrorEventClass.ts":
/*!*****************************************************!*\
  !*** ./src/packages/multiplexer/ErrorEventClass.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorEventClass = exports.ErrorEvent2 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Event_1 = __webpack_require__(/*! ./Event */ "./src/packages/multiplexer/Event.ts");
var ErrorEvent2 = (function (_super) {
    tslib_1.__extends(ErrorEvent2, _super);
    function ErrorEvent2(type, _a) {
        var _b = _a === void 0 ? {} : _a, colno = _b.colno, error = _b.error, filename = _b.filename, lineno = _b.lineno, message = _b.message;
        var _this = _super.call(this, type) || this;
        _this.error = error;
        _this.colno = colno || 0;
        _this.filename = filename || '';
        _this.lineno = lineno || 0;
        _this.message = message || '';
        return _this;
    }
    return ErrorEvent2;
}(Event_1.Event2));
exports.ErrorEvent2 = ErrorEvent2;
exports.ErrorEventClass = typeof ErrorEvent !== 'undefined' ? ErrorEvent : ErrorEvent2;


/***/ }),

/***/ "./src/packages/multiplexer/Event.ts":
/*!*******************************************!*\
  !*** ./src/packages/multiplexer/Event.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventClass = exports.Event2 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Event2 = (function () {
    function Event2(type, options) {
        if (options === void 0) { options = { cancelable: true, bubbles: true, composed: false }; }
        this.isTrusted = true;
        this.AT_TARGET = 0;
        this.BUBBLING_PHASE = 0;
        this.CAPTURING_PHASE = 0;
        this.NONE = 0;
        var _a = tslib_1.__assign({}, options), cancelable = _a.cancelable, bubbles = _a.bubbles, composed = _a.composed;
        this.cancelable = !!cancelable;
        this.bubbles = !!bubbles;
        this.composed = !!composed;
        this.type = "".concat(type);
        this.defaultPrevented = false;
        this.timeStamp = Date.now();
        this.target = null;
    }
    Event2.prototype.stopImmediatePropagation = function () {
    };
    Event2.prototype.preventDefault = function () {
        this.defaultPrevented = true;
    };
    Object.defineProperty(Event2.prototype, "currentTarget", {
        get: function () {
            return this.target;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Event2.prototype, "srcElement", {
        get: function () {
            return this.target;
        },
        enumerable: false,
        configurable: true
    });
    Event2.prototype.composedPath = function () {
        return this.target ? [this.target] : [];
    };
    Object.defineProperty(Event2.prototype, "returnValue", {
        get: function () {
            return !this.defaultPrevented;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Event2.prototype, "eventPhase", {
        get: function () {
            return this.target ? Event.AT_TARGET : Event.NONE;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Event2.prototype, "cancelBubble", {
        get: function () {
            return false;
        },
        set: function (value) {
            if (value) {
                this.stopPropagation();
            }
        },
        enumerable: false,
        configurable: true
    });
    Event2.prototype.stopPropagation = function () {
    };
    Event2.prototype.initEvent = function (type, bubbles, cancelable) {
        this.type = type;
        if (arguments.length > 1) {
            this.bubbles = !!bubbles;
        }
        if (arguments.length > 2) {
            this.cancelable = !!cancelable;
        }
    };
    Event2.NONE = 0;
    Event2.CAPTURING_PHASE = 1;
    Event2.AT_TARGET = 2;
    Event2.BUBBLING_PHASE = 3;
    return Event2;
}());
exports.Event2 = Event2;
exports.EventClass = typeof Event !== 'undefined' ? Event : Event2;


/***/ }),

/***/ "./src/packages/multiplexer/Message.ts":
/*!*********************************************!*\
  !*** ./src/packages/multiplexer/Message.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var MessageType_1 = __webpack_require__(/*! ./MessageType */ "./src/packages/multiplexer/MessageType.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../app/Util */ "./src/app/Util.ts"));
var CloseEventClass_1 = __webpack_require__(/*! ./CloseEventClass */ "./src/packages/multiplexer/CloseEventClass.ts");
var Message = (function () {
    function Message(type, channelId, data) {
        this.type = type;
        this.channelId = channelId;
        this.data = data;
    }
    Message.parse = function (buffer) {
        var view = Buffer.from(buffer);
        var type = view.readUInt8(0);
        var channelId = view.readUInt32LE(1);
        var data = buffer.slice(5);
        return new Message(type, channelId, data);
    };
    Message.fromCloseEvent = function (id, code, reason) {
        var reasonBuffer = reason ? Util_1.default.stringToUtf8ByteArray(reason) : Buffer.alloc(0);
        var buffer = Buffer.alloc(2 + 4 + reasonBuffer.byteLength);
        buffer.writeUInt16LE(code, 0);
        if (reasonBuffer.byteLength) {
            buffer.writeUInt32LE(reasonBuffer.byteLength, 2);
            buffer.set(reasonBuffer, 6);
        }
        return new Message(MessageType_1.MessageType.CloseChannel, id, buffer);
    };
    Message.createBuffer = function (type, channelId, data) {
        var result = Buffer.alloc(5 + (data ? data.byteLength : 0));
        result.writeUInt8(type, 0);
        result.writeUInt32LE(channelId, 1);
        if (data === null || data === void 0 ? void 0 : data.byteLength) {
            result.set(Buffer.from(data), 5);
        }
        return result;
    };
    Message.prototype.toCloseEvent = function () {
        var code;
        var reason;
        if (this.data && this.data.byteLength) {
            var buffer = Buffer.from(this.data);
            code = buffer.readUInt16LE(0);
            if (buffer.byteLength > 6) {
                var length_1 = buffer.readUInt32LE(2);
                reason = Util_1.default.utf8ByteArrayToString(buffer.slice(6, 6 + length_1));
            }
        }
        return new CloseEventClass_1.CloseEventClass('close', {
            code: code,
            reason: reason,
            wasClean: code === 1000,
        });
    };
    Message.prototype.toBuffer = function () {
        return Message.createBuffer(this.type, this.channelId, this.data);
    };
    return Message;
}());
exports.Message = Message;


/***/ }),

/***/ "./src/packages/multiplexer/MessageEventClass.ts":
/*!*******************************************************!*\
  !*** ./src/packages/multiplexer/MessageEventClass.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageEventClass = exports.MessageEvent2 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Event_1 = __webpack_require__(/*! ./Event */ "./src/packages/multiplexer/Event.ts");
var MessageEvent2 = (function (_super) {
    tslib_1.__extends(MessageEvent2, _super);
    function MessageEvent2(type, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.data, data = _c === void 0 ? null : _c, _d = _b.origin, origin = _d === void 0 ? '' : _d, _e = _b.lastEventId, lastEventId = _e === void 0 ? '' : _e, _f = _b.source, source = _f === void 0 ? null : _f, _g = _b.ports, ports = _g === void 0 ? [] : _g;
        var _this = _super.call(this, type) || this;
        _this.data = data;
        _this.origin = "".concat(origin);
        _this.lastEventId = "".concat(lastEventId);
        _this.source = source;
        _this.ports = tslib_1.__spreadArray([], tslib_1.__read(ports), false);
        return _this;
    }
    MessageEvent2.prototype.initMessageEvent = function () {
        throw Error('Deprecated method');
    };
    return MessageEvent2;
}(Event_1.Event2));
exports.MessageEvent2 = MessageEvent2;
exports.MessageEventClass = typeof MessageEvent !== 'undefined' ? MessageEvent : MessageEvent2;


/***/ }),

/***/ "./src/packages/multiplexer/MessageType.ts":
/*!*************************************************!*\
  !*** ./src/packages/multiplexer/MessageType.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageType = void 0;
var MessageType;
(function (MessageType) {
    MessageType[MessageType["CreateChannel"] = 4] = "CreateChannel";
    MessageType[MessageType["CloseChannel"] = 8] = "CloseChannel";
    MessageType[MessageType["RawBinaryData"] = 16] = "RawBinaryData";
    MessageType[MessageType["RawStringData"] = 32] = "RawStringData";
    MessageType[MessageType["Data"] = 64] = "Data";
})(MessageType = exports.MessageType || (exports.MessageType = {}));


/***/ }),

/***/ "./src/packages/multiplexer/Multiplexer.ts":
/*!*************************************************!*\
  !*** ./src/packages/multiplexer/Multiplexer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Multiplexer = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var TypedEmitter_1 = __webpack_require__(/*! ../../common/TypedEmitter */ "./src/common/TypedEmitter.ts");
var Message_1 = __webpack_require__(/*! ./Message */ "./src/packages/multiplexer/Message.ts");
var MessageType_1 = __webpack_require__(/*! ./MessageType */ "./src/packages/multiplexer/MessageType.ts");
var Event_1 = __webpack_require__(/*! ./Event */ "./src/packages/multiplexer/Event.ts");
var CloseEventClass_1 = __webpack_require__(/*! ./CloseEventClass */ "./src/packages/multiplexer/CloseEventClass.ts");
var ErrorEventClass_1 = __webpack_require__(/*! ./ErrorEventClass */ "./src/packages/multiplexer/ErrorEventClass.ts");
var MessageEventClass_1 = __webpack_require__(/*! ./MessageEventClass */ "./src/packages/multiplexer/MessageEventClass.ts");
var Util_1 = tslib_1.__importDefault(__webpack_require__(/*! ../../app/Util */ "./src/app/Util.ts"));
var Multiplexer = (function (_super) {
    tslib_1.__extends(Multiplexer, _super);
    function Multiplexer(ws, _id, emitter) {
        if (_id === void 0) { _id = 0; }
        var _this = _super.call(this) || this;
        _this.ws = ws;
        _this._id = _id;
        _this.CONNECTING = 0;
        _this.OPEN = 1;
        _this.CLOSING = 2;
        _this.CLOSED = 3;
        _this.binaryType = 'blob';
        _this.channels = new Map();
        _this.nextId = 0;
        _this.maxId = 4294967296;
        _this.storage = [];
        _this.emptyTimerScheduled = false;
        _this.onclose = null;
        _this.onerror = null;
        _this.onmessage = null;
        _this.onopen = null;
        _this.url = '';
        _this.readyState = _this.CONNECTING;
        if (_this._id === 0) {
            ws.binaryType = 'arraybuffer';
            _this.readyState = _this.ws.readyState;
        }
        _this.messageEmitter = emitter || ws;
        var onOpenHandler = function (event) {
            _this.readyState = _this.ws.readyState;
            _this.dispatchEvent(event);
        };
        var onCloseHandler = function (event) {
            _this.readyState = _this.ws.readyState;
            _this.dispatchEvent(event);
            _this.channels.clear();
        };
        var onErrorHandler = function (event) {
            _this.readyState = _this.ws.readyState;
            _this.dispatchEvent(event);
            _this.channels.clear();
        };
        var onMessageHandler = function (event) {
            var data = event.data;
            var message = Message_1.Message.parse(data);
            switch (message.type) {
                case MessageType_1.MessageType.CreateChannel: {
                    var channelId = message.channelId, data_1 = message.data;
                    if (_this.nextId < channelId) {
                        _this.nextId = channelId;
                    }
                    var channel = _this._createChannel(channelId, false);
                    _this.emit('channel', { channel: channel, data: data_1 });
                    break;
                }
                case MessageType_1.MessageType.RawStringData: {
                    var data_2 = _this.channels.get(message.channelId);
                    if (data_2) {
                        var channel = data_2.channel;
                        var msg = new MessageEventClass_1.MessageEventClass('message', {
                            data: Util_1.default.utf8ByteArrayToString(Buffer.from(message.data)),
                            lastEventId: event.lastEventId,
                            origin: event.origin,
                            source: event.source,
                        });
                        channel.dispatchEvent(msg);
                    }
                    else {
                        console.error("Channel with id (".concat(message.channelId, ") not found"));
                    }
                    break;
                }
                case MessageType_1.MessageType.RawBinaryData: {
                    var data_3 = _this.channels.get(message.channelId);
                    if (data_3) {
                        var channel = data_3.channel;
                        var msg = new MessageEventClass_1.MessageEventClass('message', {
                            data: message.data,
                            lastEventId: event.lastEventId,
                            origin: event.origin,
                            source: event.source,
                        });
                        channel.dispatchEvent(msg);
                    }
                    else {
                        console.error("Channel with id (".concat(message.channelId, ") not found"));
                    }
                    break;
                }
                case MessageType_1.MessageType.Data: {
                    var data_4 = _this.channels.get(message.channelId);
                    if (data_4) {
                        var emitter_1 = data_4.emitter;
                        var msg = new MessageEventClass_1.MessageEventClass('message', {
                            data: message.data,
                            lastEventId: event.lastEventId,
                            origin: event.origin,
                            source: event.source,
                        });
                        emitter_1.dispatchEvent(msg);
                    }
                    else {
                        console.error("Channel with id (".concat(message.channelId, ") not found"));
                    }
                    break;
                }
                case MessageType_1.MessageType.CloseChannel: {
                    var data_5 = _this.channels.get(message.channelId);
                    if (data_5) {
                        var channel = data_5.channel;
                        channel.readyState = channel.CLOSING;
                        try {
                            channel.dispatchEvent(message.toCloseEvent());
                        }
                        finally {
                            channel.readyState = channel.CLOSED;
                        }
                    }
                    else {
                        console.error("Channel with id (".concat(message.channelId, ") not found"));
                    }
                    break;
                }
                default:
                    var error = new Error("Unsupported message type: ".concat(message.type));
                    _this.dispatchEvent(new ErrorEventClass_1.ErrorEventClass('error', { error: error }));
            }
        };
        var onThisOpenHandler = function () {
            if (!_this.storage.length) {
                return;
            }
            var ws = _this.ws;
            if (ws instanceof Multiplexer) {
                _this.storage.forEach(function (data) { return ws.sendData(data); });
            }
            else {
                _this.storage.forEach(function (data) { return ws.send(data); });
            }
            _this.storage.length = 0;
        };
        var onThisCloseHandler = function () {
            ws.removeEventListener('open', onOpenHandler);
            ws.removeEventListener('error', onErrorHandler);
            ws.removeEventListener('close', onCloseHandler);
            _this.messageEmitter.removeEventListener('message', onMessageHandler);
            _this.off('close', onThisCloseHandler);
            _this.off('open', onThisOpenHandler);
        };
        ws.addEventListener('open', onOpenHandler);
        ws.addEventListener('error', onErrorHandler);
        ws.addEventListener('close', onCloseHandler);
        _this.messageEmitter.addEventListener('message', onMessageHandler);
        _this.on('close', onThisCloseHandler);
        _this.on('open', onThisOpenHandler);
        _this.scheduleEmptyEvent();
        return _this;
    }
    Multiplexer.wrap = function (ws) {
        return new Multiplexer(ws);
    };
    Object.defineProperty(Multiplexer.prototype, "bufferedAmount", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Multiplexer.prototype, "extensions", {
        get: function () {
            return '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Multiplexer.prototype, "protocol", {
        get: function () {
            return '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Multiplexer.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Multiplexer.prototype.scheduleEmptyEvent = function () {
        var _this = this;
        if (this.emptyTimerScheduled) {
            return;
        }
        this.emptyTimerScheduled = true;
        Promise.resolve().then(function () {
            if (_this.emptyTimerScheduled) {
                _this.emptyTimerScheduled = false;
                _this.emit('empty', _this);
            }
        });
    };
    Multiplexer.prototype.clearEmptyEvent = function () {
        if (this.emptyTimerScheduled) {
            this.emptyTimerScheduled = false;
        }
    };
    Multiplexer.prototype.close = function (code, reason) {
        if (code === void 0) { code = 1000; }
        if (this.readyState === this.CLOSED || this.readyState === this.CLOSING) {
            return;
        }
        if (this._id) {
            this.readyState = this.CLOSING;
            try {
                var message = Message_1.Message.fromCloseEvent(this._id, code, reason).toBuffer();
                if (this.ws instanceof Multiplexer) {
                    this.ws.sendData(message);
                }
                else {
                    this.ws.send(message);
                }
                this.emit('close', new CloseEventClass_1.CloseEventClass('close', { code: code, reason: reason }));
            }
            finally {
                this.readyState = this.CLOSED;
            }
        }
        else {
            this.ws.close(code, reason);
        }
    };
    Multiplexer.prototype.send = function (data) {
        if (this.ws instanceof Multiplexer) {
            if (typeof data === 'string') {
                data = Message_1.Message.createBuffer(MessageType_1.MessageType.RawStringData, this._id, Buffer.from(data));
            }
            else {
                data = Message_1.Message.createBuffer(MessageType_1.MessageType.RawBinaryData, this._id, Buffer.from(data));
            }
        }
        this._send(data);
    };
    Multiplexer.prototype.sendData = function (data) {
        if (this.ws instanceof Multiplexer) {
            data = Message_1.Message.createBuffer(MessageType_1.MessageType.Data, this._id, Buffer.from(data));
        }
        this._send(data);
    };
    Multiplexer.prototype._send = function (data) {
        var readyState = this.readyState;
        if (readyState === this.OPEN) {
            if (this.ws instanceof Multiplexer) {
                this.ws.sendData(data);
            }
            else {
                this.ws.send(data);
            }
        }
        else if (readyState === this.ws.CONNECTING) {
            this.storage.push(data);
        }
        else {
            throw Error("Socket is already in CLOSING or CLOSED state.");
        }
    };
    Multiplexer.prototype._createChannel = function (id, sendOpenEvent) {
        var _this = this;
        var emitter = new TypedEmitter_1.TypedEmitter();
        var channel = new Multiplexer(this, id, emitter);
        this.channels.set(id, { channel: channel, emitter: emitter });
        if (sendOpenEvent) {
            if (this.readyState === this.OPEN) {
                Util_1.default.setImmediate(function () {
                    channel.readyState = _this.OPEN;
                    channel.dispatchEvent(new Event_1.EventClass('open'));
                });
            }
        }
        else {
            channel.readyState = this.readyState;
        }
        channel.addEventListener('close', function () {
            _this.channels.delete(id);
            if (!_this.channels.size) {
                _this.scheduleEmptyEvent();
            }
        });
        this.clearEmptyEvent();
        return channel;
    };
    Multiplexer.prototype.createChannel = function (data) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
            throw Error('Incorrect socket state');
        }
        var id = this.getNextId();
        var channel = this._createChannel(id, true);
        this.sendData(Message_1.Message.createBuffer(MessageType_1.MessageType.CreateChannel, id, data));
        return channel;
    };
    Multiplexer.prototype.getNextId = function () {
        var hitTop = false;
        while (this.channels.has(++this.nextId)) {
            if (this.nextId === this.maxId) {
                if (hitTop) {
                    throw Error('No available id');
                }
                this.nextId = 0;
                hitTop = true;
            }
        }
        return this.nextId;
    };
    Multiplexer.prototype.dispatchEvent = function (event) {
        if (event.type === 'close' && typeof this.onclose === 'function') {
            Reflect.apply(this.onclose, this, [event]);
        }
        if (event.type === 'open' && typeof this.onopen === 'function') {
            Reflect.apply(this.onopen, this, [event]);
        }
        if (event.type === 'message' && typeof this.onmessage === 'function') {
            Reflect.apply(this.onmessage, this, [event]);
        }
        if (event.type === 'error' && typeof this.onerror === 'function') {
            Reflect.apply(this.onerror, this, [event]);
        }
        return _super.prototype.dispatchEvent.call(this, event);
    };
    return Multiplexer;
}(TypedEmitter_1.TypedEmitter));
exports.Multiplexer = Multiplexer;


/***/ }),

/***/ "./src/types/RemoteDevtoolsCommand.ts":
/*!********************************************!*\
  !*** ./src/types/RemoteDevtoolsCommand.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoteDevtoolsCommand = void 0;
var RemoteDevtoolsCommand;
(function (RemoteDevtoolsCommand) {
    RemoteDevtoolsCommand["LIST_DEVTOOLS"] = "list_devtools";
})(RemoteDevtoolsCommand = exports.RemoteDevtoolsCommand || (exports.RemoteDevtoolsCommand = {}));


/***/ }),

/***/ "./vendor/h264-live-player/Canvas.ts":
/*!*******************************************!*\
  !*** ./vendor/h264-live-player/Canvas.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Canvas = (function () {
    function Canvas(canvas, size) {
        this.canvas = canvas;
        this.size = size;
    }
    return Canvas;
}());
exports["default"] = Canvas;


/***/ }),

/***/ "./vendor/h264-live-player/Program.ts":
/*!********************************************!*\
  !*** ./vendor/h264-live-player/Program.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var assert_1 = tslib_1.__importDefault(__webpack_require__(/*! ./utils/assert */ "./vendor/h264-live-player/utils/assert.ts"));
var Program = (function () {
    function Program(gl) {
        this.gl = gl;
        this.program = this.gl.createProgram();
    }
    Program.prototype.attach = function (shader) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        if (!shader.shader) {
            throw Error("Shader type is ".concat(typeof shader.shader));
        }
        this.gl.attachShader(this.program, shader.shader);
    };
    Program.prototype.link = function () {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        this.gl.linkProgram(this.program);
        (0, assert_1.default)(this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS), 'Unable to initialize the shader program.');
    };
    Program.prototype.use = function () {
        this.gl.useProgram(this.program);
    };
    Program.prototype.getAttributeLocation = function (name) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        return this.gl.getAttribLocation(this.program, name);
    };
    Program.prototype.setMatrixUniform = function (name, array) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        var uniform = this.gl.getUniformLocation(this.program, name);
        this.gl.uniformMatrix4fv(uniform, false, array);
    };
    return Program;
}());
exports["default"] = Program;


/***/ }),

/***/ "./vendor/h264-live-player/Script.ts":
/*!*******************************************!*\
  !*** ./vendor/h264-live-player/Script.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Script = (function () {
    function Script(type, source) {
        this.type = type;
        this.source = source;
    }
    Script.createFromElementId = function (id) {
        var script = document.getElementById(id);
        if (!script) {
            throw Error('Could not find shader with ID: ' + id);
        }
        var source = '';
        var currentChild = script.firstChild;
        while (currentChild) {
            if (currentChild.nodeType === 3) {
                source += currentChild.textContent;
            }
            currentChild = currentChild.nextSibling;
        }
        return new Script(script.type, source);
    };
    Script.createFromSource = function (type, source) {
        return new Script(type, source);
    };
    return Script;
}());
exports["default"] = Script;


/***/ }),

/***/ "./vendor/h264-live-player/Shader.ts":
/*!*******************************************!*\
  !*** ./vendor/h264-live-player/Shader.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var error_1 = tslib_1.__importDefault(__webpack_require__(/*! ./utils/error */ "./vendor/h264-live-player/utils/error.ts"));
var Shader = (function () {
    function Shader(gl, script) {
        this.gl = gl;
        this.script = script;
        if (script.type === 'x-shader/x-fragment') {
            this.shader = gl.createShader(gl.FRAGMENT_SHADER);
        }
        else if (script.type === 'x-shader/x-vertex') {
            this.shader = gl.createShader(gl.VERTEX_SHADER);
        }
        else {
            (0, error_1.default)("Unknown shader type: ".concat(script.type));
            return;
        }
        if (!this.shader) {
            (0, error_1.default)("Shader is ".concat(typeof this.shader));
            return;
        }
        gl.shaderSource(this.shader, script.source);
        gl.compileShader(this.shader);
        if (!gl.getShaderParameter(this.shader, gl.COMPILE_STATUS)) {
            (0, error_1.default)('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(this.shader));
            return;
        }
    }
    return Shader;
}());
exports["default"] = Shader;


/***/ }),

/***/ "./vendor/h264-live-player/Texture.ts":
/*!********************************************!*\
  !*** ./vendor/h264-live-player/Texture.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var assert_1 = tslib_1.__importDefault(__webpack_require__(/*! ./utils/assert */ "./vendor/h264-live-player/utils/assert.ts"));
var Texture = (function () {
    function Texture(gl, size, format) {
        this.gl = gl;
        this.size = size;
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        this.format = format ? format : gl.LUMINANCE;
        if (size) {
            gl.texImage2D(gl.TEXTURE_2D, 0, this.format, size.w, size.h, 0, this.format, gl.UNSIGNED_BYTE, null);
        }
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        this.textureIDs = [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2];
    }
    Texture.create = function (gl, format) {
        return new Texture(gl, undefined, format);
    };
    Texture.prototype.fill = function (textureData, useTexSubImage2D, w, h) {
        if (typeof w === 'undefined' || typeof h === 'undefined') {
            if (!this.size) {
                return;
            }
            w = this.size.w;
            h = this.size.h;
        }
        var gl = this.gl;
        (0, assert_1.default)(textureData.length >= w * h, 'Texture size mismatch, data:' + textureData.length + ', texture: ' + w * h);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        if (useTexSubImage2D) {
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, w, h, this.format, gl.UNSIGNED_BYTE, textureData);
        }
        else {
            gl.texImage2D(gl.TEXTURE_2D, 0, this.format, w, h, 0, this.format, gl.UNSIGNED_BYTE, textureData);
        }
    };
    Texture.prototype.image2dBuffer = function (buffer, width, height) {
        this.fill(buffer, false, width, height);
    };
    Texture.prototype.bind = function (n, program, name) {
        var gl = this.gl;
        if (!program.program) {
            return;
        }
        gl.activeTexture(this.textureIDs[n]);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.uniform1i(gl.getUniformLocation(program.program, name), n);
    };
    return Texture;
}());
exports["default"] = Texture;


/***/ }),

/***/ "./vendor/h264-live-player/WebGLCanvas.ts":
/*!************************************************!*\
  !*** ./vendor/h264-live-player/WebGLCanvas.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Texture_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Texture */ "./vendor/h264-live-player/Texture.ts"));
var error_1 = tslib_1.__importDefault(__webpack_require__(/*! ./utils/error */ "./vendor/h264-live-player/utils/error.ts"));
var sylvester_js_1 = __webpack_require__(/*! sylvester.js */ "./node_modules/sylvester.js/lib/index.js");
var Program_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Program */ "./vendor/h264-live-player/Program.ts"));
var Shader_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Shader */ "./vendor/h264-live-player/Shader.ts"));
var glUtils_1 = __webpack_require__(/*! ./utils/glUtils */ "./vendor/h264-live-player/utils/glUtils.ts");
var Script_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Script */ "./vendor/h264-live-player/Script.ts"));
var Canvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Canvas */ "./vendor/h264-live-player/Canvas.ts"));
var WebGLCanvas = (function (_super) {
    tslib_1.__extends(WebGLCanvas, _super);
    function WebGLCanvas(canvas, size, useFrameBuffer) {
        var _this = _super.call(this, canvas, size) || this;
        _this.canvas = canvas;
        _this.size = size;
        _this.canvas.width = size.w;
        _this.canvas.height = size.h;
        _this.onInitWebGL();
        _this.onInitShaders();
        _this.initBuffers();
        if (useFrameBuffer) {
            _this.initFramebuffer();
        }
        _this.onInitTextures();
        _this.initScene();
        return _this;
    }
    WebGLCanvas.prototype.initFramebuffer = function () {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        this.framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
        this.framebufferTexture = new Texture_1.default(gl, this.size, gl.RGBA);
        var renderbuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size.w, this.size.h);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.framebufferTexture.texture, 0);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    };
    WebGLCanvas.prototype.initBuffers = function () {
        var tmp;
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        this.quadVPBuffer = gl.createBuffer();
        if (!this.quadVPBuffer) {
            (0, error_1.default)("quadVPBuffer type is ".concat(typeof gl));
            return;
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVPBuffer);
        tmp = [
            1.0, 1.0, 0.0,
            -1.0, 1.0, 0.0,
            1.0, -1.0, 0.0,
            -1.0, -1.0, 0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tmp), gl.STATIC_DRAW);
        var scaleX = 1.0;
        var scaleY = 1.0;
        this.quadVTCBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVTCBuffer);
        tmp = [
            scaleX, 0.0,
            0.0, 0.0,
            scaleX, scaleY,
            0.0, scaleY
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tmp), gl.STATIC_DRAW);
    };
    WebGLCanvas.prototype.mvIdentity = function () {
        this.mvMatrix = sylvester_js_1.Matrix.I(4);
    };
    WebGLCanvas.prototype.mvMultiply = function (m) {
        this.mvMatrix = this.mvMatrix.x(m);
    };
    WebGLCanvas.prototype.mvTranslate = function (m) {
        var $V = sylvester_js_1.Vector.create;
        this.mvMultiply(sylvester_js_1.Matrix.Translation($V([m[0], m[1], m[2]])).ensure4x4());
    };
    WebGLCanvas.prototype.setMatrixUniforms = function () {
        if (!this.program) {
            (0, error_1.default)("Program type is ".concat(typeof this.program));
            return;
        }
        this.program.setMatrixUniform('uPMatrix', new Float32Array(this.perspectiveMatrix.flatten()));
        this.program.setMatrixUniform('uMVMatrix', new Float32Array(this.mvMatrix.flatten()));
    };
    WebGLCanvas.prototype.initScene = function () {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        this.perspectiveMatrix = (0, glUtils_1.makePerspective)(45, 1, 0.1, 100.0);
        this.mvIdentity();
        this.mvTranslate([0.0, 0.0, -2.4]);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVPBuffer);
        gl.vertexAttribPointer(this.vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVTCBuffer);
        gl.vertexAttribPointer(this.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);
        this.onInitSceneTextures();
        this.setMatrixUniforms();
        if (this.framebuffer) {
            console.log('Bound Frame Buffer');
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
        }
    };
    WebGLCanvas.prototype.toString = function () {
        return 'WebGLCanvas Size: ' + this.size;
    };
    WebGLCanvas.prototype.checkLastError = function (operation) {
        if (!this.gl || !this.glNames) {
            return;
        }
        var err = this.gl.getError();
        if (err !== this.gl.NO_ERROR) {
            var name_1 = this.glNames[err];
            name_1 = (name_1 !== undefined) ? name_1 + '(' + err + ')' :
                ('Unknown WebGL ENUM (0x' + err.toString(16) + ')');
            if (operation) {
                console.log('WebGL Error: %s, %s', operation, name_1);
            }
            else {
                console.log('WebGL Error: %s', name_1);
            }
            console.trace();
        }
    };
    WebGLCanvas.prototype.onInitWebGL = function () {
        try {
            this.gl = this.canvas.getContext('experimental-webgl', {
                preserveDrawingBuffer: true
            });
        }
        catch (e) {
        }
        if (!this.gl) {
            (0, error_1.default)('Unable to initialize WebGL. Your browser may not support it.');
            return;
        }
        if (this.glNames) {
            return;
        }
        this.glNames = {};
        for (var propertyName in this.gl) {
            if (this.gl.hasOwnProperty(propertyName)) {
                var value = this.gl[propertyName];
                if (typeof value === 'number') {
                    this.glNames[value] = propertyName;
                }
            }
        }
    };
    WebGLCanvas.prototype.onInitShaders = function () {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        this.program = new Program_1.default(gl);
        this.program.attach(new Shader_1.default(gl, WebGLCanvas.vertexShaderScript));
        this.program.attach(new Shader_1.default(gl, WebGLCanvas.fragmentShaderScript));
        this.program.link();
        this.program.use();
        this.vertexPositionAttribute = this.program.getAttributeLocation('aVertexPosition');
        gl.enableVertexAttribArray(this.vertexPositionAttribute);
        this.textureCoordAttribute = this.program.getAttributeLocation('aTextureCoord');
        gl.enableVertexAttribArray(this.textureCoordAttribute);
    };
    WebGLCanvas.prototype.onInitTextures = function () {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        this.texture = new Texture_1.default(gl, this.size, gl.RGBA);
    };
    WebGLCanvas.prototype.onInitSceneTextures = function () {
        if (!this.texture) {
            (0, error_1.default)("texture type is ".concat(typeof this.texture));
            return;
        }
        if (!this.program) {
            (0, error_1.default)("program type is ".concat(typeof this.texture));
            return;
        }
        this.texture.bind(0, this.program, 'texture');
    };
    WebGLCanvas.prototype.drawScene = function () {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    WebGLCanvas.prototype.readPixels = function (buffer) {
        var gl = this.gl;
        if (!gl) {
            (0, error_1.default)("gl type is ".concat(typeof gl));
            return;
        }
        gl.readPixels(0, 0, this.size.w, this.size.h, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
    };
    WebGLCanvas.vertexShaderScript = Script_1.default.createFromSource('x-shader/x-vertex', "\n      attribute vec3 aVertexPosition;\n      attribute vec2 aTextureCoord;\n      uniform mat4 uMVMatrix;\n      uniform mat4 uPMatrix;\n      varying highp vec2 vTextureCoord;\n      void main(void) {\n        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n        vTextureCoord = aTextureCoord;\n      }\n    ");
    WebGLCanvas.fragmentShaderScript = Script_1.default.createFromSource('x-shader/x-fragment', "\n      precision highp float;\n      varying highp vec2 vTextureCoord;\n      uniform sampler2D texture;\n      void main(void) {\n        gl_FragColor = texture2D(texture, vTextureCoord);\n      }\n    ");
    return WebGLCanvas;
}(Canvas_1.default));
exports["default"] = WebGLCanvas;


/***/ }),

/***/ "./vendor/h264-live-player/YUVCanvas.ts":
/*!**********************************************!*\
  !*** ./vendor/h264-live-player/YUVCanvas.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Canvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Canvas */ "./vendor/h264-live-player/Canvas.ts"));
var YUVCanvas = (function (_super) {
    tslib_1.__extends(YUVCanvas, _super);
    function YUVCanvas(canvas, size) {
        var _this = _super.call(this, canvas, size) || this;
        _this.canvas = canvas;
        _this.size = size;
        _this.canvasCtx = _this.canvas.getContext('2d');
        _this.canvasBuffer = _this.canvasCtx.createImageData(size.w, size.h);
        return _this;
    }
    YUVCanvas.prototype.decode = function (buffer, width, height) {
        if (!buffer) {
            return;
        }
        var lumaSize = width * height;
        var chromaSize = lumaSize >> 2;
        var ybuf = buffer.subarray(0, lumaSize);
        var ubuf = buffer.subarray(lumaSize, lumaSize + chromaSize);
        var vbuf = buffer.subarray(lumaSize + chromaSize, lumaSize + 2 * chromaSize);
        for (var y = 0; y < height; y++) {
            for (var x = 0; x < width; x++) {
                var yIndex = x + y * width;
                var uIndex = ~~(y / 2) * ~~(width / 2) + ~~(x / 2);
                var vIndex = ~~(y / 2) * ~~(width / 2) + ~~(x / 2);
                var R = 1.164 * (ybuf[yIndex] - 16) + 1.596 * (vbuf[vIndex] - 128);
                var G = 1.164 * (ybuf[yIndex] - 16) - 0.813 * (vbuf[vIndex] - 128) - 0.391 * (ubuf[uIndex] - 128);
                var B = 1.164 * (ybuf[yIndex] - 16) + 2.018 * (ubuf[uIndex] - 128);
                var rgbIndex = yIndex * 4;
                this.canvasBuffer.data[rgbIndex + 0] = R;
                this.canvasBuffer.data[rgbIndex + 1] = G;
                this.canvasBuffer.data[rgbIndex + 2] = B;
                this.canvasBuffer.data[rgbIndex + 3] = 0xff;
            }
        }
        this.canvasCtx.putImageData(this.canvasBuffer, 0, 0);
    };
    return YUVCanvas;
}(Canvas_1.default));
exports["default"] = YUVCanvas;


/***/ }),

/***/ "./vendor/h264-live-player/YUVWebGLCanvas.ts":
/*!***************************************************!*\
  !*** ./vendor/h264-live-player/YUVWebGLCanvas.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var WebGLCanvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ./WebGLCanvas */ "./vendor/h264-live-player/WebGLCanvas.ts"));
var Program_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Program */ "./vendor/h264-live-player/Program.ts"));
var Shader_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Shader */ "./vendor/h264-live-player/Shader.ts"));
var Script_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Script */ "./vendor/h264-live-player/Script.ts"));
var Texture_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Texture */ "./vendor/h264-live-player/Texture.ts"));
var YUVWebGLCanvas = (function (_super) {
    tslib_1.__extends(YUVWebGLCanvas, _super);
    function YUVWebGLCanvas(canvas, size) {
        var _this = _super.call(this, canvas, size, false) || this;
        _this.canvas = canvas;
        _this.size = size;
        return _this;
    }
    YUVWebGLCanvas.prototype.onInitShaders = function () {
        if (!this.gl) {
            return;
        }
        this.program = new Program_1.default(this.gl);
        this.program.attach(new Shader_1.default(this.gl, YUVWebGLCanvas.vertexShaderScript));
        this.program.attach(new Shader_1.default(this.gl, YUVWebGLCanvas.fragmentShaderScript));
        this.program.link();
        this.program.use();
        this.vertexPositionAttribute = this.program.getAttributeLocation('aVertexPosition');
        this.gl.enableVertexAttribArray(this.vertexPositionAttribute);
        this.textureCoordAttribute = this.program.getAttributeLocation('aTextureCoord');
        this.gl.enableVertexAttribArray(this.textureCoordAttribute);
    };
    YUVWebGLCanvas.prototype.onInitTextures = function () {
        if (!this.gl) {
            return;
        }
        this.YTexture = new Texture_1.default(this.gl, this.size);
        this.UTexture = new Texture_1.default(this.gl, this.size.getHalfSize());
        this.VTexture = new Texture_1.default(this.gl, this.size.getHalfSize());
    };
    YUVWebGLCanvas.prototype.onInitSceneTextures = function () {
        if (!this.program) {
            return;
        }
        if (!this.YTexture || !this.UTexture || !this.VTexture) {
            return;
        }
        this.YTexture.bind(0, this.program, 'YTexture');
        this.UTexture.bind(1, this.program, 'UTexture');
        this.VTexture.bind(2, this.program, 'VTexture');
    };
    YUVWebGLCanvas.prototype.fillYUVTextures = function (y, u, v) {
        if (!this.YTexture || !this.UTexture || !this.VTexture) {
            return;
        }
        this.YTexture.fill(y);
        this.UTexture.fill(u);
        this.VTexture.fill(v);
    };
    YUVWebGLCanvas.prototype.decode = function (buffer, width, height) {
        if (!buffer) {
            return;
        }
        if (!this.YTexture || !this.UTexture || !this.VTexture) {
            return;
        }
        var lumaSize = width * height;
        var chromaSize = lumaSize >> 2;
        this.fillYUVTextures(buffer.subarray(0, lumaSize), buffer.subarray(lumaSize, lumaSize + chromaSize), buffer.subarray(lumaSize + chromaSize, lumaSize + 2 * chromaSize));
        this.drawScene();
    };
    YUVWebGLCanvas.prototype.toString = function () {
        return 'YUVCanvas Size: ' + this.size;
    };
    YUVWebGLCanvas.vertexShaderScript = Script_1.default.createFromSource('x-shader/x-vertex', "\n      attribute vec3 aVertexPosition;\n      attribute vec2 aTextureCoord;\n      uniform mat4 uMVMatrix;\n      uniform mat4 uPMatrix;\n      varying highp vec2 vTextureCoord;\n      void main(void) {\n        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n        vTextureCoord = aTextureCoord;\n      }\n    ");
    YUVWebGLCanvas.fragmentShaderScript = Script_1.default.createFromSource('x-shader/x-fragment', "\n      precision highp float;\n      varying highp vec2 vTextureCoord;\n      uniform sampler2D YTexture;\n      uniform sampler2D UTexture;\n      uniform sampler2D VTexture;\n      const mat4 YUV2RGB = mat4\n      (\n       1.1643828125, 0, 1.59602734375, -.87078515625,\n       1.1643828125, -.39176171875, -.81296875, .52959375,\n       1.1643828125, 2.017234375, 0, -1.081390625,\n       0, 0, 0, 1\n      );\n\n      void main(void) {\n       gl_FragColor = vec4(\n         texture2D(YTexture,  vTextureCoord).x,\n         texture2D(UTexture, vTextureCoord).x,\n         texture2D(VTexture, vTextureCoord).x,\n         1\n       ) * YUV2RGB;\n      }");
    return YUVWebGLCanvas;
}(WebGLCanvas_1.default));
exports["default"] = YUVWebGLCanvas;


/***/ }),

/***/ "./vendor/h264-live-player/utils/assert.ts":
/*!*************************************************!*\
  !*** ./vendor/h264-live-player/utils/assert.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var error_1 = tslib_1.__importDefault(__webpack_require__(/*! ./error */ "./vendor/h264-live-player/utils/error.ts"));
function assert(condition, message) {
    if (!condition) {
        (0, error_1.default)(message);
        throw new Error(message);
    }
}
exports["default"] = assert;


/***/ }),

/***/ "./vendor/h264-live-player/utils/error.ts":
/*!************************************************!*\
  !*** ./vendor/h264-live-player/utils/error.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function error(message) {
    console.error(message);
    console.trace();
}
exports["default"] = error;


/***/ }),

/***/ "./vendor/h264-live-player/utils/glUtils.ts":
/*!**************************************************!*\
  !*** ./vendor/h264-live-player/utils/glUtils.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makePerspective = void 0;
var sylvester_js_1 = __webpack_require__(/*! sylvester.js */ "./node_modules/sylvester.js/lib/index.js");
var $M = sylvester_js_1.Matrix.create;
sylvester_js_1.Matrix.Translation = function (v) {
    if (v.elements.length === 2) {
        var r = sylvester_js_1.Matrix.I(3);
        r.elements[2][0] = v.elements[0];
        r.elements[2][1] = v.elements[1];
        return r;
    }
    if (v.elements.length === 3) {
        var r = sylvester_js_1.Matrix.I(4);
        r.elements[0][3] = v.elements[0];
        r.elements[1][3] = v.elements[1];
        r.elements[2][3] = v.elements[2];
        return r;
    }
    throw Error('Invalid length for Translation');
};
sylvester_js_1.Matrix.prototype.flatten = function () {
    var result = [];
    if (this.elements.length === 0) {
        return [];
    }
    for (var j = 0; j < this.elements[0].length; j++) {
        for (var i = 0; i < this.elements.length; i++) {
            result.push(this.elements[i][j]);
        }
    }
    return result;
};
sylvester_js_1.Matrix.prototype.ensure4x4 = function () {
    if (this.elements.length === 4 && this.elements[0].length === 4) {
        return this;
    }
    if (this.elements.length > 4 || this.elements[0].length > 4) {
        return null;
    }
    for (var i = 0; i < this.elements.length; i++) {
        for (var j = this.elements[i].length; j < 4; j++) {
            if (i === j) {
                this.elements[i].push(1);
            }
            else {
                this.elements[i].push(0);
            }
        }
    }
    for (var i = this.elements.length; i < 4; i++) {
        if (i === 0) {
            this.elements.push([1, 0, 0, 0]);
        }
        else if (i === 1) {
            this.elements.push([0, 1, 0, 0]);
        }
        else if (i === 2) {
            this.elements.push([0, 0, 1, 0]);
        }
        else if (i === 3) {
            this.elements.push([0, 0, 0, 1]);
        }
    }
    return this;
};
sylvester_js_1.Vector.prototype.flatten = function () {
    return this.elements;
};
function makePerspective(fovy, aspect, znear, zfar) {
    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    var ymin = -ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;
    return makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
}
exports.makePerspective = makePerspective;
function makeFrustum(left, right, bottom, top, znear, zfar) {
    var X = 2 * znear / (right - left);
    var Y = 2 * znear / (top - bottom);
    var A = (right + left) / (right - left);
    var B = (top + bottom) / (top - bottom);
    var C = -(zfar + znear) / (zfar - znear);
    var D = -2 * zfar * znear / (zfar - znear);
    return $M([[X, 0, A, 0],
        [0, Y, B, 0],
        [0, 0, C, D],
        [0, 0, -1, 0]]);
}


/***/ }),

/***/ "./vendor/tinyh264/Canvas.ts":
/*!***********************************!*\
  !*** ./vendor/tinyh264/Canvas.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Canvas = (function () {
    function Canvas(canvas) {
        this.canvas = canvas;
    }
    return Canvas;
}());
exports["default"] = Canvas;


/***/ }),

/***/ "./vendor/tinyh264/ShaderCompiler.ts":
/*!*******************************************!*\
  !*** ./vendor/tinyh264/ShaderCompiler.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ShaderCompiler = (function () {
    function ShaderCompiler() {
    }
    ShaderCompiler.compile = function (gl, script) {
        var shader;
        if (script.type === 'x-shader/x-fragment') {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        }
        else if (script.type === 'x-shader/x-vertex') {
            shader = gl.createShader(gl.VERTEX_SHADER);
        }
        else {
            throw new Error('Unknown shader type: ' + script.type);
        }
        if (!shader) {
            throw new Error('Failed to create shader');
        }
        gl.shaderSource(shader, script.source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            throw new Error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
        }
        return shader;
    };
    return ShaderCompiler;
}());
exports["default"] = ShaderCompiler;


/***/ }),

/***/ "./vendor/tinyh264/ShaderProgram.ts":
/*!******************************************!*\
  !*** ./vendor/tinyh264/ShaderProgram.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ShaderProgram = (function () {
    function ShaderProgram(gl) {
        this.gl = gl;
        this.program = this.gl.createProgram();
    }
    ShaderProgram.prototype.attach = function (shader) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        this.gl.attachShader(this.program, shader);
    };
    ShaderProgram.prototype.link = function () {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        this.gl.linkProgram(this.program);
        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {
            console.error('Unable to initialize the shader program.');
        }
    };
    ShaderProgram.prototype.use = function () {
        this.gl.useProgram(this.program);
    };
    ShaderProgram.prototype.getAttributeLocation = function (name) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        return this.gl.getAttribLocation(this.program, name);
    };
    ShaderProgram.prototype.getUniformLocation = function (name) {
        if (!this.program) {
            throw Error("Program type is ".concat(typeof this.program));
        }
        return this.gl.getUniformLocation(this.program, name);
    };
    ShaderProgram.prototype.setUniformM4 = function (uniformLocation, array) {
        this.gl.uniformMatrix4fv(uniformLocation, false, array);
    };
    return ShaderProgram;
}());
exports["default"] = ShaderProgram;


/***/ }),

/***/ "./vendor/tinyh264/ShaderSources.ts":
/*!******************************************!*\
  !*** ./vendor/tinyh264/ShaderSources.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fragmentYUV = exports.vertexQuad = void 0;
exports.vertexQuad = {
    type: 'x-shader/x-vertex',
    source: "\n  precision mediump float;\n\n  uniform mat4 u_projection;\n  attribute vec2 a_position;\n  attribute vec2 a_texCoord;\n  varying vec2 v_texCoord;\n  void main(){\n      v_texCoord = a_texCoord;\n      gl_Position = u_projection * vec4(a_position, 0.0, 1.0);\n  }\n",
};
exports.fragmentYUV = {
    type: 'x-shader/x-fragment',
    source: "\n  precision lowp float;\n  \n  varying vec2 v_texCoord;\n  \n  uniform sampler2D yTexture;\n  uniform sampler2D uTexture;\n  uniform sampler2D vTexture;\n    \n  const mat4 conversion = mat4(\n    1.0,     0.0,     1.402,  -0.701,\n    1.0,    -0.344,  -0.714,   0.529,\n    1.0,     1.772,   0.0,    -0.886,\n    0.0,     0.0,     0.0,     0.0\n  );\n\n  void main(void) {\n    float yChannel = texture2D(yTexture, v_texCoord).x;\n    float uChannel = texture2D(uTexture, v_texCoord).x;\n    float vChannel = texture2D(vTexture, v_texCoord).x;\n    vec4 channels = vec4(yChannel, uChannel, vChannel, 1.0);\n    vec3 rgb = (channels * conversion).xyz;\n    gl_FragColor = vec4(rgb, 1.0);\n  }\n",
};


/***/ }),

/***/ "./vendor/tinyh264/YUVCanvas.ts":
/*!**************************************!*\
  !*** ./vendor/tinyh264/YUVCanvas.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Canvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Canvas */ "./vendor/tinyh264/Canvas.ts"));
var YUVCanvas = (function (_super) {
    tslib_1.__extends(YUVCanvas, _super);
    function YUVCanvas(canvas) {
        var _this = _super.call(this, canvas) || this;
        _this.canvasBuffer = null;
        _this.canvasCtx = _this.canvas.getContext('2d');
        return _this;
    }
    YUVCanvas.prototype.decode = function (buffer, width, height) {
        if (!buffer) {
            return;
        }
        if (!this.canvasBuffer) {
            this.canvasBuffer = this.canvasCtx.createImageData(width, height);
        }
        var lumaSize = width * height;
        var chromaSize = lumaSize >> 2;
        var ybuf = buffer.subarray(0, lumaSize);
        var ubuf = buffer.subarray(lumaSize, lumaSize + chromaSize);
        var vbuf = buffer.subarray(lumaSize + chromaSize, lumaSize + 2 * chromaSize);
        for (var y = 0; y < height; y++) {
            for (var x = 0; x < width; x++) {
                var yIndex = x + y * width;
                var uIndex = ~~(y / 2) * ~~(width / 2) + ~~(x / 2);
                var vIndex = ~~(y / 2) * ~~(width / 2) + ~~(x / 2);
                var R = 1.164 * (ybuf[yIndex] - 16) + 1.596 * (vbuf[vIndex] - 128);
                var G = 1.164 * (ybuf[yIndex] - 16) - 0.813 * (vbuf[vIndex] - 128) - 0.391 * (ubuf[uIndex] - 128);
                var B = 1.164 * (ybuf[yIndex] - 16) + 2.018 * (ubuf[uIndex] - 128);
                var rgbIndex = yIndex * 4;
                this.canvasBuffer.data[rgbIndex + 0] = R;
                this.canvasBuffer.data[rgbIndex + 1] = G;
                this.canvasBuffer.data[rgbIndex + 2] = B;
                this.canvasBuffer.data[rgbIndex + 3] = 0xff;
            }
        }
        this.canvasCtx.putImageData(this.canvasBuffer, 0, 0);
    };
    return YUVCanvas;
}(Canvas_1.default));
exports["default"] = YUVCanvas;


/***/ }),

/***/ "./vendor/tinyh264/YUVSurfaceShader.ts":
/*!*********************************************!*\
  !*** ./vendor/tinyh264/YUVSurfaceShader.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var ShaderProgram_1 = tslib_1.__importDefault(__webpack_require__(/*! ./ShaderProgram */ "./vendor/tinyh264/ShaderProgram.ts"));
var ShaderCompiler_1 = tslib_1.__importDefault(__webpack_require__(/*! ./ShaderCompiler */ "./vendor/tinyh264/ShaderCompiler.ts"));
var ShaderSources_1 = __webpack_require__(/*! ./ShaderSources */ "./vendor/tinyh264/ShaderSources.ts");
var YUVSurfaceShader = (function () {
    function YUVSurfaceShader(gl, vertexBuffer, shaderArgs, program) {
        this.gl = gl;
        this.vertexBuffer = vertexBuffer;
        this.shaderArgs = shaderArgs;
        this.program = program;
    }
    YUVSurfaceShader.create = function (gl) {
        var program = this._initShaders(gl);
        var shaderArgs = this._initShaderArgs(gl, program);
        var vertexBuffer = this._initBuffers(gl);
        return new YUVSurfaceShader(gl, vertexBuffer, shaderArgs, program);
    };
    YUVSurfaceShader._initShaders = function (gl) {
        var program = new ShaderProgram_1.default(gl);
        program.attach(ShaderCompiler_1.default.compile(gl, ShaderSources_1.vertexQuad));
        program.attach(ShaderCompiler_1.default.compile(gl, ShaderSources_1.fragmentYUV));
        program.link();
        program.use();
        return program;
    };
    YUVSurfaceShader._initShaderArgs = function (gl, program) {
        var shaderArgs = {
            yTexture: program.getUniformLocation('yTexture'),
            uTexture: program.getUniformLocation('uTexture'),
            vTexture: program.getUniformLocation('vTexture'),
            u_projection: program.getUniformLocation('u_projection'),
            a_position: program.getAttributeLocation('a_position'),
            a_texCoord: program.getAttributeLocation('a_texCoord'),
        };
        gl.enableVertexAttribArray(shaderArgs.a_position);
        gl.enableVertexAttribArray(shaderArgs.a_texCoord);
        return shaderArgs;
    };
    YUVSurfaceShader._initBuffers = function (gl) {
        return gl.createBuffer();
    };
    YUVSurfaceShader.prototype.setTexture = function (textureY, textureU, textureV) {
        var gl = this.gl;
        gl.uniform1i(this.shaderArgs.yTexture, 0);
        gl.uniform1i(this.shaderArgs.uTexture, 1);
        gl.uniform1i(this.shaderArgs.vTexture, 2);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, textureY.texture);
        gl.activeTexture(gl.TEXTURE1);
        gl.bindTexture(gl.TEXTURE_2D, textureU.texture);
        gl.activeTexture(gl.TEXTURE2);
        gl.bindTexture(gl.TEXTURE_2D, textureV.texture);
    };
    YUVSurfaceShader.prototype.use = function () {
        this.program.use();
    };
    YUVSurfaceShader.prototype.release = function () {
        this.gl.useProgram(null);
    };
    YUVSurfaceShader.prototype.updateShaderData = function (encodedFrameSize, h264RenderState) {
        var w = encodedFrameSize.w, h = encodedFrameSize.h;
        this.gl.viewport(0, 0, w, h);
        this.program.setUniformM4(this.shaderArgs.u_projection, [
            2.0 / w, 0, 0, 0,
            0, 2.0 / -h, 0, 0,
            0, 0, 1, 0,
            -1, 1, 0, 1
        ]);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
            0, 0, 0, 0,
            w, 0, h264RenderState.maxXTexCoord, 0,
            w, h, h264RenderState.maxXTexCoord, h264RenderState.maxYTexCoord,
            w, h, h264RenderState.maxXTexCoord, h264RenderState.maxYTexCoord,
            0, h, 0, h264RenderState.maxYTexCoord,
            0, 0, 0, 0
        ]), this.gl.DYNAMIC_DRAW);
        this.gl.vertexAttribPointer(this.shaderArgs.a_position, 2, this.gl.FLOAT, false, 16, 0);
        this.gl.vertexAttribPointer(this.shaderArgs.a_texCoord, 2, this.gl.FLOAT, false, 16, 8);
    };
    YUVSurfaceShader.prototype.draw = function () {
        var gl = this.gl;
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 6);
        gl.bindTexture(gl.TEXTURE_2D, null);
    };
    return YUVSurfaceShader;
}());
exports["default"] = YUVSurfaceShader;


/***/ }),

/***/ "./vendor/tinyh264/YUVWebGLCanvas.ts":
/*!*******************************************!*\
  !*** ./vendor/tinyh264/YUVWebGLCanvas.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var YUVSurfaceShader_1 = tslib_1.__importDefault(__webpack_require__(/*! ./YUVSurfaceShader */ "./vendor/tinyh264/YUVSurfaceShader.ts"));
var Texture_1 = tslib_1.__importDefault(__webpack_require__(/*! ../h264-live-player/Texture */ "./vendor/h264-live-player/Texture.ts"));
var Canvas_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Canvas */ "./vendor/tinyh264/Canvas.ts"));
var YUVWebGLCanvas = (function (_super) {
    tslib_1.__extends(YUVWebGLCanvas, _super);
    function YUVWebGLCanvas(canvas) {
        var _this = _super.call(this, canvas) || this;
        var gl = canvas.getContext('experimental-webgl', {
            preserveDrawingBuffer: true,
        });
        if (!gl) {
            throw new Error('Unable to initialize WebGL. Your browser may not support it.');
        }
        _this.yuvSurfaceShader = YUVSurfaceShader_1.default.create(gl);
        _this.yTexture = Texture_1.default.create(gl, gl.LUMINANCE);
        _this.uTexture = Texture_1.default.create(gl, gl.LUMINANCE);
        _this.vTexture = Texture_1.default.create(gl, gl.LUMINANCE);
        return _this;
    }
    YUVWebGLCanvas.prototype.decode = function (buffer, width, height) {
        this.canvas.width = width;
        this.canvas.height = height;
        var stride = width;
        var sourceWidth = width;
        var sourceHeight = height;
        var maxXTexCoord = sourceWidth / stride;
        var maxYTexCoord = sourceHeight / height;
        var lumaSize = stride * height;
        var chromaSize = lumaSize >> 2;
        var yBuffer = buffer.subarray(0, lumaSize);
        var uBuffer = buffer.subarray(lumaSize, lumaSize + chromaSize);
        var vBuffer = buffer.subarray(lumaSize + chromaSize, lumaSize + 2 * chromaSize);
        var chromaHeight = height >> 1;
        var chromaStride = stride >> 1;
        this.yTexture.image2dBuffer(yBuffer, stride, height);
        this.uTexture.image2dBuffer(uBuffer, chromaStride, chromaHeight);
        this.vTexture.image2dBuffer(vBuffer, chromaStride, chromaHeight);
        this.yuvSurfaceShader.setTexture(this.yTexture, this.uTexture, this.vTexture);
        this.yuvSurfaceShader.updateShaderData({ w: width, h: height }, { maxXTexCoord: maxXTexCoord, maxYTexCoord: maxYTexCoord });
        this.yuvSurfaceShader.draw();
    };
    return YUVWebGLCanvas;
}(Canvas_1.default));
exports["default"] = YUVWebGLCanvas;


/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js!./vendor/tinyh264/H264NALDecoder.worker.ts":
/*!*******************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js!./vendor/tinyh264/H264NALDecoder.worker.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Worker_fn)
/* harmony export */ });
function Worker_fn() {
  return new Worker(__webpack_require__.p + "bundle.worker.js");
}


/***/ }),

/***/ "./node_modules/xterm-addon-attach/lib/xterm-addon-attach.js":
/*!*******************************************************************!*\
  !*** ./node_modules/xterm-addon-attach/lib/xterm-addon-attach.js ***!
  \*******************************************************************/
/***/ ((module) => {

!function(t,e){ true?module.exports=e():0}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AttachAddon=void 0;var o=function(){function t(t,e){this._disposables=[],this._socket=t,this._socket.binaryType="arraybuffer",this._bidirectional=!e||!1!==e.bidirectional}return t.prototype.activate=function(t){var e=this;this._disposables.push(r(this._socket,"message",(function(e){var n=e.data;t.write("string"==typeof n?n:new Uint8Array(n))}))),this._bidirectional&&(this._disposables.push(t.onData((function(t){return e._sendData(t)}))),this._disposables.push(t.onBinary((function(t){return e._sendBinary(t)})))),this._disposables.push(r(this._socket,"close",(function(){return e.dispose()}))),this._disposables.push(r(this._socket,"error",(function(){return e.dispose()})))},t.prototype.dispose=function(){this._disposables.forEach((function(t){return t.dispose()}))},t.prototype._sendData=function(t){1===this._socket.readyState&&this._socket.send(t)},t.prototype._sendBinary=function(t){if(1===this._socket.readyState){for(var e=new Uint8Array(t.length),n=0;n<t.length;++n)e[n]=255&t.charCodeAt(n);this._socket.send(e)}},t}();function r(t,e,n){return t.addEventListener(e,n),{dispose:function(){n&&t.removeEventListener(e,n)}}}e.AttachAddon=o}])}));
//# sourceMappingURL=xterm-addon-attach.js.map

/***/ }),

/***/ "./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js":
/*!*************************************************************!*\
  !*** ./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js ***!
  \*************************************************************/
/***/ ((module) => {

!function(e,t){ true?module.exports=t():0}(self,(function(){return(()=>{"use strict";var e={775:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FitAddon=void 0;var r=function(){function e(){}return e.prototype.activate=function(e){this._terminal=e},e.prototype.dispose=function(){},e.prototype.fit=function(){var e=this.proposeDimensions();if(e&&this._terminal){var t=this._terminal._core;this._terminal.rows===e.rows&&this._terminal.cols===e.cols||(t._renderService.clear(),this._terminal.resize(e.cols,e.rows))}},e.prototype.proposeDimensions=function(){if(this._terminal&&this._terminal.element&&this._terminal.element.parentElement){var e=this._terminal._core;if(0!==e._renderService.dimensions.actualCellWidth&&0!==e._renderService.dimensions.actualCellHeight){var t=window.getComputedStyle(this._terminal.element.parentElement),r=parseInt(t.getPropertyValue("height")),i=Math.max(0,parseInt(t.getPropertyValue("width"))),n=window.getComputedStyle(this._terminal.element),o=r-(parseInt(n.getPropertyValue("padding-top"))+parseInt(n.getPropertyValue("padding-bottom"))),a=i-(parseInt(n.getPropertyValue("padding-right"))+parseInt(n.getPropertyValue("padding-left")))-e.viewport.scrollBarWidth;return{cols:Math.max(2,Math.floor(a/e._renderService.dimensions.actualCellWidth)),rows:Math.max(1,Math.floor(o/e._renderService.dimensions.actualCellHeight))}}}},e}();t.FitAddon=r}},t={};return function r(i){if(t[i])return t[i].exports;var n=t[i]={exports:{}};return e[i](n,n.exports,r),n.exports}(775)})()}));
//# sourceMappingURL=xterm-addon-fit.js.map

/***/ }),

/***/ "./node_modules/xterm/lib/xterm.js":
/*!*****************************************!*\
  !*** ./node_modules/xterm/lib/xterm.js ***!
  \*****************************************/
/***/ ((module) => {

!function(e,t){if(true)module.exports=t();else { var i, r; }}(self,(function(){return(()=>{"use strict";var e={4567:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;var o=r(9042),s=r(6114),a=r(9924),c=r(3656),l=r(844),h=r(5596),u=r(9631),f=function(e){function t(t,r){var i=e.call(this)||this;i._terminal=t,i._renderService=r,i._liveRegionLineCount=0,i._charsToConsume=[],i._charsToAnnounce="",i._accessibilityTreeRoot=document.createElement("div"),i._accessibilityTreeRoot.classList.add("xterm-accessibility"),i._accessibilityTreeRoot.tabIndex=0,i._rowContainer=document.createElement("div"),i._rowContainer.setAttribute("role","list"),i._rowContainer.classList.add("xterm-accessibility-tree"),i._rowElements=[];for(var n=0;n<i._terminal.rows;n++)i._rowElements[n]=i._createAccessibilityTreeNode(),i._rowContainer.appendChild(i._rowElements[n]);if(i._topBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,0)},i._bottomBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,1)},i._rowElements[0].addEventListener("focus",i._topBoundaryFocusListener),i._rowElements[i._rowElements.length-1].addEventListener("focus",i._bottomBoundaryFocusListener),i._refreshRowsDimensions(),i._accessibilityTreeRoot.appendChild(i._rowContainer),i._renderRowsDebouncer=new a.TimeBasedDebouncer(i._renderRows.bind(i)),i._refreshRows(),i._liveRegion=document.createElement("div"),i._liveRegion.classList.add("live-region"),i._liveRegion.setAttribute("aria-live","assertive"),i._accessibilityTreeRoot.appendChild(i._liveRegion),!i._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");return i._terminal.element.insertAdjacentElement("afterbegin",i._accessibilityTreeRoot),i.register(i._renderRowsDebouncer),i.register(i._terminal.onResize((function(e){return i._onResize(e.rows)}))),i.register(i._terminal.onRender((function(e){return i._refreshRows(e.start,e.end)}))),i.register(i._terminal.onScroll((function(){return i._refreshRows()}))),i.register(i._terminal.onA11yChar((function(e){return i._onChar(e)}))),i.register(i._terminal.onLineFeed((function(){return i._onChar("\n")}))),i.register(i._terminal.onA11yTab((function(e){return i._onTab(e)}))),i.register(i._terminal.onKey((function(e){return i._onKey(e.key)}))),i.register(i._terminal.onBlur((function(){return i._clearLiveRegion()}))),i.register(i._renderService.onDimensionsChange((function(){return i._refreshRowsDimensions()}))),i._screenDprMonitor=new h.ScreenDprMonitor,i.register(i._screenDprMonitor),i._screenDprMonitor.setListener((function(){return i._refreshRowsDimensions()})),i.register((0,c.addDisposableDomListener)(window,"resize",(function(){return i._refreshRowsDimensions()}))),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),(0,u.removeElementFromParent)(this._accessibilityTreeRoot),this._rowElements.length=0},t.prototype._onBoundaryFocus=function(e,t){var r=e.target,i=this._rowElements[0===t?1:this._rowElements.length-2];if(r.getAttribute("aria-posinset")!==(0===t?"1":""+this._terminal.buffer.lines.length)&&e.relatedTarget===i){var n,o;if(0===t?(n=r,o=this._rowElements.pop(),this._rowContainer.removeChild(o)):(n=this._rowElements.shift(),o=r,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),o.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){var s=this._createAccessibilityTreeNode();this._rowElements.unshift(s),this._rowContainer.insertAdjacentElement("afterbegin",s)}else s=this._createAccessibilityTreeNode(),this._rowElements.push(s),this._rowContainer.appendChild(s);this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation()}},t.prototype._onResize=function(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var t=this._rowContainer.children.length;t<this._terminal.rows;t++)this._rowElements[t]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[t]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},t.prototype._createAccessibilityTreeNode=function(){var e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e},t.prototype._onTab=function(e){for(var t=0;t<e;t++)this._onChar(" ")},t.prototype._onChar=function(e){var t=this;this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=o.tooMuchOutput)),s.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((function(){t._accessibilityTreeRoot.appendChild(t._liveRegion)}),0))},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,s.isMac&&(0,u.removeElementFromParent)(this._liveRegion)},t.prototype._onKey=function(e){this._clearLiveRegion(),this._charsToConsume.push(e)},t.prototype._refreshRows=function(e,t){this._renderRowsDebouncer.refresh(e,t,this._terminal.rows)},t.prototype._renderRows=function(e,t){for(var r=this._terminal.buffer,i=r.lines.length.toString(),n=e;n<=t;n++){var o=r.translateBufferLineToString(r.ydisp+n,!0),s=(r.ydisp+n+1).toString(),a=this._rowElements[n];a&&(0===o.length?a.innerText=" ":a.textContent=o,a.setAttribute("aria-posinset",s),a.setAttribute("aria-setsize",i))}this._announceCharacters()},t.prototype._refreshRowsDimensions=function(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e])}},t.prototype._refreshRowDimensions=function(e){e.style.height=this._renderService.dimensions.actualCellHeight+"px"},t.prototype._announceCharacters=function(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="")},t}(l.Disposable);t.AccessibilityManager=f},3614:(e,t)=>{function r(e){return e.replace(/\r?\n/g,"\r")}function i(e,t){return t?"[200~"+e+"[201~":e}function n(e,t,n){e=i(e=r(e),n.decPrivateModes.bracketedPasteMode),n.triggerDataEvent(e,!0),t.value=""}function o(e,t,r){var i=r.getBoundingClientRect(),n=e.clientX-i.left-10,o=e.clientY-i.top-10;t.style.width="20px",t.style.height="20px",t.style.left=n+"px",t.style.top=o+"px",t.style.zIndex="1000",t.focus()}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=r,t.bracketTextForPaste=i,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault()},t.handlePasteEvent=function(e,t,r){e.stopPropagation(),e.clipboardData&&n(e.clipboardData.getData("text/plain"),t,r)},t.paste=n,t.moveTextAreaUnderMouseCursor=o,t.rightClickHandler=function(e,t,r,i,n){o(e,t,r),n&&i.rightClickSelect(e),t.value=i.selectionText,t.select()}},7239:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;var r=function(){function e(){this._color={},this._rgba={}}return e.prototype.clear=function(){this._color={},this._rgba={}},e.prototype.setCss=function(e,t,r){this._rgba[e]||(this._rgba[e]={}),this._rgba[e][t]=r},e.prototype.getCss=function(e,t){return this._rgba[e]?this._rgba[e][t]:void 0},e.prototype.setColor=function(e,t,r){this._color[e]||(this._color[e]={}),this._color[e][t]=r},e.prototype.getColor=function(e,t){return this._color[e]?this._color[e][t]:void 0},e}();t.ColorContrastCache=r},5680:function(e,t,r){var i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorManager=t.DEFAULT_ANSI_COLORS=void 0;var n=r(8055),o=r(7239),s=n.css.toColor("#ffffff"),a=n.css.toColor("#000000"),c=n.css.toColor("#ffffff"),l=n.css.toColor("#000000"),h={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze(function(){for(var e=[n.css.toColor("#2e3436"),n.css.toColor("#cc0000"),n.css.toColor("#4e9a06"),n.css.toColor("#c4a000"),n.css.toColor("#3465a4"),n.css.toColor("#75507b"),n.css.toColor("#06989a"),n.css.toColor("#d3d7cf"),n.css.toColor("#555753"),n.css.toColor("#ef2929"),n.css.toColor("#8ae234"),n.css.toColor("#fce94f"),n.css.toColor("#729fcf"),n.css.toColor("#ad7fa8"),n.css.toColor("#34e2e2"),n.css.toColor("#eeeeec")],t=[0,95,135,175,215,255],r=0;r<216;r++){var i=t[r/36%6|0],o=t[r/6%6|0],s=t[r%6];e.push({css:n.channels.toCss(i,o,s),rgba:n.channels.toRgba(i,o,s)})}for(r=0;r<24;r++){var a=8+10*r;e.push({css:n.channels.toCss(a,a,a),rgba:n.channels.toRgba(a,a,a)})}return e}());var u=function(){function e(e,r){this.allowTransparency=r;var i=e.createElement("canvas");i.width=1,i.height=1;var u=i.getContext("2d");if(!u)throw new Error("Could not get rendering context");this._ctx=u,this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new o.ColorContrastCache,this.colors={foreground:s,background:a,cursor:c,cursorAccent:l,selectionTransparent:h,selectionOpaque:n.color.blend(a,h),selectionForeground:void 0,ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors()}return e.prototype.onOptionsChange=function(e){"minimumContrastRatio"===e&&this._contrastCache.clear()},e.prototype.setTheme=function(e){void 0===e&&(e={}),this.colors.foreground=this._parseColor(e.foreground,s),this.colors.background=this._parseColor(e.background,a),this.colors.cursor=this._parseColor(e.cursor,c,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,l,!0),this.colors.selectionTransparent=this._parseColor(e.selection,h,!0),this.colors.selectionOpaque=n.color.blend(this.colors.background,this.colors.selectionTransparent);var r={css:"",rgba:0};this.colors.selectionForeground=e.selectionForeground?this._parseColor(e.selectionForeground,r):void 0,this.colors.selectionForeground===r&&(this.colors.selectionForeground=void 0),n.color.isOpaque(this.colors.selectionTransparent)&&(this.colors.selectionTransparent=n.color.opacity(this.colors.selectionTransparent,.3)),this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),this._contrastCache.clear(),this._updateRestoreColors()},e.prototype.restoreColor=function(e){if(void 0!==e)switch(e){case 256:this.colors.foreground=this._restoreColors.foreground;break;case 257:this.colors.background=this._restoreColors.background;break;case 258:this.colors.cursor=this._restoreColors.cursor;break;default:this.colors.ansi[e]=this._restoreColors.ansi[e]}else for(var t=0;t<this._restoreColors.ansi.length;++t)this.colors.ansi[t]=this._restoreColors.ansi[t]},e.prototype._updateRestoreColors=function(){this._restoreColors={foreground:this.colors.foreground,background:this.colors.background,cursor:this.colors.cursor,ansi:this.colors.ansi.slice()}},e.prototype._parseColor=function(e,t,r){if(void 0===r&&(r=this.allowTransparency),void 0===e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+e+" is invalid using fallback "+t.css),t;this._ctx.fillRect(0,0,1,1);var o=this._ctx.getImageData(0,0,1,1).data;if(255!==o[3]){if(!r)return console.warn("Color: "+e+" is using transparency, but allowTransparency is false. Using fallback "+t.css+"."),t;var s=i(this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(",").map((function(e){return Number(e)})),4),a=s[0],c=s[1],l=s[2],h=s[3],u=Math.round(255*h);return{rgba:n.channels.toRgba(a,c,l,u),css:e}}return{css:this._ctx.fillStyle,rgba:n.channels.toRgba(o[0],o[1],o[2],o[3])}},e}();t.ColorManager=u},9631:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.removeElementFromParent=void 0,t.removeElementFromParent=function(){for(var e,t,i,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];try{for(var s=r(n),a=s.next();!a.done;a=s.next()){var c=a.value;null===(i=null==c?void 0:c.parentElement)||void 0===i||i.removeChild(c)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}}},3656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,r,i){e.addEventListener(t,r,i);var n=!1;return{dispose:function(){n||(n=!0,e.removeEventListener(t,r,i))}}}},3551:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZone=t.Linkifier=void 0;var o=r(8460),s=r(2585),a=function(){function e(e,t,r){this._bufferService=e,this._logService=t,this._unicodeService=r,this._linkMatchers=[],this._nextLinkMatcherId=0,this._onShowLinkUnderline=new o.EventEmitter,this._onHideLinkUnderline=new o.EventEmitter,this._onLinkTooltip=new o.EventEmitter,this._rowsToLinkify={start:void 0,end:void 0}}return Object.defineProperty(e.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLinkTooltip",{get:function(){return this._onLinkTooltip.event},enumerable:!1,configurable:!0}),e.prototype.attachToDom=function(e,t){this._element=e,this._mouseZoneManager=t},e.prototype.linkifyRows=function(t,r){var i=this;this._mouseZoneManager&&(void 0===this._rowsToLinkify.start||void 0===this._rowsToLinkify.end?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=r):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,r)),this._mouseZoneManager.clearAll(t,r),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout((function(){return i._linkifyRows()}),e._timeBeforeLatency))},e.prototype._linkifyRows=function(){this._rowsTimeoutId=void 0;var e=this._bufferService.buffer;if(void 0!==this._rowsToLinkify.start&&void 0!==this._rowsToLinkify.end){var t=e.ydisp+this._rowsToLinkify.start;if(!(t>=e.lines.length)){for(var r=e.ydisp+Math.min(this._rowsToLinkify.end,this._bufferService.rows)+1,i=Math.ceil(2e3/this._bufferService.cols),n=this._bufferService.buffer.iterator(!1,t,r,i,i);n.hasNext();)for(var o=n.next(),s=0;s<this._linkMatchers.length;s++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[s]);this._rowsToLinkify.start=void 0,this._rowsToLinkify.end=void 0}}else this._logService.debug("_rowToLinkify was unset before _linkifyRows was called")},e.prototype.registerLinkMatcher=function(e,t,r){if(void 0===r&&(r={}),!t)throw new Error("handler must be defined");var i={id:this._nextLinkMatcherId++,regex:e,handler:t,matchIndex:r.matchIndex,validationCallback:r.validationCallback,hoverTooltipCallback:r.tooltipCallback,hoverLeaveCallback:r.leaveCallback,willLinkActivate:r.willLinkActivate,priority:r.priority||0};return this._addLinkMatcherToList(i),i.id},e.prototype._addLinkMatcherToList=function(e){if(0!==this._linkMatchers.length){for(var t=this._linkMatchers.length-1;t>=0;t--)if(e.priority<=this._linkMatchers[t].priority)return void this._linkMatchers.splice(t+1,0,e);this._linkMatchers.splice(0,0,e)}else this._linkMatchers.push(e)},e.prototype.deregisterLinkMatcher=function(e){for(var t=0;t<this._linkMatchers.length;t++)if(this._linkMatchers[t].id===e)return this._linkMatchers.splice(t,1),!0;return!1},e.prototype._doLinkifyRow=function(e,t,r){for(var i,n=this,o=new RegExp(r.regex.source,(r.regex.flags||"")+"g"),s=-1,a=function(){var a=i["number"!=typeof r.matchIndex?0:r.matchIndex];if(!a)return c._logService.debug("match found without corresponding matchIndex",i,r),"break";if(s=t.indexOf(a,s+1),o.lastIndex=s+a.length,s<0)return"break";var l=c._bufferService.buffer.stringIndexToBufferIndex(e,s);if(l[0]<0)return"break";var h=c._bufferService.buffer.lines.get(l[0]);if(!h)return"break";var u=h.getFg(l[1]),f=u?u>>9&511:void 0;r.validationCallback?r.validationCallback(a,(function(e){n._rowsTimeoutId||e&&n._addLink(l[1],l[0]-n._bufferService.buffer.ydisp,a,r,f)})):c._addLink(l[1],l[0]-c._bufferService.buffer.ydisp,a,r,f)},c=this;null!==(i=o.exec(t))&&"break"!==a(););},e.prototype._addLink=function(e,t,r,i,n){var o=this;if(this._mouseZoneManager&&this._element){var s=this._unicodeService.getStringCellWidth(r),a=e%this._bufferService.cols,l=t+Math.floor(e/this._bufferService.cols),h=(a+s)%this._bufferService.cols,u=l+Math.floor((a+s)/this._bufferService.cols);0===h&&(h=this._bufferService.cols,u--),this._mouseZoneManager.add(new c(a+1,l+1,h+1,u+1,(function(e){if(i.handler)return i.handler(e,r);var t=window.open();t?(t.opener=null,t.location.href=r):console.warn("Opening link blocked as opener could not be cleared")}),(function(){o._onShowLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.add("xterm-cursor-pointer")}),(function(e){o._onLinkTooltip.fire(o._createLinkHoverEvent(a,l,h,u,n)),i.hoverTooltipCallback&&i.hoverTooltipCallback(e,r,{start:{x:a,y:l},end:{x:h,y:u}})}),(function(){o._onHideLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.remove("xterm-cursor-pointer"),i.hoverLeaveCallback&&i.hoverLeaveCallback()}),(function(e){return!i.willLinkActivate||i.willLinkActivate(e,r)})))}},e.prototype._createLinkHoverEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},e._timeBeforeLatency=200,e=i([n(0,s.IBufferService),n(1,s.ILogService),n(2,s.IUnicodeService)],e)}();t.Linkifier=a;var c=function(e,t,r,i,n,o,s,a,c){this.x1=e,this.y1=t,this.x2=r,this.y2=i,this.clickCallback=n,this.hoverCallback=o,this.tooltipCallback=s,this.leaveCallback=a,this.willLinkActivate=c};t.MouseZone=c},6465:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},c=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;var l=r(2585),h=r(8460),u=r(844),f=r(3656),_=function(e){function t(t){var r=e.call(this)||this;return r._bufferService=t,r._linkProviders=[],r._linkCacheDisposables=[],r._isMouseOut=!0,r._activeLine=-1,r._onShowLinkUnderline=r.register(new h.EventEmitter),r._onHideLinkUnderline=r.register(new h.EventEmitter),r.register((0,u.getDisposeArrayDisposable)(r._linkCacheDisposables)),r}return n(t,e),Object.defineProperty(t.prototype,"currentLink",{get:function(){return this._currentLink},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),t.prototype.registerLinkProvider=function(e){var t=this;return this._linkProviders.push(e),{dispose:function(){var r=t._linkProviders.indexOf(e);-1!==r&&t._linkProviders.splice(r,1)}}},t.prototype.attachToDom=function(e,t,r){var i=this;this._element=e,this._mouseService=t,this._renderService=r,this.register((0,f.addDisposableDomListener)(this._element,"mouseleave",(function(){i._isMouseOut=!0,i._clearCurrentLink()}))),this.register((0,f.addDisposableDomListener)(this._element,"mousemove",this._onMouseMove.bind(this))),this.register((0,f.addDisposableDomListener)(this._element,"mousedown",this._handleMouseDown.bind(this))),this.register((0,f.addDisposableDomListener)(this._element,"mouseup",this._handleMouseUp.bind(this)))},t.prototype._onMouseMove=function(e){if(this._lastMouseEvent=e,this._element&&this._mouseService){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(t){this._isMouseOut=!1;for(var r=e.composedPath(),i=0;i<r.length;i++){var n=r[i];if(n.classList.contains("xterm"))break;if(n.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._onHover(t),this._lastBufferCell=t)}}},t.prototype._onHover=function(e){if(this._activeLine!==e.y)return this._clearCurrentLink(),void this._askForLink(e,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0))},t.prototype._askForLink=function(e,t){var r,i,n,o,s=this;this._activeProviderReplies&&t||(null===(n=this._activeProviderReplies)||void 0===n||n.forEach((function(e){null==e||e.forEach((function(e){e.link.dispose&&e.link.dispose()}))})),this._activeProviderReplies=new Map,this._activeLine=e.y);var l=!1,h=function(r,i){t?(null===(o=u._activeProviderReplies)||void 0===o?void 0:o.get(r))&&(l=u._checkLinkProviderResult(r,e,l)):i.provideLinks(e.y,(function(t){var i,n;if(!s._isMouseOut){var o=null==t?void 0:t.map((function(e){return{link:e}}));null===(i=s._activeProviderReplies)||void 0===i||i.set(r,o),l=s._checkLinkProviderResult(r,e,l),(null===(n=s._activeProviderReplies)||void 0===n?void 0:n.size)===s._linkProviders.length&&s._removeIntersectingLinks(e.y,s._activeProviderReplies)}}))},u=this;try{for(var f=a(this._linkProviders.entries()),_=f.next();!_.done;_=f.next()){var d=c(_.value,2);h(d[0],d[1])}}catch(e){r={error:e}}finally{try{_&&!_.done&&(i=f.return)&&i.call(f)}finally{if(r)throw r.error}}},t.prototype._removeIntersectingLinks=function(e,t){for(var r=new Set,i=0;i<t.size;i++){var n=t.get(i);if(n)for(var o=0;o<n.length;o++)for(var s=n[o],a=s.link.range.start.y<e?0:s.link.range.start.x,c=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x,l=a;l<=c;l++){if(r.has(l)){n.splice(o--,1);break}r.add(l)}}},t.prototype._checkLinkProviderResult=function(e,t,r){var i,n=this;if(!this._activeProviderReplies)return r;for(var o=this._activeProviderReplies.get(e),s=!1,a=0;a<e;a++)this._activeProviderReplies.has(a)&&!this._activeProviderReplies.get(a)||(s=!0);if(!s&&o){var c=o.find((function(e){return n._linkAtPosition(e.link,t)}));c&&(r=!0,this._handleNewLink(c))}if(this._activeProviderReplies.size===this._linkProviders.length&&!r)for(a=0;a<this._activeProviderReplies.size;a++){var l=null===(i=this._activeProviderReplies.get(a))||void 0===i?void 0:i.find((function(e){return n._linkAtPosition(e.link,t)}));if(l){r=!0,this._handleNewLink(l);break}}return r},t.prototype._handleMouseDown=function(){this._mouseDownLink=this._currentLink},t.prototype._handleMouseUp=function(e){if(this._element&&this._mouseService&&this._currentLink){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text)}},t.prototype._clearCurrentLink=function(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0,u.disposeArray)(this._linkCacheDisposables))},t.prototype._handleNewLink=function(e){var t=this;if(this._element&&this._lastMouseEvent&&this._mouseService){var r=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);r&&this._linkAtPosition(e.link,r)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.pointerCursor},set:function(e){var r,i;(null===(r=t._currentLink)||void 0===r?void 0:r.state)&&t._currentLink.state.decorations.pointerCursor!==e&&(t._currentLink.state.decorations.pointerCursor=e,t._currentLink.state.isHovered&&(null===(i=t._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)))}},underline:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.underline},set:function(r){var i,n,o;(null===(i=t._currentLink)||void 0===i?void 0:i.state)&&(null===(o=null===(n=t._currentLink)||void 0===n?void 0:n.state)||void 0===o?void 0:o.decorations.underline)!==r&&(t._currentLink.state.decorations.underline=r,t._currentLink.state.isHovered&&t._fireUnderlineEvent(e.link,r))}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((function(e){var r=0===e.start?0:e.start+1+t._bufferService.buffer.ydisp;t._clearCurrentLink(r,e.end+1+t._bufferService.buffer.ydisp)}))))}},t.prototype._linkHover=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(r,t.text)},t.prototype._fireUnderlineEvent=function(e,t){var r=e.range,i=this._bufferService.buffer.ydisp,n=this._createLinkUnderlineEvent(r.start.x-1,r.start.y-i-1,r.end.x,r.end.y-i-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(n)},t.prototype._linkLeave=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(r,t.text)},t.prototype._linkAtPosition=function(e,t){var r=e.range.start.y===e.range.end.y,i=e.range.start.y<t.y,n=e.range.end.y>t.y;return(r&&e.range.start.x<=t.x&&e.range.end.x>=t.x||i&&e.range.end.x>=t.x||n&&e.range.start.x<=t.x||i&&n)&&e.range.start.y<=t.y&&e.range.end.y>=t.y},t.prototype._positionFromMouseEvent=function(e,t,r){var i=r.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(i)return{x:i[0],y:i[1]+this._bufferService.buffer.ydisp}},t.prototype._createLinkUnderlineEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},o([s(0,l.IBufferService)],t)}(u.Disposable);t.Linkifier2=_},9042:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},6954:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZoneManager=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s){var a=e.call(this)||this;return a._element=t,a._screenElement=r,a._bufferService=i,a._mouseService=n,a._selectionService=o,a._optionsService=s,a._zones=[],a._areZonesActive=!1,a._lastHoverCoords=[void 0,void 0],a._initialSelectionLength=0,a.register((0,c.addDisposableDomListener)(a._element,"mousedown",(function(e){return a._onMouseDown(e)}))),a._mouseMoveListener=function(e){return a._onMouseMove(e)},a._mouseLeaveListener=function(e){return a._onMouseLeave(e)},a._clickListener=function(e){return a._onClick(e)},a}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._deactivate()},t.prototype.add=function(e){this._zones.push(e),1===this._zones.length&&this._activate()},t.prototype.clearAll=function(e,t){if(0!==this._zones.length){e&&t||(e=0,t=this._bufferService.rows-1);for(var r=0;r<this._zones.length;r++){var i=this._zones[r];(i.y1>e&&i.y1<=t+1||i.y2>e&&i.y2<=t+1||i.y1<e&&i.y2>t+1)&&(this._currentZone&&this._currentZone===i&&(this._currentZone.leaveCallback(),this._currentZone=void 0),this._zones.splice(r--,1))}0===this._zones.length&&this._deactivate()}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._element.addEventListener("mousemove",this._mouseMoveListener),this._element.addEventListener("mouseleave",this._mouseLeaveListener),this._element.addEventListener("click",this._clickListener))},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._element.removeEventListener("mousemove",this._mouseMoveListener),this._element.removeEventListener("mouseleave",this._mouseLeaveListener),this._element.removeEventListener("click",this._clickListener))},t.prototype._onMouseMove=function(e){this._lastHoverCoords[0]===e.pageX&&this._lastHoverCoords[1]===e.pageY||(this._onHover(e),this._lastHoverCoords=[e.pageX,e.pageY])},t.prototype._onHover=function(e){var t=this,r=this._findZoneEventAt(e);r!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),r&&(this._currentZone=r,r.hoverCallback&&r.hoverCallback(e),this._tooltipTimeout=window.setTimeout((function(){return t._onTooltip(e)}),this._optionsService.rawOptions.linkTooltipHoverDuration)))},t.prototype._onTooltip=function(e){this._tooltipTimeout=void 0;var t=this._findZoneEventAt(e);null==t||t.tooltipCallback(e)},t.prototype._onMouseDown=function(e){if(this._initialSelectionLength=this._getSelectionLength(),this._areZonesActive){var t=this._findZoneEventAt(e);(null==t?void 0:t.willLinkActivate(e))&&(e.preventDefault(),e.stopImmediatePropagation())}},t.prototype._onMouseLeave=function(e){this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout))},t.prototype._onClick=function(e){var t=this._findZoneEventAt(e),r=this._getSelectionLength();t&&r===this._initialSelectionLength&&(t.clickCallback(e),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._getSelectionLength=function(){var e=this._selectionService.selectionText;return e?e.length:0},t.prototype._findZoneEventAt=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows);if(t)for(var r=t[0],i=t[1],n=0;n<this._zones.length;n++){var o=this._zones[n];if(o.y1===o.y2){if(i===o.y1&&r>=o.x1&&r<o.x2)return o}else if(i===o.y1&&r>=o.x1||i===o.y2&&r<o.x2||i>o.y1&&i<o.y2)return o}},o([s(2,h.IBufferService),s(3,l.IMouseService),s(4,l.ISelectionService),s(5,h.IOptionsService)],t)}(a.Disposable);t.MouseZoneManager=u},6193:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0;var i=function(){function e(e){this._renderCallback=e,this._refreshCallbacks=[]}return e.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.addRefreshCallback=function(e){var t=this;return this._refreshCallbacks.push(e),this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return t._innerRefresh()}))),this._animationFrame},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return i._innerRefresh()})))},e.prototype._innerRefresh=function(){if(this._animationFrame=void 0,void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t),this._runRefreshCallbacks()}else this._runRefreshCallbacks()},e.prototype._runRefreshCallbacks=function(){var e,t;try{for(var i=r(this._refreshCallbacks),n=i.next();!n.done;n=i.next())(0,n.value)(0)}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}this._refreshCallbacks=[]},e}();t.RenderDebouncer=i},5596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._currentDevicePixelRatio=window.devicePixelRatio,t}return n(t,e),t.prototype.setListener=function(e){var t=this;this._listener&&this.clearListener(),this._listener=e,this._outerListener=function(){t._listener&&(t._listener(window.devicePixelRatio,t._currentDevicePixelRatio),t._updateDpr())},this._updateDpr()},t.prototype.dispose=function(){e.prototype.dispose.call(this),this.clearListener()},t.prototype._updateDpr=function(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener))},t.prototype.clearListener=function(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0)},t}(r(844).Disposable);t.ScreenDprMonitor=o},3236:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var c=r(2950),l=r(1680),h=r(3614),u=r(2584),f=r(5435),_=r(3525),d=r(3551),p=r(9312),v=r(6114),y=r(3656),g=r(9042),m=r(357),b=r(6954),S=r(4567),C=r(1296),w=r(7399),L=r(8460),E=r(8437),x=r(5680),R=r(3230),k=r(4725),M=r(428),A=r(8934),O=r(6465),D=r(5114),T=r(8969),B=r(8055),P=r(4269),I=r(5941),H=r(3107),j=r(5744),F=r(9074),W=r(2585),U="undefined"!=typeof window?window.document:null,q=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.browser=v,r._keyDownHandled=!1,r._keyDownSeen=!1,r._keyPressHandled=!1,r._unprocessedDeadKey=!1,r._onCursorMove=new L.EventEmitter,r._onKey=new L.EventEmitter,r._onRender=new L.EventEmitter,r._onSelectionChange=new L.EventEmitter,r._onTitleChange=new L.EventEmitter,r._onBell=new L.EventEmitter,r._onFocus=new L.EventEmitter,r._onBlur=new L.EventEmitter,r._onA11yCharEmitter=new L.EventEmitter,r._onA11yTabEmitter=new L.EventEmitter,r._setup(),r.linkifier=r._instantiationService.createInstance(d.Linkifier),r.linkifier2=r.register(r._instantiationService.createInstance(O.Linkifier2)),r._decorationService=r._instantiationService.createInstance(F.DecorationService),r._instantiationService.setService(W.IDecorationService,r._decorationService),r.register(r._inputHandler.onRequestBell((function(){return r.bell()}))),r.register(r._inputHandler.onRequestRefreshRows((function(e,t){return r.refresh(e,t)}))),r.register(r._inputHandler.onRequestSendFocus((function(){return r._reportFocus()}))),r.register(r._inputHandler.onRequestReset((function(){return r.reset()}))),r.register(r._inputHandler.onRequestWindowsOptionsReport((function(e){return r._reportWindowsOptions(e)}))),r.register(r._inputHandler.onColor((function(e){return r._handleColorEvent(e)}))),r.register((0,L.forwardEvent)(r._inputHandler.onCursorMove,r._onCursorMove)),r.register((0,L.forwardEvent)(r._inputHandler.onTitleChange,r._onTitleChange)),r.register((0,L.forwardEvent)(r._inputHandler.onA11yChar,r._onA11yCharEmitter)),r.register((0,L.forwardEvent)(r._inputHandler.onA11yTab,r._onA11yTabEmitter)),r.register(r._bufferService.onResize((function(e){return r._afterResize(e.cols,e.rows)}))),r}return n(t,e),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onKey",{get:function(){return this._onKey.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBell",{get:function(){return this._onBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onFocus",{get:function(){return this._onFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBlur",{get:function(){return this._onBlur.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yCharEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTabEmitter.event},enumerable:!1,configurable:!0}),t.prototype._handleColorEvent=function(e){var t,r,i,n;if(this._colorManager){try{for(var c=o(e),l=c.next();!l.done;l=c.next()){var h=l.value,f=void 0,_="";switch(h.index){case 256:f="foreground",_="10";break;case 257:f="background",_="11";break;case 258:f="cursor",_="12";break;default:f="ansi",_="4;"+h.index}if(f)switch(h.type){case 0:var d=B.color.toColorRGB("ansi"===f?this._colorManager.colors.ansi[h.index]:this._colorManager.colors[f]);this.coreService.triggerDataEvent(u.C0.ESC+"]"+_+";"+(0,I.toRgbString)(d)+u.C1_ESCAPED.ST);break;case 1:"ansi"===f?this._colorManager.colors.ansi[h.index]=B.rgba.toColor.apply(B.rgba,a([],s(h.color),!1)):this._colorManager.colors[f]=B.rgba.toColor.apply(B.rgba,a([],s(h.color),!1));break;case 2:this._colorManager.restoreColor(h.index)}}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(t)throw t.error}}null===(i=this._renderService)||void 0===i||i.setColors(this._colorManager.colors),null===(n=this.viewport)||void 0===n||n.onThemeChange(this._colorManager.colors)}},t.prototype.dispose=function(){var t,r,i;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._renderService)||void 0===t||t.dispose(),this._customKeyEventHandler=void 0,this.write=function(){},null===(i=null===(r=this.element)||void 0===r?void 0:r.parentNode)||void 0===i||i.removeChild(this.element))},t.prototype._setup=function(){e.prototype._setup.call(this),this._customKeyEventHandler=void 0},Object.defineProperty(t.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),t.prototype.focus=function(){this.textarea&&this.textarea.focus({preventScroll:!0})},t.prototype._updateOptions=function(t){var r,i,n,o;switch(e.prototype._updateOptions.call(this,t),t){case"fontFamily":case"fontSize":null===(r=this._renderService)||void 0===r||r.clear(),null===(i=this._charSizeService)||void 0===i||i.measure();break;case"cursorBlink":case"cursorStyle":this.refresh(this.buffer.y,this.buffer.y);break;case"customGlyphs":case"drawBoldTextInBrightColors":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":case"minimumContrastRatio":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case"rendererType":this._renderService&&(this._renderService.setRenderer(this._createRenderer()),this._renderService.onResize(this.cols,this.rows));break;case"scrollback":null===(n=this.viewport)||void 0===n||n.syncScrollArea();break;case"screenReaderMode":this.optionsService.rawOptions.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new S.AccessibilityManager(this,this._renderService)):(null===(o=this._accessibilityManager)||void 0===o||o.dispose(),this._accessibilityManager=void 0);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"theme":this._setTheme(this.optionsService.rawOptions.theme)}},t.prototype._onTextAreaFocus=function(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(u.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire()},t.prototype.blur=function(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()},t.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(u.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire()},t.prototype._syncTextArea=function(){if(this.textarea&&this.buffer.isCursorInViewport&&!this._compositionHelper.isComposing&&this._renderService){var e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(t){var r=Math.min(this.buffer.x,this.cols-1),i=this._renderService.dimensions.actualCellHeight,n=t.getWidth(r),o=this._renderService.dimensions.actualCellWidth*n,s=this.buffer.y*this._renderService.dimensions.actualCellHeight,a=r*this._renderService.dimensions.actualCellWidth;this.textarea.style.left=a+"px",this.textarea.style.top=s+"px",this.textarea.style.width=o+"px",this.textarea.style.height=i+"px",this.textarea.style.lineHeight=i+"px",this.textarea.style.zIndex="-5"}}},t.prototype._initGlobal=function(){var e=this;this._bindKeys(),this.register((0,y.addDisposableDomListener)(this.element,"copy",(function(t){e.hasSelection()&&(0,h.copyHandler)(t,e._selectionService)})));var t=function(t){return(0,h.handlePasteEvent)(t,e.textarea,e.coreService)};this.register((0,y.addDisposableDomListener)(this.textarea,"paste",t)),this.register((0,y.addDisposableDomListener)(this.element,"paste",t)),v.isFirefox?this.register((0,y.addDisposableDomListener)(this.element,"mousedown",(function(t){2===t.button&&(0,h.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))):this.register((0,y.addDisposableDomListener)(this.element,"contextmenu",(function(t){(0,h.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))),v.isLinux&&this.register((0,y.addDisposableDomListener)(this.element,"auxclick",(function(t){1===t.button&&(0,h.moveTextAreaUnderMouseCursor)(t,e.textarea,e.screenElement)})))},t.prototype._bindKeys=function(){var e=this;this.register((0,y.addDisposableDomListener)(this.textarea,"keyup",(function(t){return e._keyUp(t)}),!0)),this.register((0,y.addDisposableDomListener)(this.textarea,"keydown",(function(t){return e._keyDown(t)}),!0)),this.register((0,y.addDisposableDomListener)(this.textarea,"keypress",(function(t){return e._keyPress(t)}),!0)),this.register((0,y.addDisposableDomListener)(this.textarea,"compositionstart",(function(){return e._compositionHelper.compositionstart()}))),this.register((0,y.addDisposableDomListener)(this.textarea,"compositionupdate",(function(t){return e._compositionHelper.compositionupdate(t)}))),this.register((0,y.addDisposableDomListener)(this.textarea,"compositionend",(function(){return e._compositionHelper.compositionend()}))),this.register((0,y.addDisposableDomListener)(this.textarea,"input",(function(t){return e._inputEvent(t)}),!0)),this.register(this.onRender((function(){return e._compositionHelper.updateCompositionElements()}))),this.register(this.onRender((function(t){return e._queueLinkification(t.start,t.end)})))},t.prototype.open=function(e){var t=this;if(!e)throw new Error("Terminal requires a parent element.");e.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),e.appendChild(this.element);var r=U.createDocumentFragment();this._viewportElement=U.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),r.appendChild(this._viewportElement),this._viewportScrollArea=U.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=U.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=U.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),r.appendChild(this.screenElement),this.textarea=U.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",g.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register((0,y.addDisposableDomListener)(this.textarea,"focus",(function(e){return t._onTextAreaFocus(e)}))),this.register((0,y.addDisposableDomListener)(this.textarea,"blur",(function(){return t._onTextAreaBlur()}))),this._helperContainer.appendChild(this.textarea);var i=this._instantiationService.createInstance(D.CoreBrowserService,this.textarea);this._instantiationService.setService(k.ICoreBrowserService,i),this._charSizeService=this._instantiationService.createInstance(M.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(k.ICharSizeService,this._charSizeService),this._theme=this.options.theme||this._theme,this._colorManager=new x.ColorManager(U,this.options.allowTransparency),this.register(this.optionsService.onOptionChange((function(e){return t._colorManager.onOptionsChange(e)}))),this._colorManager.setTheme(this._theme),this._characterJoinerService=this._instantiationService.createInstance(P.CharacterJoinerService),this._instantiationService.setService(k.ICharacterJoinerService,this._characterJoinerService);var n=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(R.RenderService,n,this.rows,this.screenElement)),this._instantiationService.setService(k.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange((function(e){return t._onRender.fire(e)}))),this.onResize((function(e){return t._renderService.resize(e.cols,e.rows)})),this._compositionView=U.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(c.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(r),this._soundService=this._instantiationService.createInstance(m.SoundService),this._instantiationService.setService(k.ISoundService,this._soundService),this._mouseService=this._instantiationService.createInstance(A.MouseService),this._instantiationService.setService(k.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(l.Viewport,(function(e){return t.scrollLines(e,!0,1)}),this._viewportElement,this._viewportScrollArea,this.element),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar((function(){return t.viewport.syncScrollArea()}))),this.register(this.viewport),this.register(this.onCursorMove((function(){t._renderService.onCursorMove(),t._syncTextArea()}))),this.register(this.onResize((function(){return t._renderService.onResize(t.cols,t.rows)}))),this.register(this.onBlur((function(){return t._renderService.onBlur()}))),this.register(this.onFocus((function(){return t._renderService.onFocus()}))),this.register(this._renderService.onDimensionsChange((function(){return t.viewport.syncScrollArea()}))),this._selectionService=this.register(this._instantiationService.createInstance(p.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(k.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((function(e){return t.scrollLines(e.amount,e.suppressScrollEvent)}))),this.register(this._selectionService.onSelectionChange((function(){return t._onSelectionChange.fire()}))),this.register(this._selectionService.onRequestRedraw((function(e){return t._renderService.onSelectionChanged(e.start,e.end,e.columnSelectMode)}))),this.register(this._selectionService.onLinuxMouseSelection((function(e){t.textarea.value=e,t.textarea.focus(),t.textarea.select()}))),this.register(this._onScroll.event((function(e){t.viewport.syncScrollArea(),t._selectionService.refresh()}))),this.register((0,y.addDisposableDomListener)(this._viewportElement,"scroll",(function(){return t._selectionService.refresh()}))),this._mouseZoneManager=this._instantiationService.createInstance(b.MouseZoneManager,this.element,this.screenElement),this.register(this._mouseZoneManager),this.register(this.onScroll((function(){return t._mouseZoneManager.clearAll()}))),this.linkifier.attachToDom(this.element,this._mouseZoneManager),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(H.BufferDecorationRenderer,this.screenElement)),this.register((0,y.addDisposableDomListener)(this.element,"mousedown",(function(e){return t._selectionService.onMouseDown(e)}))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new S.AccessibilityManager(this,this._renderService)),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this._instantiationService.createInstance(j.OverviewRulerRenderer,this._viewportElement,this.screenElement)),this.optionsService.onOptionChange((function(){!t._overviewRulerRenderer&&t.options.overviewRulerWidth&&t._viewportElement&&t.screenElement&&(t._overviewRulerRenderer=t._instantiationService.createInstance(j.OverviewRulerRenderer,t._viewportElement,t.screenElement))})),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},t.prototype._createRenderer=function(){switch(this.options.rendererType){case"canvas":return this._instantiationService.createInstance(_.Renderer,this._colorManager.colors,this.screenElement,this.linkifier,this.linkifier2);case"dom":return this._instantiationService.createInstance(C.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier,this.linkifier2);default:throw new Error('Unrecognized rendererType "'+this.options.rendererType+'"')}},t.prototype._setTheme=function(e){var t,r,i;this._theme=e,null===(t=this._colorManager)||void 0===t||t.setTheme(e),null===(r=this._renderService)||void 0===r||r.setColors(this._colorManager.colors),null===(i=this.viewport)||void 0===i||i.onThemeChange(this._colorManager.colors)},t.prototype.bindMouse=function(){var e=this,t=this,r=this.element;function i(e){var r,i,n=t._mouseService.getRawByteCoords(e,t.screenElement,t.cols,t.rows);if(!n)return!1;switch(e.overrideType||e.type){case"mousemove":i=32,void 0===e.buttons?(r=3,void 0!==e.button&&(r=e.button<3?e.button:3)):r=1&e.buttons?0:4&e.buttons?1:2&e.buttons?2:3;break;case"mouseup":i=0,r=e.button<3?e.button:3;break;case"mousedown":i=1,r=e.button<3?e.button:3;break;case"wheel":if(0===t.viewport.getLinesScrolled(e))return!1;i=e.deltaY<0?0:1,r=4;break;default:return!1}return!(void 0===i||void 0===r||r>4)&&t.coreMouseService.triggerMouseEvent({col:n.x-33,row:n.y-33,button:r,action:i,ctrl:e.ctrlKey,alt:e.altKey,shift:e.shiftKey})}var n={mouseup:null,wheel:null,mousedrag:null,mousemove:null},o=function(t){return i(t),t.buttons||(e._document.removeEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.removeEventListener("mousemove",n.mousedrag)),e.cancel(t)},s=function(t){return i(t),e.cancel(t,!0)},a=function(e){e.buttons&&i(e)},c=function(e){e.buttons||i(e)};this.register(this.coreMouseService.onProtocolChange((function(t){t?("debug"===e.optionsService.rawOptions.logLevel&&e._logService.debug("Binding to mouse events:",e.coreMouseService.explainEvents(t)),e.element.classList.add("enable-mouse-events"),e._selectionService.disable()):(e._logService.debug("Unbinding from mouse events."),e.element.classList.remove("enable-mouse-events"),e._selectionService.enable()),8&t?n.mousemove||(r.addEventListener("mousemove",c),n.mousemove=c):(r.removeEventListener("mousemove",n.mousemove),n.mousemove=null),16&t?n.wheel||(r.addEventListener("wheel",s,{passive:!1}),n.wheel=s):(r.removeEventListener("wheel",n.wheel),n.wheel=null),2&t?n.mouseup||(n.mouseup=o):(e._document.removeEventListener("mouseup",n.mouseup),n.mouseup=null),4&t?n.mousedrag||(n.mousedrag=a):(e._document.removeEventListener("mousemove",n.mousedrag),n.mousedrag=null)}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0,y.addDisposableDomListener)(r,"mousedown",(function(t){if(t.preventDefault(),e.focus(),e.coreMouseService.areMouseEventsActive&&!e._selectionService.shouldForceSelection(t))return i(t),n.mouseup&&e._document.addEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.addEventListener("mousemove",n.mousedrag),e.cancel(t)}))),this.register((0,y.addDisposableDomListener)(r,"wheel",(function(t){if(!n.wheel){if(!e.buffer.hasScrollback){var r=e.viewport.getLinesScrolled(t);if(0===r)return;for(var i=u.C0.ESC+(e.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(t.deltaY<0?"A":"B"),o="",s=0;s<Math.abs(r);s++)o+=i;return e.coreService.triggerDataEvent(o,!0),e.cancel(t,!0)}return e.viewport.onWheel(t)?e.cancel(t):void 0}}),{passive:!1})),this.register((0,y.addDisposableDomListener)(r,"touchstart",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchStart(t),e.cancel(t)}),{passive:!0})),this.register((0,y.addDisposableDomListener)(r,"touchmove",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchMove(t)?void 0:e.cancel(t)}),{passive:!1}))},t.prototype.refresh=function(e,t){var r;null===(r=this._renderService)||void 0===r||r.refreshRows(e,t)},t.prototype._queueLinkification=function(e,t){var r;null===(r=this.linkifier)||void 0===r||r.linkifyRows(e,t)},t.prototype.updateCursorStyle=function(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add("column-select"):this.element.classList.remove("column-select")},t.prototype._showCursor=function(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y))},t.prototype.scrollLines=function(t,r,i){void 0===i&&(i=0),e.prototype.scrollLines.call(this,t,r,i),this.refresh(0,this.rows-1)},t.prototype.paste=function(e){(0,h.paste)(e,this.textarea,this.coreService)},t.prototype.attachCustomKeyEventHandler=function(e){this._customKeyEventHandler=e},t.prototype.registerLinkMatcher=function(e,t,r){var i=this.linkifier.registerLinkMatcher(e,t,r);return this.refresh(0,this.rows-1),i},t.prototype.deregisterLinkMatcher=function(e){this.linkifier.deregisterLinkMatcher(e)&&this.refresh(0,this.rows-1)},t.prototype.registerLinkProvider=function(e){return this.linkifier2.registerLinkProvider(e)},t.prototype.registerCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");var t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t},t.prototype.deregisterCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1)},Object.defineProperty(t.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!1,configurable:!0}),t.prototype.addMarker=function(e){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)},t.prototype.registerDecoration=function(e){return this._decorationService.registerDecoration(e)},t.prototype.hasSelection=function(){return!!this._selectionService&&this._selectionService.hasSelection},t.prototype.select=function(e,t,r){this._selectionService.setSelection(e,t,r)},t.prototype.getSelection=function(){return this._selectionService?this._selectionService.selectionText:""},t.prototype.getSelectionPosition=function(){if(this._selectionService&&this._selectionService.hasSelection)return{startColumn:this._selectionService.selectionStart[0],startRow:this._selectionService.selectionStart[1],endColumn:this._selectionService.selectionEnd[0],endRow:this._selectionService.selectionEnd[1]}},t.prototype.clearSelection=function(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection()},t.prototype.selectAll=function(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll()},t.prototype.selectLines=function(e,t){var r;null===(r=this._selectionService)||void 0===r||r.selectLines(e,t)},t.prototype._keyDown=function(e){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;var t=this.browser.isMac&&this.options.macOptionIsMeta&&e.altKey;if(!t&&!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;t||"Dead"!==e.key&&"AltGraph"!==e.key||(this._unprocessedDeadKey=!0);var r=(0,w.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===r.type||2===r.type){var i=this.rows-1;return this.scrollLines(2===r.type?-i:i),this.cancel(e,!0)}return 1===r.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(r.cancel&&this.cancel(e,!0),!r.key||!!(e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&1===e.key.length&&e.key.charCodeAt(0)>=65&&e.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(r.key!==u.C0.ETX&&r.key!==u.C0.CR||(this.textarea.value=""),this._onKey.fire({key:r.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(r.key,!0),this.optionsService.rawOptions.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(e,!0))))},t.prototype._isThirdLevelShift=function(e,t){var r=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState("AltGraph");return"keypress"===t.type?r:r&&(!t.keyCode||t.keyCode>47)},t.prototype._keyUp=function(e){this._keyDownSeen=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1)},t.prototype._keyPress=function(e){var t;if(this._keyPressHandled=!1,this._keyDownHandled)return!1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else{if(0===e.which||0===e.charCode)return!1;t=e.which}return!(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))},t.prototype._inputEvent=function(e){if(e.data&&"insertText"===e.inputType&&(!e.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return!1;this._unprocessedDeadKey=!1;var t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return!1},t.prototype.bell=function(){var e;this._soundBell()&&(null===(e=this._soundService)||void 0===e||e.playBellSound()),this._onBell.fire()},t.prototype.resize=function(t,r){t!==this.cols||r!==this.rows?e.prototype.resize.call(this,t,r):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure()},t.prototype._afterResize=function(e,t){var r,i;null===(r=this._charSizeService)||void 0===r||r.measure(),null===(i=this.viewport)||void 0===i||i.syncScrollArea(!0)},t.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(E.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0})}},t.prototype.reset=function(){var t,r;this.options.rows=this.rows,this.options.cols=this.cols;var i=this._customKeyEventHandler;this._setup(),e.prototype.reset.call(this),null===(t=this._selectionService)||void 0===t||t.reset(),this._decorationService.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(r=this.viewport)||void 0===r||r.syncScrollArea()},t.prototype.clearTextureAtlas=function(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas()},t.prototype._reportFocus=function(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains("focus"))?this.coreService.triggerDataEvent(u.C0.ESC+"[I"):this.coreService.triggerDataEvent(u.C0.ESC+"[O")},t.prototype._reportWindowsOptions=function(e){if(this._renderService)switch(e){case f.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:var t=this._renderService.dimensions.scaledCanvasWidth.toFixed(0),r=this._renderService.dimensions.scaledCanvasHeight.toFixed(0);this.coreService.triggerDataEvent(u.C0.ESC+"[4;"+r+";"+t+"t");break;case f.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:var i=this._renderService.dimensions.scaledCellWidth.toFixed(0),n=this._renderService.dimensions.scaledCellHeight.toFixed(0);this.coreService.triggerDataEvent(u.C0.ESC+"[6;"+n+";"+i+"t")}},t.prototype.cancel=function(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1},t.prototype._visualBell=function(){return!1},t.prototype._soundBell=function(){return"sound"===this.options.bellStyle},t}(T.CoreTerminal);t.Terminal=q},9924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeBasedDebouncer=void 0;var r=function(){function e(e,t){void 0===t&&(t=1e3),this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1}return e.prototype.dispose=function(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID)},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;var n=Date.now();if(n-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=n,this._innerRefresh();else if(!this._additionalRefreshRequested){var o=n-this._lastRefreshMs,s=this._debounceThresholdMS-o;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((function(){i._lastRefreshMs=Date.now(),i._innerRefresh(),i._additionalRefreshRequested=!1,i._refreshTimeoutID=void 0}),s)}},e.prototype._innerRefresh=function(){if(void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t)}},e}();t.TimeBasedDebouncer=r},1680:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,l){var h=e.call(this)||this;return h._scrollLines=t,h._viewportElement=r,h._scrollArea=i,h._element=n,h._bufferService=o,h._optionsService=s,h._charSizeService=a,h._renderService=l,h.scrollBarWidth=0,h._currentRowHeight=0,h._currentScaledCellHeight=0,h._lastRecordedBufferLength=0,h._lastRecordedViewportHeight=0,h._lastRecordedBufferHeight=0,h._lastTouchY=0,h._lastScrollTop=0,h._wheelPartialScroll=0,h._refreshAnimationFrame=null,h._ignoreNextScrollEvent=!1,h.scrollBarWidth=h._viewportElement.offsetWidth-h._scrollArea.offsetWidth||15,h.register((0,c.addDisposableDomListener)(h._viewportElement,"scroll",h._onScroll.bind(h))),h._activeBuffer=h._bufferService.buffer,h.register(h._bufferService.buffers.onBufferActivate((function(e){return h._activeBuffer=e.activeBuffer}))),h._renderDimensions=h._renderService.dimensions,h.register(h._renderService.onDimensionsChange((function(e){return h._renderDimensions=e}))),setTimeout((function(){return h.syncScrollArea()}),0),h}return n(t,e),t.prototype.onThemeChange=function(e){this._viewportElement.style.backgroundColor=e.background.css},t.prototype._refresh=function(e){var t=this;if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame((function(){return t._innerRefresh()})))},t.prototype._innerRefresh=function(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/window.devicePixelRatio,this._currentScaledCellHeight=this._renderService.dimensions.scaledCellHeight,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}var t=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=t),this._refreshAnimationFrame=null},t.prototype.syncScrollArea=function(e){if(void 0===e&&(e=!1),this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.scaledCellHeight===this._currentScaledCellHeight||this._refresh(e)},t.prototype._onScroll=function(e){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent){if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);var t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t)}},t.prototype._bubbleScroll=function(e,t){var r=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return!(t<0&&0!==this._viewportElement.scrollTop||t>0&&r<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)},t.prototype.onWheel=function(e){var t=this._getPixelsScrolled(e);return 0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},t.prototype._getPixelsScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t},t.prototype.getLinesScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t},t.prototype._applyScrollModifier=function(e,t){var r=this._optionsService.rawOptions.fastScrollModifier;return"alt"===r&&t.altKey||"ctrl"===r&&t.ctrlKey||"shift"===r&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity},t.prototype.onTouchStart=function(e){this._lastTouchY=e.touches[0].pageY},t.prototype.onTouchMove=function(e){var t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},o([s(4,h.IBufferService),s(5,h.IOptionsService),s(6,l.ICharSizeService),s(7,l.IRenderService)],t)}(a.Disposable);t.Viewport=u},3107:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferDecorationRenderer=void 0;var c=r(3656),l=r(4725),h=r(844),u=r(2585),f=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._screenElement=t,o._bufferService=r,o._decorationService=i,o._renderService=n,o._decorationElements=new Map,o._altBufferIsActive=!1,o._dimensionsChanged=!1,o._container=document.createElement("div"),o._container.classList.add("xterm-decoration-container"),o._screenElement.appendChild(o._container),o.register(o._renderService.onRenderedViewportChange((function(){return o._queueRefresh()}))),o.register(o._renderService.onDimensionsChange((function(){o._dimensionsChanged=!0,o._queueRefresh()}))),o.register((0,c.addDisposableDomListener)(window,"resize",(function(){return o._queueRefresh()}))),o.register(o._bufferService.buffers.onBufferActivate((function(){o._altBufferIsActive=o._bufferService.buffer===o._bufferService.buffers.alt}))),o.register(o._decorationService.onDecorationRegistered((function(){return o._queueRefresh()}))),o.register(o._decorationService.onDecorationRemoved((function(e){return o._removeDecoration(e)}))),o}return n(t,e),t.prototype.dispose=function(){this._container.remove(),this._decorationElements.clear(),e.prototype.dispose.call(this)},t.prototype._queueRefresh=function(){var e=this;void 0===this._animationFrame&&(this._animationFrame=this._renderService.addRefreshCallback((function(){e.refreshDecorations(),e._animationFrame=void 0})))},t.prototype.refreshDecorations=function(){var e,t;try{for(var r=a(this._decorationService.decorations),i=r.next();!i.done;i=r.next()){var n=i.value;this._renderDecoration(n)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}this._dimensionsChanged=!1},t.prototype._renderDecoration=function(e){this._refreshStyle(e),this._dimensionsChanged&&this._refreshXPosition(e)},t.prototype._createElement=function(e){var t,r=document.createElement("div");r.classList.add("xterm-decoration"),r.style.width=Math.round((e.options.width||1)*this._renderService.dimensions.actualCellWidth)+"px",r.style.height=(e.options.height||1)*this._renderService.dimensions.actualCellHeight+"px",r.style.top=(e.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.actualCellHeight+"px",r.style.lineHeight=this._renderService.dimensions.actualCellHeight+"px";var i=null!==(t=e.options.x)&&void 0!==t?t:0;return i&&i>this._bufferService.cols&&(r.style.display="none"),this._refreshXPosition(e,r),r},t.prototype._refreshStyle=function(e){var t=this,r=e.marker.line-this._bufferService.buffers.active.ydisp;if(r<0||r>=this._bufferService.rows)e.element&&(e.element.style.display="none",e.onRenderEmitter.fire(e.element));else{var i=this._decorationElements.get(e);i||(e.onDispose((function(){return t._removeDecoration(e)})),i=this._createElement(e),e.element=i,this._decorationElements.set(e,i),this._container.appendChild(i)),i.style.top=r*this._renderService.dimensions.actualCellHeight+"px",i.style.display=this._altBufferIsActive?"none":"block",e.onRenderEmitter.fire(i)}},t.prototype._refreshXPosition=function(e,t){var r;if(void 0===t&&(t=e.element),t){var i=null!==(r=e.options.x)&&void 0!==r?r:0;"right"===(e.options.anchor||"left")?t.style.right=i?i*this._renderService.dimensions.actualCellWidth+"px":"":t.style.left=i?i*this._renderService.dimensions.actualCellWidth+"px":""}},t.prototype._removeDecoration=function(e){var t;null===(t=this._decorationElements.get(e))||void 0===t||t.remove(),this._decorationElements.delete(e)},o([s(1,u.IBufferService),s(2,u.IDecorationService),s(3,l.IRenderService)],t)}(h.Disposable);t.BufferDecorationRenderer=f},5871:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorZoneStore=void 0;var i=function(){function e(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0}}return Object.defineProperty(e.prototype,"zones",{get:function(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones},enumerable:!1,configurable:!0}),e.prototype.clear=function(){this._zones.length=0,this._zonePoolIndex=0},e.prototype.addDecoration=function(e){var t,i;if(e.options.overviewRulerOptions){try{for(var n=r(this._zones),o=n.next();!o.done;o=n.next()){var s=o.value;if(s.color===e.options.overviewRulerOptions.color&&s.position===e.options.overviewRulerOptions.position){if(this._lineIntersectsZone(s,e.marker.line))return;if(this._lineAdjacentToZone(s,e.marker.line,e.options.overviewRulerOptions.position))return void this._addLineToZone(s,e.marker.line)}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(t)throw t.error}}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=e.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=e.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=e.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=e.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:e.options.overviewRulerOptions.color,position:e.options.overviewRulerOptions.position,startBufferLine:e.marker.line,endBufferLine:e.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++}},e.prototype.setPadding=function(e){this._linePadding=e},e.prototype._lineIntersectsZone=function(e,t){return t>=e.startBufferLine&&t<=e.endBufferLine},e.prototype._lineAdjacentToZone=function(e,t,r){return t>=e.startBufferLine-this._linePadding[r||"full"]&&t<=e.endBufferLine+this._linePadding[r||"full"]},e.prototype._addLineToZone=function(e,t){e.startBufferLine=Math.min(e.startBufferLine,t),e.endBufferLine=Math.max(e.endBufferLine,t)},e}();t.ColorZoneStore=i},5744:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.OverviewRulerRenderer=void 0;var c=r(5871),l=r(3656),h=r(4725),u=r(844),f=r(2585),_={full:0,left:0,center:0,right:0},d={full:0,left:0,center:0,right:0},p={full:0,left:0,center:0,right:0},v=function(e){function t(t,r,i,n,o,s){var a,l=e.call(this)||this;l._viewportElement=t,l._screenElement=r,l._bufferService=i,l._decorationService=n,l._renderService=o,l._optionsService=s,l._colorZoneStore=new c.ColorZoneStore,l._shouldUpdateDimensions=!0,l._shouldUpdateAnchor=!0,l._lastKnownBufferLength=0,l._canvas=document.createElement("canvas"),l._canvas.classList.add("xterm-decoration-overview-ruler"),l._refreshCanvasDimensions(),null===(a=l._viewportElement.parentElement)||void 0===a||a.insertBefore(l._canvas,l._viewportElement);var h=l._canvas.getContext("2d");if(!h)throw new Error("Ctx cannot be null");return l._ctx=h,l._registerDecorationListeners(),l._registerBufferChangeListeners(),l._registerDimensionChangeListeners(),l}return n(t,e),Object.defineProperty(t.prototype,"_width",{get:function(){return this._optionsService.options.overviewRulerWidth||0},enumerable:!1,configurable:!0}),t.prototype._registerDecorationListeners=function(){var e=this;this.register(this._decorationService.onDecorationRegistered((function(){return e._queueRefresh(void 0,!0)}))),this.register(this._decorationService.onDecorationRemoved((function(){return e._queueRefresh(void 0,!0)})))},t.prototype._registerBufferChangeListeners=function(){var e=this;this.register(this._renderService.onRenderedViewportChange((function(){return e._queueRefresh()}))),this.register(this._bufferService.buffers.onBufferActivate((function(){e._canvas.style.display=e._bufferService.buffer===e._bufferService.buffers.alt?"none":"block"}))),this.register(this._bufferService.onScroll((function(){e._lastKnownBufferLength!==e._bufferService.buffers.normal.lines.length&&(e._refreshDrawHeightConstants(),e._refreshColorZonePadding())})))},t.prototype._registerDimensionChangeListeners=function(){var e=this;this.register(this._renderService.onRender((function(){e._containerHeight&&e._containerHeight===e._screenElement.clientHeight||(e._queueRefresh(!0),e._containerHeight=e._screenElement.clientHeight)}))),this.register(this._optionsService.onOptionChange((function(t){"overviewRulerWidth"===t&&e._queueRefresh(!0)}))),this.register((0,l.addDisposableDomListener)(window,"resize",(function(){e._queueRefresh(!0)}))),this._queueRefresh(!0)},t.prototype.dispose=function(){var t;null===(t=this._canvas)||void 0===t||t.remove(),e.prototype.dispose.call(this)},t.prototype._refreshDrawConstants=function(){var e=Math.floor(this._canvas.width/3),t=Math.ceil(this._canvas.width/3);d.full=this._canvas.width,d.left=e,d.center=t,d.right=e,this._refreshDrawHeightConstants(),p.full=0,p.left=0,p.center=d.left,p.right=d.left+d.center},t.prototype._refreshDrawHeightConstants=function(){_.full=Math.round(2*window.devicePixelRatio);var e=this._canvas.height/this._bufferService.buffer.lines.length,t=Math.round(Math.max(Math.min(e,12),6)*window.devicePixelRatio);_.left=t,_.center=t,_.right=t},t.prototype._refreshColorZonePadding=function(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length},t.prototype._refreshCanvasDimensions=function(){this._canvas.style.width=this._width+"px",this._canvas.width=Math.round(this._width*window.devicePixelRatio),this._canvas.style.height=this._screenElement.clientHeight+"px",this._canvas.height=Math.round(this._screenElement.clientHeight*window.devicePixelRatio),this._refreshDrawConstants(),this._refreshColorZonePadding()},t.prototype._refreshDecorations=function(){var e,t,r,i,n,o;this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();try{for(var s=a(this._decorationService.decorations),c=s.next();!c.done;c=s.next()){var l=c.value;this._colorZoneStore.addDecoration(l)}}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}this._ctx.lineWidth=1;var h=this._colorZoneStore.zones;try{for(var u=a(h),f=u.next();!f.done;f=u.next())"full"!==(p=f.value).position&&this._renderColorZone(p)}catch(e){r={error:e}}finally{try{f&&!f.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}try{for(var _=a(h),d=_.next();!d.done;d=_.next()){var p;"full"===(p=d.value).position&&this._renderColorZone(p)}}catch(e){n={error:e}}finally{try{d&&!d.done&&(o=_.return)&&o.call(_)}finally{if(n)throw n.error}}this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1},t.prototype._renderColorZone=function(e){this._ctx.fillStyle=e.color,this._ctx.fillRect(p[e.position||"full"],Math.round((this._canvas.height-1)*(e.startBufferLine/this._bufferService.buffers.active.lines.length)-_[e.position||"full"]/2),d[e.position||"full"],Math.round((this._canvas.height-1)*((e.endBufferLine-e.startBufferLine)/this._bufferService.buffers.active.lines.length)+_[e.position||"full"]))},t.prototype._queueRefresh=function(e,t){var r=this;this._shouldUpdateDimensions=e||this._shouldUpdateDimensions,this._shouldUpdateAnchor=t||this._shouldUpdateAnchor,void 0===this._animationFrame&&(this._animationFrame=window.requestAnimationFrame((function(){r._refreshDecorations(),r._animationFrame=void 0})))},o([s(2,f.IBufferService),s(3,f.IDecorationService),s(4,h.IRenderService),s(5,f.IOptionsService)],t)}(u.Disposable);t.OverviewRulerRenderer=v},2950:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;var o=r(4725),s=r(2585),a=function(){function e(e,t,r,i,n,o){this._textarea=e,this._compositionView=t,this._bufferService=r,this._optionsService=i,this._coreService=n,this._renderService=o,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent=""}return Object.defineProperty(e.prototype,"isComposing",{get:function(){return this._isComposing},enumerable:!1,configurable:!0}),e.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active")},e.prototype.compositionupdate=function(e){var t=this;this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((function(){t._compositionPosition.end=t._textarea.value.length}),0)},e.prototype.compositionend=function(){this._finalizeComposition(!0)},e.prototype.keydown=function(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return!1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return!1;this._finalizeComposition(!1)}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)},e.prototype._finalizeComposition=function(e){var t=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){var r={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((function(){if(t._isSendingComposition){t._isSendingComposition=!1;var e;r.start+=t._dataAlreadySent.length,(e=t._isComposing?t._textarea.value.substring(r.start,r.end):t._textarea.value.substring(r.start)).length>0&&t._coreService.triggerDataEvent(e,!0)}}),0)}else{this._isSendingComposition=!1;var i=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(i,!0)}},e.prototype._handleAnyTextareaChanges=function(){var e=this,t=this._textarea.value;setTimeout((function(){if(!e._isComposing){var r=e._textarea.value.replace(t,"");r.length>0&&(e._dataAlreadySent=r,e._coreService.triggerDataEvent(r,!0))}}),0)},e.prototype.updateCompositionElements=function(e){var t=this;if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){var r=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),i=this._renderService.dimensions.actualCellHeight,n=this._bufferService.buffer.y*this._renderService.dimensions.actualCellHeight,o=r*this._renderService.dimensions.actualCellWidth;this._compositionView.style.left=o+"px",this._compositionView.style.top=n+"px",this._compositionView.style.height=i+"px",this._compositionView.style.lineHeight=i+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var s=this._compositionView.getBoundingClientRect();this._textarea.style.left=o+"px",this._textarea.style.top=n+"px",this._textarea.style.width=Math.max(s.width,1)+"px",this._textarea.style.height=Math.max(s.height,1)+"px",this._textarea.style.lineHeight=s.height+"px"}e||setTimeout((function(){return t.updateCompositionElements(!0)}),0)}},i([n(2,s.IBufferService),n(3,s.IOptionsService),n(4,s.ICoreService),n(5,o.IRenderService)],e)}();t.CompositionHelper=a},9806:(e,t)=>{function r(e,t,r){var i=r.getBoundingClientRect(),n=e.getComputedStyle(r),o=parseInt(n.getPropertyValue("padding-left")),s=parseInt(n.getPropertyValue("padding-top"));return[t.clientX-i.left-o,t.clientY-i.top-s]}Object.defineProperty(t,"__esModule",{value:!0}),t.getRawByteCoords=t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=r,t.getCoords=function(e,t,i,n,o,s,a,c,l){if(s){var h=r(e,t,i);if(h)return h[0]=Math.ceil((h[0]+(l?a/2:0))/a),h[1]=Math.ceil(h[1]/c),h[0]=Math.min(Math.max(h[0],1),n+(l?1:0)),h[1]=Math.min(Math.max(h[1],1),o),h}},t.getRawByteCoords=function(e){if(e)return{x:e[0]+32,y:e[1]+32}}},9504:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;var i=r(2584);function n(e,t,r,i){var n=e-o(r,e),a=t-o(r,t),h=Math.abs(n-a)-function(e,t,r){for(var i=0,n=e-o(r,e),a=t-o(r,t),c=0;c<Math.abs(n-a);c++){var l="A"===s(e,t)?-1:1,h=r.buffer.lines.get(n+l*c);(null==h?void 0:h.isWrapped)&&i++}return i}(e,t,r);return l(h,c(s(e,t),i))}function o(e,t){for(var r=0,i=e.buffer.lines.get(t),n=null==i?void 0:i.isWrapped;n&&t>=0&&t<e.rows;)r++,n=null==(i=e.buffer.lines.get(--t))?void 0:i.isWrapped;return r}function s(e,t){return e>t?"A":"B"}function a(e,t,r,i,n,o){for(var s=e,a=t,c="";s!==r||a!==i;)s+=n?1:-1,n&&s>o.cols-1?(c+=o.buffer.translateBufferLineToString(a,!1,e,s),s=0,e=0,a++):!n&&s<0&&(c+=o.buffer.translateBufferLineToString(a,!1,0,e+1),e=s=o.cols-1,a--);return c+o.buffer.translateBufferLineToString(a,!1,e,s)}function c(e,t){var r=t?"O":"[";return i.C0.ESC+r+e}function l(e,t){e=Math.floor(e);for(var r="",i=0;i<e;i++)r+=t;return r}t.moveToCellSequence=function(e,t,r,i){var s,h=r.buffer.x,u=r.buffer.y;if(!r.buffer.hasScrollback)return function(e,t,r,i,s,h){return 0===n(t,i,s,h).length?"":l(a(e,t,e,t-o(s,t),!1,s).length,c("D",h))}(h,u,0,t,r,i)+n(u,t,r,i)+function(e,t,r,i,s,h){var u;u=n(t,i,s,h).length>0?i-o(s,i):t;var f=i,_=function(e,t,r,i,s,a){var c;return c=n(r,i,s,a).length>0?i-o(s,i):t,e<r&&c<=i||e>=r&&c<i?"C":"D"}(e,t,r,i,s,h);return l(a(e,u,r,f,"C"===_,s).length,c(_,h))}(h,u,e,t,r,i);if(u===t)return s=h>e?"D":"C",l(Math.abs(h-e),c(s,i));s=u>t?"D":"C";var f=Math.abs(u-t);return l(function(e,t){return t.cols-e}(u>t?e:h,r)+(f-1)*r.cols+1+((u>t?h:e)-1),c(s,i))}},4389:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)},n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var o=r(3236),s=r(9042),a=r(7975),c=r(7090),l=r(5741),h=r(8285),u=["cols","rows"],f=function(){function e(e){var t=this;this._core=new o.Terminal(e),this._addonManager=new l.AddonManager,this._publicOptions=i({},this._core.options);var r=function(e){return t._core.options[e]},n=function(e,r){t._checkReadonlyOptions(e),t._core.options[e]=r};for(var s in this._core.options){var a={get:r.bind(this,s),set:n.bind(this,s)};Object.defineProperty(this._publicOptions,s,a)}}return e.prototype._checkReadonlyOptions=function(e){if(u.includes(e))throw new Error('Option "'+e+'" can only be set in the constructor')},e.prototype._checkProposedApi=function(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")},Object.defineProperty(e.prototype,"onBell",{get:function(){return this._core.onBell},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onBinary",{get:function(){return this._core.onBinary},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCursorMove",{get:function(){return this._core.onCursorMove},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onData",{get:function(){return this._core.onData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onKey",{get:function(){return this._core.onKey},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLineFeed",{get:function(){return this._core.onLineFeed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRender",{get:function(){return this._core.onRender},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onResize",{get:function(){return this._core.onResize},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScroll",{get:function(){return this._core.onScroll},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onSelectionChange",{get:function(){return this._core.onSelectionChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTitleChange",{get:function(){return this._core.onTitleChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onWriteParsed",{get:function(){return this._core.onWriteParsed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"element",{get:function(){return this._core.element},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parser",{get:function(){return this._checkProposedApi(),this._parser||(this._parser=new a.ParserApi(this._core)),this._parser},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"unicode",{get:function(){return this._checkProposedApi(),new c.UnicodeApi(this._core)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rows",{get:function(){return this._core.rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cols",{get:function(){return this._core.cols},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._checkProposedApi(),this._buffer||(this._buffer=new h.BufferNamespaceApi(this._core)),this._buffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"markers",{get:function(){return this._checkProposedApi(),this._core.markers},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modes",{get:function(){var e=this._core.coreService.decPrivateModes,t="none";switch(this._core.coreMouseService.activeProtocol){case"X10":t="x10";break;case"VT200":t="vt200";break;case"DRAG":t="drag";break;case"ANY":t="any"}return{applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this._publicOptions},set:function(e){for(var t in e)this._publicOptions[t]=e[t]},enumerable:!1,configurable:!0}),e.prototype.blur=function(){this._core.blur()},e.prototype.focus=function(){this._core.focus()},e.prototype.resize=function(e,t){this._verifyIntegers(e,t),this._core.resize(e,t)},e.prototype.open=function(e){this._core.open(e)},e.prototype.attachCustomKeyEventHandler=function(e){this._core.attachCustomKeyEventHandler(e)},e.prototype.registerLinkMatcher=function(e,t,r){return this._checkProposedApi(),this._core.registerLinkMatcher(e,t,r)},e.prototype.deregisterLinkMatcher=function(e){this._checkProposedApi(),this._core.deregisterLinkMatcher(e)},e.prototype.registerLinkProvider=function(e){return this._checkProposedApi(),this._core.registerLinkProvider(e)},e.prototype.registerCharacterJoiner=function(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)},e.prototype.deregisterCharacterJoiner=function(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e)},e.prototype.registerMarker=function(e){return void 0===e&&(e=0),this._checkProposedApi(),this._verifyIntegers(e),this._core.addMarker(e)},e.prototype.registerDecoration=function(e){var t,r,i;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(r=e.width)&&void 0!==r?r:0,null!==(i=e.height)&&void 0!==i?i:0),this._core.registerDecoration(e)},e.prototype.addMarker=function(e){return this.registerMarker(e)},e.prototype.hasSelection=function(){return this._core.hasSelection()},e.prototype.select=function(e,t,r){this._verifyIntegers(e,t,r),this._core.select(e,t,r)},e.prototype.getSelection=function(){return this._core.getSelection()},e.prototype.getSelectionPosition=function(){return this._core.getSelectionPosition()},e.prototype.clearSelection=function(){this._core.clearSelection()},e.prototype.selectAll=function(){this._core.selectAll()},e.prototype.selectLines=function(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t)},e.prototype.dispose=function(){this._addonManager.dispose(),this._core.dispose()},e.prototype.scrollLines=function(e){this._verifyIntegers(e),this._core.scrollLines(e)},e.prototype.scrollPages=function(e){this._verifyIntegers(e),this._core.scrollPages(e)},e.prototype.scrollToTop=function(){this._core.scrollToTop()},e.prototype.scrollToBottom=function(){this._core.scrollToBottom()},e.prototype.scrollToLine=function(e){this._verifyIntegers(e),this._core.scrollToLine(e)},e.prototype.clear=function(){this._core.clear()},e.prototype.write=function(e,t){this._core.write(e,t)},e.prototype.writeUtf8=function(e,t){this._core.write(e,t)},e.prototype.writeln=function(e,t){this._core.write(e),this._core.write("\r\n",t)},e.prototype.paste=function(e){this._core.paste(e)},e.prototype.getOption=function(e){return this._core.optionsService.getOption(e)},e.prototype.setOption=function(e,t){this._checkReadonlyOptions(e),this._core.optionsService.setOption(e,t)},e.prototype.refresh=function(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t)},e.prototype.reset=function(){this._core.reset()},e.prototype.clearTextureAtlas=function(){this._core.clearTextureAtlas()},e.prototype.loadAddon=function(e){return this._addonManager.loadAddon(this,e)},Object.defineProperty(e,"strings",{get:function(){return s},enumerable:!1,configurable:!0}),e.prototype._verifyIntegers=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var o=n(r),s=o.next();!s.done;s=o.next()){var a=s.value;if(a===1/0||isNaN(a)||a%1!=0)throw new Error("This API only accepts integers")}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}},e.prototype._verifyPositiveIntegers=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var o=n(r),s=o.next();!s.done;s=o.next()){var a=s.value;if(a&&(a===1/0||isNaN(a)||a%1!=0||a<0))throw new Error("This API only accepts positive integers")}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}},e}();t.Terminal=f},1546:function(e,t,r){var i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseRenderLayer=void 0;var n=r(643),o=r(8803),s=r(1420),a=r(3734),c=r(1752),l=r(8055),h=r(9631),u=r(8978),f=function(){function e(e,t,r,i,n,o,s,a,c){this._container=e,this._alpha=i,this._colors=n,this._rendererId=o,this._bufferService=s,this._optionsService=a,this._decorationService=c,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._columnSelectMode=!1,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+t+"-layer"),this._canvas.style.zIndex=r.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return e.prototype.dispose=function(){var e;(0,h.removeElementFromParent)(this._canvas),null===(e=this._charAtlas)||void 0===e||e.dispose()},e.prototype._initCanvas=function(){this._ctx=(0,c.throwIfFalsy)(this._canvas.getContext("2d",{alpha:this._alpha})),this._alpha||this._clearAll()},e.prototype.onOptionsChanged=function(){},e.prototype.onBlur=function(){},e.prototype.onFocus=function(){},e.prototype.onCursorMove=function(){},e.prototype.onGridChanged=function(e,t){},e.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=r},e.prototype.setColors=function(e){this._refreshCharAtlas(e)},e.prototype._setTransparency=function(e){if(e!==this._alpha){var t=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,t),this._refreshCharAtlas(this._colors),this.onGridChanged(0,this._bufferService.rows-1)}},e.prototype._refreshCharAtlas=function(e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=(0,s.acquireCharAtlas)(this._optionsService.rawOptions,this._rendererId,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},e.prototype.resize=function(e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this._clearAll(),this._refreshCharAtlas(this._colors)},e.prototype.clearTextureAtlas=function(){var e;null===(e=this._charAtlas)||void 0===e||e.clear()},e.prototype._fillCells=function(e,t,r,i){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight)},e.prototype._fillMiddleLineAtCells=function(e,t,r){void 0===r&&(r=1);var i=Math.ceil(.5*this._scaledCellHeight);this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-i-window.devicePixelRatio,r*this._scaledCellWidth,window.devicePixelRatio)},e.prototype._fillBottomLineAtCells=function(e,t,r){void 0===r&&(r=1),this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-window.devicePixelRatio-1,r*this._scaledCellWidth,window.devicePixelRatio)},e.prototype._fillLeftLineAtCell=function(e,t,r){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,window.devicePixelRatio*r,this._scaledCellHeight)},e.prototype._strokeRectAtCell=function(e,t,r,i){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(e*this._scaledCellWidth+window.devicePixelRatio/2,t*this._scaledCellHeight+window.devicePixelRatio/2,r*this._scaledCellWidth-window.devicePixelRatio,i*this._scaledCellHeight-window.devicePixelRatio)},e.prototype._clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},e.prototype._clearCells=function(e,t,r,i){this._alpha?this._ctx.clearRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight))},e.prototype._fillCharTrueColor=function(e,t,r){this._ctx.font=this._getFont(!1,!1),this._ctx.textBaseline=o.TEXT_BASELINE,this._clipRow(r);var i=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(i=(0,u.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),i||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight)},e.prototype._drawChars=function(e,t,r){var s,a,c,l=this._getContrastColor(e,t,r);if(l||e.isFgRGB()||e.isBgRGB())this._drawUncachedChars(e,t,r,l);else{var h,u;e.isInverse()?(h=e.isBgDefault()?o.INVERTED_DEFAULT_COLOR:e.getBgColor(),u=e.isFgDefault()?o.INVERTED_DEFAULT_COLOR:e.getFgColor()):(u=e.isBgDefault()?n.DEFAULT_COLOR:e.getBgColor(),h=e.isFgDefault()?n.DEFAULT_COLOR:e.getFgColor()),h+=this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&h<8?8:0,this._currentGlyphIdentifier.chars=e.getChars()||n.WHITESPACE_CELL_CHAR,this._currentGlyphIdentifier.code=e.getCode()||n.WHITESPACE_CELL_CODE,this._currentGlyphIdentifier.bg=u,this._currentGlyphIdentifier.fg=h,this._currentGlyphIdentifier.bold=!!e.isBold(),this._currentGlyphIdentifier.dim=!!e.isDim(),this._currentGlyphIdentifier.italic=!!e.isItalic();var f=!1;try{for(var _=i(this._decorationService.getDecorationsAtCell(t,r)),d=_.next();!d.done;d=_.next()){var p=d.value;if(p.backgroundColorRGB||p.foregroundColorRGB){f=!0;break}}}catch(e){s={error:e}}finally{try{d&&!d.done&&(a=_.return)&&a.call(_)}finally{if(s)throw s.error}}!f&&(null===(c=this._charAtlas)||void 0===c?void 0:c.draw(this._ctx,this._currentGlyphIdentifier,t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop))||this._drawUncachedChars(e,t,r)}},e.prototype._drawUncachedChars=function(e,t,r,i){if(this._ctx.save(),this._ctx.font=this._getFont(!!e.isBold(),!!e.isItalic()),this._ctx.textBaseline=o.TEXT_BASELINE,e.isInverse())if(i)this._ctx.fillStyle=i.css;else if(e.isBgDefault())this._ctx.fillStyle=l.color.opaque(this._colors.background).css;else if(e.isBgRGB())this._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var n=e.getBgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),this._ctx.fillStyle=this._colors.ansi[n].css}else if(i)this._ctx.fillStyle=i.css;else if(e.isFgDefault())this._ctx.fillStyle=this._colors.foreground.css;else if(e.isFgRGB())this._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var s=e.getFgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&s<8&&(s+=8),this._ctx.fillStyle=this._colors.ansi[s].css}this._clipRow(r),e.isDim()&&(this._ctx.globalAlpha=o.DIM_OPACITY);var c=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(c=(0,u.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),c||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight),this._ctx.restore()},e.prototype._clipRow=function(e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,this._bufferService.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},e.prototype._getFont=function(e,t){return(t?"italic":"")+" "+(e?this._optionsService.rawOptions.fontWeightBold:this._optionsService.rawOptions.fontWeight)+" "+this._optionsService.rawOptions.fontSize*window.devicePixelRatio+"px "+this._optionsService.rawOptions.fontFamily},e.prototype._getContrastColor=function(e,t,r){var n,o,s,a,h=!1;try{for(var u=i(this._decorationService.getDecorationsAtCell(t,r)),f=u.next();!f.done;f=u.next()){var _=f.value;"top"!==_.options.layer&&h||(_.backgroundColorRGB&&(s=_.backgroundColorRGB.rgba),_.foregroundColorRGB&&(a=_.foregroundColorRGB.rgba),h="top"===_.options.layer)}}catch(e){n={error:e}}finally{try{f&&!f.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}if(h||this._colors.selectionForeground&&this._isCellInSelection(t,r)&&(a=this._colors.selectionForeground.rgba),s||a||1!==this._optionsService.rawOptions.minimumContrastRatio&&!(0,c.excludeFromContrastRatioDemands)(e.getCode())){if(!s&&!a){var d=this._colors.contrastCache.getColor(e.bg,e.fg);if(void 0!==d)return d||void 0}var p=e.getFgColor(),v=e.getFgColorMode(),y=e.getBgColor(),g=e.getBgColorMode(),m=!!e.isInverse(),b=!!e.isInverse();if(m){var S=p;p=y,y=S;var C=v;v=g,g=C}var w=this._resolveBackgroundRgba(void 0!==s?50331648:g,null!=s?s:y,m),L=this._resolveForegroundRgba(v,p,m,b),E=l.rgba.ensureContrastRatio(null!=s?s:w,null!=a?a:L,this._optionsService.rawOptions.minimumContrastRatio);if(!E){if(!a)return void this._colors.contrastCache.setColor(e.bg,e.fg,null);E=a}var x={css:l.channels.toCss(E>>24&255,E>>16&255,E>>8&255),rgba:E};return s||a||this._colors.contrastCache.setColor(e.bg,e.fg,x),x}},e.prototype._resolveBackgroundRgba=function(e,t,r){switch(e){case 16777216:case 33554432:return this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.foreground.rgba:this._colors.background.rgba}},e.prototype._resolveForegroundRgba=function(e,t,r,i){switch(e){case 16777216:case 33554432:return this._optionsService.rawOptions.drawBoldTextInBrightColors&&i&&t<8&&(t+=8),this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.background.rgba:this._colors.foreground.rgba}},e.prototype._isCellInSelection=function(e,t){var r=this._selectionStart,i=this._selectionEnd;return!(!r||!i)&&(this._columnSelectMode?e>=r[0]&&t>=r[1]&&e<i[0]&&t<i[1]:t>r[1]&&t<i[1]||r[1]===i[1]&&t===r[1]&&e>=r[0]&&e<i[0]||r[1]<i[1]&&t===i[1]&&e<i[0]||r[1]<i[1]&&t===r[1]&&e>=r[0])},e}();t.BaseRenderLayer=f},2512:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CursorRenderLayer=void 0;var a=r(1546),c=r(511),l=r(2585),h=r(4725),u=600,f=function(e){function t(t,r,i,n,o,s,a,l,h,u){var f=e.call(this,t,"cursor",r,!0,i,n,s,a,u)||this;return f._onRequestRedraw=o,f._coreService=l,f._coreBrowserService=h,f._cell=new c.CellData,f._state={x:0,y:0,isFocused:!1,style:"",width:0},f._cursorRenderers={bar:f._renderBarCursor.bind(f),block:f._renderBlockCursor.bind(f),underline:f._renderUnderlineCursor.bind(f)},f}return n(t,e),t.prototype.dispose=function(){this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=void 0),e.prototype.dispose.call(this)},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state={x:0,y:0,isFocused:!1,style:"",width:0}},t.prototype.reset=function(){var e;this._clearCursor(),null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation(),this.onOptionsChanged()},t.prototype.onBlur=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.pause(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onFocus=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.resume(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onOptionsChanged=function(){var e,t=this;this._optionsService.rawOptions.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new _(this._coreBrowserService.isFocused,(function(){t._render(!0)}))):(null===(e=this._cursorBlinkStateManager)||void 0===e||e.dispose(),this._cursorBlinkStateManager=void 0),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onCursorMove=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation()},t.prototype.onGridChanged=function(e,t){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(!1):this._cursorBlinkStateManager.restartBlinkAnimation()},t.prototype._render=function(e){if(this._coreService.isCursorInitialized&&!this._coreService.isCursorHidden){var t=this._bufferService.buffer.ybase+this._bufferService.buffer.y,r=t-this._bufferService.buffer.ydisp;if(r<0||r>=this._bufferService.rows)this._clearCursor();else{var i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1);if(this._bufferService.buffer.lines.get(t).loadCell(i,this._cell),void 0!==this._cell.content){if(!this._coreBrowserService.isFocused){this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css;var n=this._optionsService.rawOptions.cursorStyle;return n&&"block"!==n?this._cursorRenderers[n](i,r,this._cell):this._renderBlurCursor(i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=n,void(this._state.width=this._cell.getWidth())}if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===i&&this._state.y===r&&this._state.isFocused===this._coreBrowserService.isFocused&&this._state.style===this._optionsService.rawOptions.cursorStyle&&this._state.width===this._cell.getWidth())return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[this._optionsService.rawOptions.cursorStyle||"block"](i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=this._optionsService.rawOptions.cursorStyle,this._state.width=this._cell.getWidth()}else this._clearCursor()}}}else this._clearCursor()},t.prototype._clearCursor=function(){this._state&&(window.devicePixelRatio<1?this._clearAll():this._clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:0,y:0,isFocused:!1,style:"",width:0})},t.prototype._renderBarCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillLeftLineAtCell(e,t,this._optionsService.rawOptions.cursorWidth),this._ctx.restore()},t.prototype._renderBlockCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillCells(e,t,r.getWidth(),1),this._ctx.fillStyle=this._colors.cursorAccent.css,this._fillCharTrueColor(r,e,t),this._ctx.restore()},t.prototype._renderUnderlineCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillBottomLineAtCells(e,t),this._ctx.restore()},t.prototype._renderBlurCursor=function(e,t,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this._strokeRectAtCell(e,t,r.getWidth(),1),this._ctx.restore()},o([s(5,l.IBufferService),s(6,l.IOptionsService),s(7,l.ICoreService),s(8,h.ICoreBrowserService),s(9,l.IDecorationService)],t)}(a.BaseRenderLayer);t.CursorRenderLayer=f;var _=function(){function e(e,t){this._renderCallback=t,this.isCursorVisible=!0,e&&this._restartInterval()}return Object.defineProperty(e.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.restartBlinkAnimation=function(){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){e._renderCallback(),e._animationFrame=void 0}))))},e.prototype._restartInterval=function(e){var t=this;void 0===e&&(e=u),this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout=window.setTimeout((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);if(t._animationTimeRestarted=void 0,e>0)return void t._restartInterval(e)}t.isCursorVisible=!1,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0})),t._blinkInterval=window.setInterval((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);return t._animationTimeRestarted=void 0,void t._restartInterval(e)}t.isCursorVisible=!t.isCursorVisible,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0}))}),u)}),e)},e.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.resume=function(){this.pause(),this._animationTimeRestarted=void 0,this._restartInterval(),this.restartBlinkAnimation()},e}()},8978:function(e,t,r){var i,n,o,s,a,c,l,h,u,f,_,d,p,v,y,g,m,b,S,C,w,L,E,x,R,k,M,A,O,D,T,B,P,I,H,j,F,W,U,q,N,z,K,G,V,X,Z,Y,J,$,Q,ee,te,re,ie,ne,oe,se,ae,ce,le,he,ue,fe,_e,de,pe,ve,ye,ge,me,be,Se,Ce,we,Le,Ee,xe,Re,ke,Me,Ae,Oe,De,Te,Be,Pe,Ie,He,je,Fe,We,Ue,qe,Ne,ze,Ke,Ge,Ve,Xe,Ze,Ye,Je,$e,Qe,et,tt,rt,it,nt,ot,st,at,ct,lt,ht,ut,ft,_t,dt,pt,vt,yt,gt,mt,bt,St,Ct,wt=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},Lt=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.tryDrawCustomChar=t.powerlineDefinitions=t.boxDrawingDefinitions=t.blockElementDefinitions=void 0;var Et=r(1752);t.blockElementDefinitions={"▀":[{x:0,y:0,w:8,h:4}],"▁":[{x:0,y:7,w:8,h:1}],"▂":[{x:0,y:6,w:8,h:2}],"▃":[{x:0,y:5,w:8,h:3}],"▄":[{x:0,y:4,w:8,h:4}],"▅":[{x:0,y:3,w:8,h:5}],"▆":[{x:0,y:2,w:8,h:6}],"▇":[{x:0,y:1,w:8,h:7}],"█":[{x:0,y:0,w:8,h:8}],"▉":[{x:0,y:0,w:7,h:8}],"▊":[{x:0,y:0,w:6,h:8}],"▋":[{x:0,y:0,w:5,h:8}],"▌":[{x:0,y:0,w:4,h:8}],"▍":[{x:0,y:0,w:3,h:8}],"▎":[{x:0,y:0,w:2,h:8}],"▏":[{x:0,y:0,w:1,h:8}],"▐":[{x:4,y:0,w:4,h:8}],"▔":[{x:0,y:0,w:9,h:1}],"▕":[{x:7,y:0,w:1,h:8}],"▖":[{x:0,y:4,w:4,h:4}],"▗":[{x:4,y:4,w:4,h:4}],"▘":[{x:0,y:0,w:4,h:4}],"▙":[{x:0,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"▚":[{x:0,y:0,w:4,h:4},{x:4,y:4,w:4,h:4}],"▛":[{x:0,y:0,w:4,h:8},{x:0,y:0,w:4,h:8}],"▜":[{x:0,y:0,w:8,h:4},{x:4,y:0,w:4,h:8}],"▝":[{x:4,y:0,w:4,h:4}],"▞":[{x:4,y:0,w:4,h:4},{x:0,y:4,w:4,h:4}],"▟":[{x:4,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"🭰":[{x:1,y:0,w:1,h:8}],"🭱":[{x:2,y:0,w:1,h:8}],"🭲":[{x:3,y:0,w:1,h:8}],"🭳":[{x:4,y:0,w:1,h:8}],"🭴":[{x:5,y:0,w:1,h:8}],"🭵":[{x:6,y:0,w:1,h:8}],"🭶":[{x:0,y:1,w:8,h:1}],"🭷":[{x:0,y:2,w:8,h:1}],"🭸":[{x:0,y:3,w:8,h:1}],"🭹":[{x:0,y:4,w:8,h:1}],"🭺":[{x:0,y:5,w:8,h:1}],"🭻":[{x:0,y:6,w:8,h:1}],"🭼":[{x:0,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"🭽":[{x:0,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"🭾":[{x:7,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"🭿":[{x:7,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"🮀":[{x:0,y:0,w:8,h:1},{x:0,y:7,w:8,h:1}],"🮁":[{x:0,y:0,w:8,h:1},{x:0,y:2,w:8,h:1},{x:0,y:4,w:8,h:1},{x:0,y:7,w:8,h:1}],"🮂":[{x:0,y:0,w:8,h:2}],"🮃":[{x:0,y:0,w:8,h:3}],"🮄":[{x:0,y:0,w:8,h:5}],"🮅":[{x:0,y:0,w:8,h:6}],"🮆":[{x:0,y:0,w:8,h:7}],"🮇":[{x:6,y:0,w:2,h:8}],"🮈":[{x:5,y:0,w:3,h:8}],"🮉":[{x:3,y:0,w:5,h:8}],"🮊":[{x:2,y:0,w:6,h:8}],"🮋":[{x:1,y:0,w:7,h:8}],"🮕":[{x:0,y:0,w:2,h:2},{x:4,y:0,w:2,h:2},{x:2,y:2,w:2,h:2},{x:6,y:2,w:2,h:2},{x:0,y:4,w:2,h:2},{x:4,y:4,w:2,h:2},{x:2,y:6,w:2,h:2},{x:6,y:6,w:2,h:2}],"🮖":[{x:2,y:0,w:2,h:2},{x:6,y:0,w:2,h:2},{x:0,y:2,w:2,h:2},{x:4,y:2,w:2,h:2},{x:2,y:4,w:2,h:2},{x:6,y:4,w:2,h:2},{x:0,y:6,w:2,h:2},{x:4,y:6,w:2,h:2}],"🮗":[{x:0,y:2,w:8,h:2},{x:0,y:6,w:8,h:2}]};var xt={"░":[[1,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],"▒":[[1,0],[0,0],[0,1],[0,0]],"▓":[[0,1],[1,1],[1,0],[1,1]]};t.boxDrawingDefinitions={"─":(i={},i[1]="M0,.5 L1,.5",i),"━":(n={},n[3]="M0,.5 L1,.5",n),"│":(o={},o[1]="M.5,0 L.5,1",o),"┃":(s={},s[3]="M.5,0 L.5,1",s),"┌":(a={},a[1]="M0.5,1 L.5,.5 L1,.5",a),"┏":(c={},c[3]="M0.5,1 L.5,.5 L1,.5",c),"┐":(l={},l[1]="M0,.5 L.5,.5 L.5,1",l),"┓":(h={},h[3]="M0,.5 L.5,.5 L.5,1",h),"└":(u={},u[1]="M.5,0 L.5,.5 L1,.5",u),"┗":(f={},f[3]="M.5,0 L.5,.5 L1,.5",f),"┘":(_={},_[1]="M.5,0 L.5,.5 L0,.5",_),"┛":(d={},d[3]="M.5,0 L.5,.5 L0,.5",d),"├":(p={},p[1]="M.5,0 L.5,1 M.5,.5 L1,.5",p),"┣":(v={},v[3]="M.5,0 L.5,1 M.5,.5 L1,.5",v),"┤":(y={},y[1]="M.5,0 L.5,1 M.5,.5 L0,.5",y),"┫":(g={},g[3]="M.5,0 L.5,1 M.5,.5 L0,.5",g),"┬":(m={},m[1]="M0,.5 L1,.5 M.5,.5 L.5,1",m),"┳":(b={},b[3]="M0,.5 L1,.5 M.5,.5 L.5,1",b),"┴":(S={},S[1]="M0,.5 L1,.5 M.5,.5 L.5,0",S),"┻":(C={},C[3]="M0,.5 L1,.5 M.5,.5 L.5,0",C),"┼":(w={},w[1]="M0,.5 L1,.5 M.5,0 L.5,1",w),"╋":(L={},L[3]="M0,.5 L1,.5 M.5,0 L.5,1",L),"╴":(E={},E[1]="M.5,.5 L0,.5",E),"╸":(x={},x[3]="M.5,.5 L0,.5",x),"╵":(R={},R[1]="M.5,.5 L.5,0",R),"╹":(k={},k[3]="M.5,.5 L.5,0",k),"╶":(M={},M[1]="M.5,.5 L1,.5",M),"╺":(A={},A[3]="M.5,.5 L1,.5",A),"╷":(O={},O[1]="M.5,.5 L.5,1",O),"╻":(D={},D[3]="M.5,.5 L.5,1",D),"═":(T={},T[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},T),"║":(B={},B[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},B),"╒":(P={},P[1]=function(e,t){return"M.5,1 L.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},P),"╓":(I={},I[1]=function(e,t){return"M"+(.5-e)+",1 L"+(.5-e)+",.5 L1,.5 M"+(.5+e)+",.5 L"+(.5+e)+",1"},I),"╔":(H={},H[1]=function(e,t){return"M1,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},H),"╕":(j={},j[1]=function(e,t){return"M0,"+(.5-t)+" L.5,"+(.5-t)+" L.5,1 M0,"+(.5+t)+" L.5,"+(.5+t)},j),"╖":(F={},F[1]=function(e,t){return"M"+(.5+e)+",1 L"+(.5+e)+",.5 L0,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1"},F),"╗":(W={},W[1]=function(e,t){return"M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",1"},W),"╘":(U={},U[1]=function(e,t){return"M.5,0 L.5,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5-t)+" L1,"+(.5-t)},U),"╙":(q={},q[1]=function(e,t){return"M1,.5 L"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},q),"╚":(N={},N[1]=function(e,t){return"M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0 M1,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",0"},N),"╛":(z={},z[1]=function(e,t){return"M0,"+(.5+t)+" L.5,"+(.5+t)+" L.5,0 M0,"+(.5-t)+" L.5,"+(.5-t)},z),"╜":(K={},K[1]=function(e,t){return"M0,.5 L"+(.5+e)+",.5 L"+(.5+e)+",0 M"+(.5-e)+",.5 L"+(.5-e)+",0"},K),"╝":(G={},G[1]=function(e,t){return"M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M0,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",0"},G),"╞":(V={},V[1]=function(e,t){return"M.5,0 L.5,1 M.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},V),"╟":(X={},X[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1 M"+(.5+e)+",.5 L1,.5"},X),"╠":(Z={},Z[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},Z),"╡":(Y={},Y[1]=function(e,t){return"M.5,0 L.5,1 M0,"+(.5-t)+" L.5,"+(.5-t)+" M0,"+(.5+t)+" L.5,"+(.5+t)},Y),"╢":(J={},J[1]=function(e,t){return"M0,.5 L"+(.5-e)+",.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},J),"╣":($={},$[1]=function(e,t){return"M"+(.5+e)+",0 L"+(.5+e)+",1 M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0"},$),"╤":(Q={},Q[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5+t)+" L.5,1"},Q),"╥":(ee={},ee[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1 M"+(.5+e)+",.5 L"+(.5+e)+",1"},ee),"╦":(te={},te[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},te),"╧":(re={},re[1]=function(e,t){return"M.5,0 L.5,"+(.5-t)+" M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},re),"╨":(ie={},ie[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},ie),"╩":(ne={},ne[1]=function(e,t){return"M0,"+(.5+t)+" L1,"+(.5+t)+" M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ne),"╪":(oe={},oe[1]=function(e,t){return"M.5,0 L.5,1 M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},oe),"╫":(se={},se[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},se),"╬":(ae={},ae[1]=function(e,t){return"M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ae),"╱":(ce={},ce[1]="M1,0 L0,1",ce),"╲":(le={},le[1]="M0,0 L1,1",le),"╳":(he={},he[1]="M1,0 L0,1 M0,0 L1,1",he),"╼":(ue={},ue[1]="M.5,.5 L0,.5",ue[3]="M.5,.5 L1,.5",ue),"╽":(fe={},fe[1]="M.5,.5 L.5,0",fe[3]="M.5,.5 L.5,1",fe),"╾":(_e={},_e[1]="M.5,.5 L1,.5",_e[3]="M.5,.5 L0,.5",_e),"╿":(de={},de[1]="M.5,.5 L.5,1",de[3]="M.5,.5 L.5,0",de),"┍":(pe={},pe[1]="M.5,.5 L.5,1",pe[3]="M.5,.5 L1,.5",pe),"┎":(ve={},ve[1]="M.5,.5 L1,.5",ve[3]="M.5,.5 L.5,1",ve),"┑":(ye={},ye[1]="M.5,.5 L.5,1",ye[3]="M.5,.5 L0,.5",ye),"┒":(ge={},ge[1]="M.5,.5 L0,.5",ge[3]="M.5,.5 L.5,1",ge),"┕":(me={},me[1]="M.5,.5 L.5,0",me[3]="M.5,.5 L1,.5",me),"┖":(be={},be[1]="M.5,.5 L1,.5",be[3]="M.5,.5 L.5,0",be),"┙":(Se={},Se[1]="M.5,.5 L.5,0",Se[3]="M.5,.5 L0,.5",Se),"┚":(Ce={},Ce[1]="M.5,.5 L0,.5",Ce[3]="M.5,.5 L.5,0",Ce),"┝":(we={},we[1]="M.5,0 L.5,1",we[3]="M.5,.5 L1,.5",we),"┞":(Le={},Le[1]="M0.5,1 L.5,.5 L1,.5",Le[3]="M.5,.5 L.5,0",Le),"┟":(Ee={},Ee[1]="M.5,0 L.5,.5 L1,.5",Ee[3]="M.5,.5 L.5,1",Ee),"┠":(xe={},xe[1]="M.5,.5 L1,.5",xe[3]="M.5,0 L.5,1",xe),"┡":(Re={},Re[1]="M.5,.5 L.5,1",Re[3]="M.5,0 L.5,.5 L1,.5",Re),"┢":(ke={},ke[1]="M.5,.5 L.5,0",ke[3]="M0.5,1 L.5,.5 L1,.5",ke),"┥":(Me={},Me[1]="M.5,0 L.5,1",Me[3]="M.5,.5 L0,.5",Me),"┦":(Ae={},Ae[1]="M0,.5 L.5,.5 L.5,1",Ae[3]="M.5,.5 L.5,0",Ae),"┧":(Oe={},Oe[1]="M.5,0 L.5,.5 L0,.5",Oe[3]="M.5,.5 L.5,1",Oe),"┨":(De={},De[1]="M.5,.5 L0,.5",De[3]="M.5,0 L.5,1",De),"┩":(Te={},Te[1]="M.5,.5 L.5,1",Te[3]="M.5,0 L.5,.5 L0,.5",Te),"┪":(Be={},Be[1]="M.5,.5 L.5,0",Be[3]="M0,.5 L.5,.5 L.5,1",Be),"┭":(Pe={},Pe[1]="M0.5,1 L.5,.5 L1,.5",Pe[3]="M.5,.5 L0,.5",Pe),"┮":(Ie={},Ie[1]="M0,.5 L.5,.5 L.5,1",Ie[3]="M.5,.5 L1,.5",Ie),"┯":(He={},He[1]="M.5,.5 L.5,1",He[3]="M0,.5 L1,.5",He),"┰":(je={},je[1]="M0,.5 L1,.5",je[3]="M.5,.5 L.5,1",je),"┱":(Fe={},Fe[1]="M.5,.5 L1,.5",Fe[3]="M0,.5 L.5,.5 L.5,1",Fe),"┲":(We={},We[1]="M.5,.5 L0,.5",We[3]="M0.5,1 L.5,.5 L1,.5",We),"┵":(Ue={},Ue[1]="M.5,0 L.5,.5 L1,.5",Ue[3]="M.5,.5 L0,.5",Ue),"┶":(qe={},qe[1]="M.5,0 L.5,.5 L0,.5",qe[3]="M.5,.5 L1,.5",qe),"┷":(Ne={},Ne[1]="M.5,.5 L.5,0",Ne[3]="M0,.5 L1,.5",Ne),"┸":(ze={},ze[1]="M0,.5 L1,.5",ze[3]="M.5,.5 L.5,0",ze),"┹":(Ke={},Ke[1]="M.5,.5 L1,.5",Ke[3]="M.5,0 L.5,.5 L0,.5",Ke),"┺":(Ge={},Ge[1]="M.5,.5 L0,.5",Ge[3]="M.5,0 L.5,.5 L1,.5",Ge),"┽":(Ve={},Ve[1]="M.5,0 L.5,1 M.5,.5 L1,.5",Ve[3]="M.5,.5 L0,.5",Ve),"┾":(Xe={},Xe[1]="M.5,0 L.5,1 M.5,.5 L0,.5",Xe[3]="M.5,.5 L1,.5",Xe),"┿":(Ze={},Ze[1]="M.5,0 L.5,1",Ze[3]="M0,.5 L1,.5",Ze),"╀":(Ye={},Ye[1]="M0,.5 L1,.5 M.5,.5 L.5,1",Ye[3]="M.5,.5 L.5,0",Ye),"╁":(Je={},Je[1]="M.5,.5 L.5,0 M0,.5 L1,.5",Je[3]="M.5,.5 L.5,1",Je),"╂":($e={},$e[1]="M0,.5 L1,.5",$e[3]="M.5,0 L.5,1",$e),"╃":(Qe={},Qe[1]="M0.5,1 L.5,.5 L1,.5",Qe[3]="M.5,0 L.5,.5 L0,.5",Qe),"╄":(et={},et[1]="M0,.5 L.5,.5 L.5,1",et[3]="M.5,0 L.5,.5 L1,.5",et),"╅":(tt={},tt[1]="M.5,0 L.5,.5 L1,.5",tt[3]="M0,.5 L.5,.5 L.5,1",tt),"╆":(rt={},rt[1]="M.5,0 L.5,.5 L0,.5",rt[3]="M0.5,1 L.5,.5 L1,.5",rt),"╇":(it={},it[1]="M.5,.5 L.5,1",it[3]="M.5,.5 L.5,0 M0,.5 L1,.5",it),"╈":(nt={},nt[1]="M.5,.5 L.5,0",nt[3]="M0,.5 L1,.5 M.5,.5 L.5,1",nt),"╉":(ot={},ot[1]="M.5,.5 L1,.5",ot[3]="M.5,0 L.5,1 M.5,.5 L0,.5",ot),"╊":(st={},st[1]="M.5,.5 L0,.5",st[3]="M.5,0 L.5,1 M.5,.5 L1,.5",st),"╌":(at={},at[1]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",at),"╍":(ct={},ct[3]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",ct),"┄":(lt={},lt[1]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",lt),"┅":(ht={},ht[3]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",ht),"┈":(ut={},ut[1]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ut),"┉":(ft={},ft[3]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ft),"╎":(_t={},_t[1]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",_t),"╏":(dt={},dt[3]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",dt),"┆":(pt={},pt[1]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",pt),"┇":(vt={},vt[3]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",vt),"┊":(yt={},yt[1]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",yt),"┋":(gt={},gt[3]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",gt),"╭":(mt={},mt[1]="C.5,1,.5,.5,1,.5",mt),"╮":(bt={},bt[1]="C.5,1,.5,.5,0,.5",bt),"╯":(St={},St[1]="C.5,0,.5,.5,0,.5",St),"╰":(Ct={},Ct[1]="C.5,0,.5,.5,1,.5",Ct)},t.powerlineDefinitions={"":{d:"M0,0 L1,.5 L0,1",type:0},"":{d:"M0,0 L1,.5 L0,1",type:1,horizontalPadding:.5},"":{d:"M1,0 L0,.5 L1,1",type:0},"":{d:"M1,0 L0,.5 L1,1",type:1,horizontalPadding:.5}},t.tryDrawCustomChar=function(e,r,i,n,o,s){var a=t.blockElementDefinitions[r];if(a)return function(e,t,r,i,n,o){for(var s=0;s<t.length;s++){var a=t[s],c=n/8,l=o/8;e.fillRect(r+a.x*c,i+a.y*l,a.w*c,a.h*l)}}(e,a,i,n,o,s),!0;var c=xt[r];if(c)return function(e,t,r,i,n,o){var s,a=Rt.get(t);a||(a=new Map,Rt.set(t,a));var c=e.fillStyle;if("string"!=typeof c)throw new Error('Unexpected fillStyle type "'+c+'"');var l=a.get(c);if(!l){var h=t[0].length,u=t.length,f=document.createElement("canvas");f.width=h,f.height=u;var _=(0,Et.throwIfFalsy)(f.getContext("2d")),d=new ImageData(h,u),p=void 0,v=void 0,y=void 0,g=void 0;if(c.startsWith("#"))p=parseInt(c.slice(1,3),16),v=parseInt(c.slice(3,5),16),y=parseInt(c.slice(5,7),16),g=c.length>7&&parseInt(c.slice(7,9),16)||1;else{if(!c.startsWith("rgba"))throw new Error('Unexpected fillStyle color format "'+c+'" when drawing pattern glyph');p=(s=wt(c.substring(5,c.length-1).split(",").map((function(e){return parseFloat(e)})),4))[0],v=s[1],y=s[2],g=s[3]}for(var m=0;m<u;m++)for(var b=0;b<h;b++)d.data[4*(m*h+b)]=p,d.data[4*(m*h+b)+1]=v,d.data[4*(m*h+b)+2]=y,d.data[4*(m*h+b)+3]=t[m][b]*(255*g);_.putImageData(d,0,0),l=(0,Et.throwIfFalsy)(e.createPattern(f,null)),a.set(c,l)}e.fillStyle=l,e.fillRect(r,i,n,o)}(e,c,i,n,o,s),!0;var l=t.boxDrawingDefinitions[r];if(l)return function(e,t,r,i,n,o){var s,a,c,l;e.strokeStyle=e.fillStyle;try{for(var h=Lt(Object.entries(t)),u=h.next();!u.done;u=h.next()){var f=wt(u.value,2),_=f[0],d=f[1];e.beginPath(),e.lineWidth=window.devicePixelRatio*Number.parseInt(_);var p=void 0;p="function"==typeof d?d(.15,.15/o*n):d;try{for(var v=(c=void 0,Lt(p.split(" "))),y=v.next();!y.done;y=v.next()){var g=y.value,m=g[0],b=Mt[m];if(b){var S=g.substring(1).split(",");S[0]&&S[1]&&b(e,At(S,n,o,r,i))}else console.error('Could not find drawing instructions for "'+m+'"')}}catch(e){c={error:e}}finally{try{y&&!y.done&&(l=v.return)&&l.call(v)}finally{if(c)throw c.error}}e.stroke(),e.closePath()}}catch(e){s={error:e}}finally{try{u&&!u.done&&(a=h.return)&&a.call(h)}finally{if(s)throw s.error}}}(e,l,i,n,o,s),!0;var h=t.powerlineDefinitions[r];return!!h&&(function(e,t,r,i,n,o){var s,a;e.beginPath(),e.lineWidth=window.devicePixelRatio;try{for(var c=Lt(t.d.split(" ")),l=c.next();!l.done;l=c.next()){var h=l.value,u=h[0],f=Mt[u];if(f){var _=h.substring(1).split(",");_[0]&&_[1]&&f(e,At(_,n,o,r,i,t.horizontalPadding))}else console.error('Could not find drawing instructions for "'+u+'"')}}catch(e){s={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(s)throw s.error}}1===t.type?(e.strokeStyle=e.fillStyle,e.stroke()):e.fill(),e.closePath()}(e,h,i,n,o,s),!0)};var Rt=new Map;function kt(e,t,r){return void 0===r&&(r=0),Math.max(Math.min(e,t),r)}var Mt={C:function(e,t){return e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},L:function(e,t){return e.lineTo(t[0],t[1])},M:function(e,t){return e.moveTo(t[0],t[1])}};function At(e,t,r,i,n,o){void 0===o&&(o=0);var s=e.map((function(e){return parseFloat(e)||parseInt(e)}));if(s.length<2)throw new Error("Too few arguments for instruction");for(var a=0;a<s.length;a+=2)s[a]*=t-2*o*window.devicePixelRatio,0!==s[a]&&(s[a]=kt(Math.round(s[a]+.5)-.5,t,0)),s[a]+=i+o*window.devicePixelRatio;for(var c=1;c<s.length;c+=2)s[c]*=r,0!==s[c]&&(s[c]=kt(Math.round(s[c]+.5)-.5,r,0)),s[c]+=n;return s}},3700:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GridCache=void 0;var r=function(){function e(){this.cache=[]}return e.prototype.resize=function(e,t){for(var r=0;r<e;r++){this.cache.length<=r&&this.cache.push([]);for(var i=this.cache[r].length;i<t;i++)this.cache[r].push(void 0);this.cache[r].length=t}this.cache.length=e},e.prototype.clear=function(){for(var e=0;e<this.cache.length;e++)for(var t=0;t<this.cache[e].length;t++)this.cache[e][t]=void 0},e}();t.GridCache=r},5098:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkRenderLayer=void 0;var a=r(1546),c=r(8803),l=r(2040),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,c,l){var h=e.call(this,t,"link",r,!0,i,n,a,c,l)||this;return o.onShowLinkUnderline((function(e){return h._onShowLinkUnderline(e)})),o.onHideLinkUnderline((function(e){return h._onHideLinkUnderline(e)})),s.onShowLinkUnderline((function(e){return h._onShowLinkUnderline(e)})),s.onHideLinkUnderline((function(e){return h._onHideLinkUnderline(e)})),h}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state=void 0},t.prototype.reset=function(){this._clearCurrentLink()},t.prototype._clearCurrentLink=function(){if(this._state){this._clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var e=this._state.y2-this._state.y1-1;e>0&&this._clearCells(0,this._state.y1+1,this._state.cols,e),this._clearCells(0,this._state.y2,this._state.x2,1),this._state=void 0}},t.prototype._onShowLinkUnderline=function(e){if(e.fg===c.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:e.fg&&(0,l.is256Color)(e.fg)?this._ctx.fillStyle=this._colors.ansi[e.fg].css:this._ctx.fillStyle=this._colors.foreground.css,e.y1===e.y2)this._fillBottomLineAtCells(e.x1,e.y1,e.x2-e.x1);else{this._fillBottomLineAtCells(e.x1,e.y1,e.cols-e.x1);for(var t=e.y1+1;t<e.y2;t++)this._fillBottomLineAtCells(0,t,e.cols);this._fillBottomLineAtCells(0,e.y2,e.x2)}this._state=e},t.prototype._onHideLinkUnderline=function(e){this._clearCurrentLink()},o([s(6,h.IBufferService),s(7,h.IOptionsService),s(8,h.IDecorationService)],t)}(a.BaseRenderLayer);t.LinkRenderLayer=u},3525:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;var c=r(9596),l=r(4149),h=r(2512),u=r(5098),f=r(844),_=r(4725),d=r(2585),p=r(1420),v=r(8460),y=1,g=function(e){function t(t,r,i,n,o,s,a,f){var _=e.call(this)||this;_._colors=t,_._screenElement=r,_._bufferService=s,_._charSizeService=a,_._optionsService=f,_._id=y++,_._onRequestRedraw=new v.EventEmitter;var d=_._optionsService.rawOptions.allowTransparency;return _._renderLayers=[o.createInstance(c.TextRenderLayer,_._screenElement,0,_._colors,d,_._id),o.createInstance(l.SelectionRenderLayer,_._screenElement,1,_._colors,_._id),o.createInstance(u.LinkRenderLayer,_._screenElement,2,_._colors,_._id,i,n),o.createInstance(h.CursorRenderLayer,_._screenElement,3,_._colors,_._id,_._onRequestRedraw)],_.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},_._devicePixelRatio=window.devicePixelRatio,_._updateDimensions(),_.onOptionsChanged(),_}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRequestRedraw.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t,r;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next())n.value.dispose()}catch(e){t={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}e.prototype.dispose.call(this),(0,p.removeTerminalFromCache)(this._id)},t.prototype.onDevicePixelRatioChange=function(){this._devicePixelRatio!==window.devicePixelRatio&&(this._devicePixelRatio=window.devicePixelRatio,this.onResize(this._bufferService.cols,this._bufferService.rows))},t.prototype.setColors=function(e){var t,r;this._colors=e;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next()){var o=n.value;o.setColors(this._colors),o.reset()}}catch(e){t={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}},t.prototype.onResize=function(e,t){var r,i;this._updateDimensions();try{for(var n=a(this._renderLayers),o=n.next();!o.done;o=n.next())o.value.resize(this.dimensions)}catch(e){r={error:e}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.onCharSizeChanged=function(){this.onResize(this._bufferService.cols,this._bufferService.rows)},t.prototype.onBlur=function(){this._runOperation((function(e){return e.onBlur()}))},t.prototype.onFocus=function(){this._runOperation((function(e){return e.onFocus()}))},t.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._runOperation((function(i){return i.onSelectionChanged(e,t,r)})),this._colors.selectionForeground&&this._onRequestRedraw.fire({start:0,end:this._bufferService.rows-1})},t.prototype.onCursorMove=function(){this._runOperation((function(e){return e.onCursorMove()}))},t.prototype.onOptionsChanged=function(){this._runOperation((function(e){return e.onOptionsChanged()}))},t.prototype.clear=function(){this._runOperation((function(e){return e.reset()}))},t.prototype._runOperation=function(e){var t,r;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next())e(n.value)}catch(e){t={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}},t.prototype.renderRows=function(e,t){var r,i;try{for(var n=a(this._renderLayers),o=n.next();!o.done;o=n.next())o.value.onGridChanged(e,t)}catch(e){r={error:e}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}},t.prototype.clearTextureAtlas=function(){var e,t;try{for(var r=a(this._renderLayers),i=r.next();!i.done;i=r.next())i.value.clearTextureAtlas()}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}},t.prototype._updateDimensions=function(){this._charSizeService.hasValidSize&&(this.dimensions.scaledCharWidth=Math.floor(this._charSizeService.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharTop=1===this._optionsService.rawOptions.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._optionsService.rawOptions.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._bufferService.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._bufferService.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols)},o([s(4,d.IInstantiationService),s(5,d.IBufferService),s(6,_.ICharSizeService),s(7,d.IOptionsService)],t)}(f.Disposable);t.Renderer=g},1752:(e,t)=>{function r(e){return 57508<=e&&e<=57558}Object.defineProperty(t,"__esModule",{value:!0}),t.excludeFromContrastRatioDemands=t.isPowerlineGlyph=t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e},t.isPowerlineGlyph=r,t.excludeFromContrastRatioDemands=function(e){return r(e)||function(e){return 9472<=e&&e<=9631}(e)}},4149:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionRenderLayer=void 0;var a=r(1546),c=r(2585),l=function(e){function t(t,r,i,n,o,s,a){var c=e.call(this,t,"selection",r,!0,i,n,o,s,a)||this;return c._clearState(),c}return n(t,e),t.prototype._clearState=function(){this._state={start:void 0,end:void 0,columnSelectMode:void 0,ydisp:void 0}},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._clearState()},t.prototype.reset=function(){this._state.start&&this._state.end&&(this._clearState(),this._clearAll())},t.prototype.onSelectionChanged=function(t,r,i){if(e.prototype.onSelectionChanged.call(this,t,r,i),this._didStateChange(t,r,i,this._bufferService.buffer.ydisp))if(this._clearAll(),t&&r){var n=t[1]-this._bufferService.buffer.ydisp,o=r[1]-this._bufferService.buffer.ydisp,s=Math.max(n,0),a=Math.min(o,this._bufferService.rows-1);if(s>=this._bufferService.rows||a<0)this._state.ydisp=this._bufferService.buffer.ydisp;else{if(this._ctx.fillStyle=this._colors.selectionTransparent.css,i){var c=t[0],l=r[0]-c,h=a-s+1;this._fillCells(c,s,l,h)}else{c=n===s?t[0]:0;var u=s===o?r[0]:this._bufferService.cols;this._fillCells(c,s,u-c,1);var f=Math.max(a-s-1,0);if(this._fillCells(0,s+1,this._bufferService.cols,f),s!==a){var _=o===a?r[0]:this._bufferService.cols;this._fillCells(0,a,_,1)}}this._state.start=[t[0],t[1]],this._state.end=[r[0],r[1]],this._state.columnSelectMode=i,this._state.ydisp=this._bufferService.buffer.ydisp}}else this._clearState()},t.prototype._didStateChange=function(e,t,r,i){return!this._areCoordinatesEqual(e,this._state.start)||!this._areCoordinatesEqual(t,this._state.end)||r!==this._state.columnSelectMode||i!==this._state.ydisp},t.prototype._areCoordinatesEqual=function(e,t){return!(!e||!t)&&e[0]===t[0]&&e[1]===t[1]},o([s(4,c.IBufferService),s(5,c.IOptionsService),s(6,c.IDecorationService)],t)}(a.BaseRenderLayer);t.SelectionRenderLayer=l},9596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.TextRenderLayer=void 0;var c=r(3700),l=r(1546),h=r(3734),u=r(643),f=r(511),_=r(2585),d=r(4725),p=r(4269),v=function(e){function t(t,r,i,n,o,s,a,l,h){var u=e.call(this,t,"text",r,n,i,o,s,a,h)||this;return u._characterJoinerService=l,u._characterWidth=0,u._characterFont="",u._characterOverlapCache={},u._workCell=new f.CellData,u._state=new c.GridCache,u}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t);var r=this._getFont(!1,!1);this._characterWidth===t.scaledCharWidth&&this._characterFont===r||(this._characterWidth=t.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(this._bufferService.cols,this._bufferService.rows)},t.prototype.reset=function(){this._state.clear(),this._clearAll()},t.prototype._forEachCell=function(e,t,r){for(var i=e;i<=t;i++)for(var n=i+this._bufferService.buffer.ydisp,o=this._bufferService.buffer.lines.get(n),s=this._characterJoinerService.getJoinedCharacters(n),a=0;a<this._bufferService.cols;a++){o.loadCell(a,this._workCell);var c=this._workCell,l=!1,h=a;if(0!==c.getWidth()){if(s.length>0&&a===s[0][0]){l=!0;var f=s.shift();c=new p.JoinedCellData(this._workCell,o.translateToString(!0,f[0],f[1]),f[1]-f[0]),h=f[1]-1}!l&&this._isOverlapping(c)&&h<o.length-1&&o.getCodePoint(h+1)===u.NULL_CELL_CODE&&(c.content&=-12582913,c.content|=2<<22),r(c,a,i),a=h}}},t.prototype._drawBackground=function(e,t){var r=this,i=this._ctx,n=this._bufferService.cols,o=0,s=0,c=null;i.save(),this._forEachCell(e,t,(function(e,t,l){var u,f,_=null;e.isInverse()?_=e.isFgDefault()?r._colors.foreground.css:e.isFgRGB()?"rgb("+h.AttributeData.toColorRGB(e.getFgColor()).join(",")+")":r._colors.ansi[e.getFgColor()].css:e.isBgRGB()?_="rgb("+h.AttributeData.toColorRGB(e.getBgColor()).join(",")+")":e.isBgPalette()&&(_=r._colors.ansi[e.getBgColor()].css);var d=!1;try{for(var p=a(r._decorationService.getDecorationsAtCell(t,r._bufferService.buffer.ydisp+l)),v=p.next();!v.done;v=p.next()){var y=v.value;"top"!==y.options.layer&&d||(y.backgroundColorRGB&&(_=y.backgroundColorRGB.css),d="top"===y.options.layer)}}catch(e){u={error:e}}finally{try{v&&!v.done&&(f=p.return)&&f.call(p)}finally{if(u)throw u.error}}null===c&&(o=t,s=l),l!==s?(i.fillStyle=c||"",r._fillCells(o,s,n-o,1),o=t,s=l):c!==_&&(i.fillStyle=c||"",r._fillCells(o,s,t-o,1),o=t,s=l),c=_})),null!==c&&(i.fillStyle=c,this._fillCells(o,s,n-o,1)),i.restore()},t.prototype._drawForeground=function(e,t){var r=this;this._forEachCell(e,t,(function(e,t,i){if(!e.isInvisible()&&(r._drawChars(e,t,i),e.isUnderline()||e.isStrikethrough())){if(r._ctx.save(),e.isInverse())if(e.isBgDefault())r._ctx.fillStyle=r._colors.background.css;else if(e.isBgRGB())r._ctx.fillStyle="rgb("+h.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var n=e.getBgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),r._ctx.fillStyle=r._colors.ansi[n].css}else if(e.isFgDefault())r._ctx.fillStyle=r._colors.foreground.css;else if(e.isFgRGB())r._ctx.fillStyle="rgb("+h.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var o=e.getFgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),r._ctx.fillStyle=r._colors.ansi[o].css}e.isStrikethrough()&&r._fillMiddleLineAtCells(t,i,e.getWidth()),e.isUnderline()&&r._fillBottomLineAtCells(t,i,e.getWidth()),r._ctx.restore()}}))},t.prototype.onGridChanged=function(e,t){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this._clearCells(0,e,this._bufferService.cols,t-e+1),this._drawBackground(e,t),this._drawForeground(e,t))},t.prototype.onOptionsChanged=function(){this._setTransparency(this._optionsService.rawOptions.allowTransparency)},t.prototype._isOverlapping=function(e){if(1!==e.getWidth())return!1;if(e.getCode()<256)return!1;var t=e.getChars();if(this._characterOverlapCache.hasOwnProperty(t))return this._characterOverlapCache[t];this._ctx.save(),this._ctx.font=this._characterFont;var r=Math.floor(this._ctx.measureText(t).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[t]=r,r},o([s(5,_.IBufferService),s(6,_.IOptionsService),s(7,d.ICharacterJoinerService),s(8,_.IDecorationService)],t)}(l.BaseRenderLayer);t.TextRenderLayer=v},9616:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCharAtlas=void 0;var r=function(){function e(){this._didWarmUp=!1}return e.prototype.dispose=function(){},e.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},e.prototype._doWarmUp=function(){},e.prototype.clear=function(){},e.prototype.beginFrame=function(){},e}();t.BaseCharAtlas=r},1420:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeTerminalFromCache=t.acquireCharAtlas=void 0;var i=r(2040),n=r(1906),o=[];t.acquireCharAtlas=function(e,t,r,s,a){for(var c=(0,i.generateConfig)(s,a,e,r),l=0;l<o.length;l++){var h=(u=o[l]).ownedBy.indexOf(t);if(h>=0){if((0,i.configEquals)(u.config,c))return u.atlas;1===u.ownedBy.length?(u.atlas.dispose(),o.splice(l,1)):u.ownedBy.splice(h,1);break}}for(l=0;l<o.length;l++){var u=o[l];if((0,i.configEquals)(u.config,c))return u.ownedBy.push(t),u.atlas}var f={atlas:new n.DynamicCharAtlas(document,c),config:c,ownedBy:[t]};return o.push(f),f.atlas},t.removeTerminalFromCache=function(e){for(var t=0;t<o.length;t++){var r=o[t].ownedBy.indexOf(e);if(-1!==r){1===o[t].ownedBy.length?(o[t].atlas.dispose(),o.splice(t,1)):o[t].ownedBy.splice(r,1);break}}}},2040:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.is256Color=t.configEquals=t.generateConfig=void 0;var i=r(643);t.generateConfig=function(e,t,r,i){var n={foreground:i.foreground,background:i.background,cursor:void 0,cursorAccent:void 0,selection:void 0,ansi:i.ansi.slice()};return{devicePixelRatio:window.devicePixelRatio,scaledCharWidth:e,scaledCharHeight:t,fontFamily:r.fontFamily,fontSize:r.fontSize,fontWeight:r.fontWeight,fontWeightBold:r.fontWeightBold,allowTransparency:r.allowTransparency,colors:n}},t.configEquals=function(e,t){for(var r=0;r<e.colors.ansi.length;r++)if(e.colors.ansi[r].rgba!==t.colors.ansi[r].rgba)return!1;return e.devicePixelRatio===t.devicePixelRatio&&e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontWeight===t.fontWeight&&e.fontWeightBold===t.fontWeightBold&&e.allowTransparency===t.allowTransparency&&e.scaledCharWidth===t.scaledCharWidth&&e.scaledCharHeight===t.scaledCharHeight&&e.colors.foreground===t.colors.foreground&&e.colors.background===t.colors.background},t.is256Color=function(e){return e<i.DEFAULT_COLOR}},8803:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR_ATLAS_CELL_SPACING=t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;var i=r(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=i.isFirefox||i.isLegacyEdge?"bottom":"ideographic",t.CHAR_ATLAS_CELL_SPACING=1},1906:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NoneCharAtlas=t.DynamicCharAtlas=t.getGlyphCacheKey=void 0;var o=r(8803),s=r(9616),a=r(5680),c=r(7001),l=r(6114),h=r(1752),u=r(8055),f=1024,_=1024,d={css:"rgba(0, 0, 0, 0)",rgba:0};function p(e){return e.code<<21|e.bg<<12|e.fg<<3|(e.bold?0:4)+(e.dim?0:2)+(e.italic?0:1)}t.getGlyphCacheKey=p;var v=function(e){function t(t,r){var i=e.call(this)||this;i._config=r,i._drawToCacheCount=0,i._glyphsWaitingOnBitmap=[],i._bitmapCommitTimeout=null,i._bitmap=null,i._cacheCanvas=t.createElement("canvas"),i._cacheCanvas.width=f,i._cacheCanvas.height=_,i._cacheCtx=(0,h.throwIfFalsy)(i._cacheCanvas.getContext("2d",{alpha:!0}));var n=t.createElement("canvas");n.width=i._config.scaledCharWidth,n.height=i._config.scaledCharHeight,i._tmpCtx=(0,h.throwIfFalsy)(n.getContext("2d",{alpha:i._config.allowTransparency})),i._width=Math.floor(f/i._config.scaledCharWidth),i._height=Math.floor(_/i._config.scaledCharHeight);var o=i._width*i._height;return i._cacheMap=new c.LRUMap(o),i._cacheMap.prealloc(o),i}return n(t,e),t.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null)},t.prototype.beginFrame=function(){this._drawToCacheCount=0},t.prototype.clear=function(){if(this._cacheMap.size>0){var e=this._width*this._height;this._cacheMap=new c.LRUMap(e),this._cacheMap.prealloc(e)}this._cacheCtx.clearRect(0,0,f,_),this._tmpCtx.clearRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight)},t.prototype.draw=function(e,t,r,i){if(32===t.code)return!0;if(!this._canCache(t))return!1;var n=p(t),o=this._cacheMap.get(n);if(null!=o)return this._drawFromCache(e,o,r,i),!0;if(this._drawToCacheCount<100){var s;s=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(t,s);return this._cacheMap.set(n,a),this._drawFromCache(e,a,r,i),!0}return!1},t.prototype._canCache=function(e){return e.code<256},t.prototype._toCoordinateX=function(e){return e%this._width*this._config.scaledCharWidth},t.prototype._toCoordinateY=function(e){return Math.floor(e/this._width)*this._config.scaledCharHeight},t.prototype._drawFromCache=function(e,t,r,i){if(!t.isEmpty){var n=this._toCoordinateX(t.index),o=this._toCoordinateY(t.index);e.drawImage(t.inBitmap?this._bitmap:this._cacheCanvas,n,o,this._config.scaledCharWidth,this._config.scaledCharHeight,r,i,this._config.scaledCharWidth,this._config.scaledCharHeight)}},t.prototype._getColorFromAnsiIndex=function(e){return e<this._config.colors.ansi.length?this._config.colors.ansi[e]:a.DEFAULT_ANSI_COLORS[e]},t.prototype._getBackgroundColor=function(e){return this._config.allowTransparency?d:e.bg===o.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:e.bg<256?this._getColorFromAnsiIndex(e.bg):this._config.colors.background},t.prototype._getForegroundColor=function(e){return e.fg===o.INVERTED_DEFAULT_COLOR?u.color.opaque(this._config.colors.background):e.fg<256?this._getColorFromAnsiIndex(e.fg):this._config.colors.foreground},t.prototype._drawToCache=function(e,t){this._drawToCacheCount++,this._tmpCtx.save();var r=this._getBackgroundColor(e);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=r.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var i=e.bold?this._config.fontWeightBold:this._config.fontWeight,n=e.italic?"italic":"";this._tmpCtx.font=n+" "+i+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline=o.TEXT_BASELINE,this._tmpCtx.fillStyle=this._getForegroundColor(e).css,e.dim&&(this._tmpCtx.globalAlpha=o.DIM_OPACITY),this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight);var s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;if(this._config.allowTransparency||(a=g(s,r)),a&&"_"===e.chars&&!this._config.allowTransparency)for(var c=1;c<=5&&(this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight-c),a=g(s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),r));c++);this._tmpCtx.restore();var l=this._toCoordinateX(t),h=this._toCoordinateY(t);this._cacheCtx.putImageData(s,l,h);var u={index:t,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(u),u},t.prototype._addGlyphToBitmap=function(e){var t=this;!("createImageBitmap"in window)||l.isFirefox||l.isSafari||(this._glyphsWaitingOnBitmap.push(e),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout((function(){return t._generateBitmap()}),100)))},t.prototype._generateBitmap=function(){var e=this,t=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then((function(r){e._bitmap=r;for(var i=0;i<t.length;i++)t[i].inBitmap=!0})),this._bitmapCommitTimeout=null},t}(s.BaseCharAtlas);t.DynamicCharAtlas=v;var y=function(e){function t(t,r){return e.call(this)||this}return n(t,e),t.prototype.draw=function(e,t,r,i){return!1},t}(s.BaseCharAtlas);function g(e,t){for(var r=!0,i=t.rgba>>>24,n=t.rgba>>>16&255,o=t.rgba>>>8&255,s=0;s<e.data.length;s+=4)e.data[s]===i&&e.data[s+1]===n&&e.data[s+2]===o?e.data[s+3]=0:r=!1;return r}t.NoneCharAtlas=y},7001:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LRUMap=void 0;var r=function(){function e(e){this.capacity=e,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return e.prototype._unlinkNode=function(e){var t=e.prev,r=e.next;e===this._head&&(this._head=r),e===this._tail&&(this._tail=t),null!==t&&(t.next=r),null!==r&&(r.prev=t)},e.prototype._appendNode=function(e){var t=this._tail;null!==t&&(t.next=e),e.prev=t,e.next=null,this._tail=e,null===this._head&&(this._head=e)},e.prototype.prealloc=function(e){for(var t=this._nodePool,r=0;r<e;r++)t.push({prev:null,next:null,key:null,value:null})},e.prototype.get=function(e){var t=this._map[e];return void 0!==t?(this._unlinkNode(t),this._appendNode(t),t.value):null},e.prototype.peekValue=function(e){var t=this._map[e];return void 0!==t?t.value:null},e.prototype.peek=function(){var e=this._head;return null===e?null:e.value},e.prototype.set=function(e,t){var r=this._map[e];if(void 0!==r)r=this._map[e],this._unlinkNode(r),r.value=t;else if(this.size>=this.capacity)r=this._head,this._unlinkNode(r),delete this._map[r.key],r.key=e,r.value=t,this._map[e]=r;else{var i=this._nodePool;i.length>0?((r=i.pop()).key=e,r.value=t):r={prev:null,next:null,key:e,value:t},this._map[e]=r,this.size++}this._appendNode(r)},e}();t.LRUMap=r},1296:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;var c=r(3787),l=r(8803),h=r(844),u=r(4725),f=r(2585),_=r(8460),d=r(8055),p=r(9631),v="xterm-dom-renderer-owner-",y="xterm-fg-",g="xterm-bg-",m="xterm-focus",b=1,S=function(e){function t(t,r,i,n,o,s,a,l,h,u){var f=e.call(this)||this;return f._colors=t,f._element=r,f._screenElement=i,f._viewportElement=n,f._linkifier=o,f._linkifier2=s,f._charSizeService=l,f._optionsService=h,f._bufferService=u,f._terminalClass=b++,f._rowElements=[],f._rowContainer=document.createElement("div"),f._rowContainer.classList.add("xterm-rows"),f._rowContainer.style.lineHeight="normal",f._rowContainer.setAttribute("aria-hidden","true"),f._refreshRowElements(f._bufferService.cols,f._bufferService.rows),f._selectionContainer=document.createElement("div"),f._selectionContainer.classList.add("xterm-selection"),f._selectionContainer.setAttribute("aria-hidden","true"),f.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},f._updateDimensions(),f._injectCss(),f._rowFactory=a.createInstance(c.DomRendererRowFactory,document,f._colors),f._element.classList.add(v+f._terminalClass),f._screenElement.appendChild(f._rowContainer),f._screenElement.appendChild(f._selectionContainer),f.register(f._linkifier.onShowLinkUnderline((function(e){return f._onLinkHover(e)}))),f.register(f._linkifier.onHideLinkUnderline((function(e){return f._onLinkLeave(e)}))),f.register(f._linkifier2.onShowLinkUnderline((function(e){return f._onLinkHover(e)}))),f.register(f._linkifier2.onHideLinkUnderline((function(e){return f._onLinkLeave(e)}))),f}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return(new _.EventEmitter).event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._element.classList.remove(v+this._terminalClass),(0,p.removeElementFromParent)(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),e.prototype.dispose.call(this)},t.prototype._updateDimensions=function(){var e,t;this.dimensions.scaledCharWidth=this._charSizeService.width*window.devicePixelRatio,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;try{for(var r=a(this._rowElements),i=r.next();!i.done;i=r.next()){var n=i.value;n.style.width=this.dimensions.canvasWidth+"px",n.style.height=this.dimensions.actualCellHeight+"px",n.style.lineHeight=this.dimensions.actualCellHeight+"px",n.style.overflow="hidden"}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));var o=this._terminalSelector+" .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.textContent=o,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.setColors=function(e){this._colors=e,this._injectCss()},t.prototype._injectCss=function(){var e=this;this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));var t=this._terminalSelector+" .xterm-rows { color: "+this._colors.foreground.css+"; font-family: "+this._optionsService.rawOptions.fontFamily+"; font-size: "+this._optionsService.rawOptions.fontSize+"px;}";t+=this._terminalSelector+" span:not(."+c.BOLD_CLASS+") { font-weight: "+this._optionsService.rawOptions.fontWeight+";}"+this._terminalSelector+" span."+c.BOLD_CLASS+" { font-weight: "+this._optionsService.rawOptions.fontWeightBold+";}"+this._terminalSelector+" span."+c.ITALIC_CLASS+" { font-style: italic;}",t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {  background-color: "+this._colors.cursor.css+";  color: "+this._colors.cursorAccent.css+"; } 50% {  background-color: "+this._colors.cursorAccent.css+";  color: "+this._colors.cursor.css+"; }}",t+=this._terminalSelector+" .xterm-rows:not(.xterm-focus) ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { outline: 1px solid "+this._colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_BLINK_CLASS+":not(."+c.CURSOR_STYLE_BLOCK_CLASS+") { animation: blink_box_shadow_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_BLINK_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { animation: blink_block_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this._colors.cursor.css+"; color: "+this._colors.cursorAccent.css+";}"+this._terminalSelector+" .xterm-rows ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BAR_CLASS+" { box-shadow: "+this._optionsService.rawOptions.cursorWidth+"px 0 0 "+this._colors.cursor.css+" inset;}"+this._terminalSelector+" .xterm-rows ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this._colors.cursor.css+" inset;}",t+=this._terminalSelector+" .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" .xterm-selection div { position: absolute; background-color: "+this._colors.selectionOpaque.css+";}",this._colors.ansi.forEach((function(r,i){t+=e._terminalSelector+" ."+y+i+" { color: "+r.css+"; }"+e._terminalSelector+" ."+g+i+" { background-color: "+r.css+"; }"})),t+=this._terminalSelector+" ."+y+l.INVERTED_DEFAULT_COLOR+" { color: "+d.color.opaque(this._colors.background).css+"; }"+this._terminalSelector+" ."+g+l.INVERTED_DEFAULT_COLOR+" { background-color: "+this._colors.foreground.css+"; }",this._themeStyleElement.textContent=t},t.prototype.onDevicePixelRatioChange=function(){this._updateDimensions()},t.prototype._refreshRowElements=function(e,t){for(var r=this._rowElements.length;r<=t;r++){var i=document.createElement("div");this._rowContainer.appendChild(i),this._rowElements.push(i)}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop())},t.prototype.onResize=function(e,t){this._refreshRowElements(e,t),this._updateDimensions()},t.prototype.onCharSizeChanged=function(){this._updateDimensions()},t.prototype.onBlur=function(){this._rowContainer.classList.remove(m)},t.prototype.onFocus=function(){this._rowContainer.classList.add(m)},t.prototype.onSelectionChanged=function(e,t,r){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(this._rowFactory.onSelectionChanged(e,t,r),this.renderRows(0,this._bufferService.rows-1),e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(!(o>=this._bufferService.rows||s<0)){var a=document.createDocumentFragment();if(r){var c=e[0]>t[0];a.appendChild(this._createSelectionElement(o,c?t[0]:e[0],c?e[0]:t[0],s-o+1))}else{var l=i===o?e[0]:0,h=o===n?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,l,h));var u=s-o-1;if(a.appendChild(this._createSelectionElement(o+1,0,this._bufferService.cols,u)),o!==s){var f=n===s?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(s,0,f))}}this._selectionContainer.appendChild(a)}}},t.prototype._createSelectionElement=function(e,t,r,i){void 0===i&&(i=1);var n=document.createElement("div");return n.style.height=i*this.dimensions.actualCellHeight+"px",n.style.top=e*this.dimensions.actualCellHeight+"px",n.style.left=t*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(r-t)+"px",n},t.prototype.onCursorMove=function(){},t.prototype.onOptionsChanged=function(){this._updateDimensions(),this._injectCss()},t.prototype.clear=function(){var e,t;try{for(var r=a(this._rowElements),i=r.next();!i.done;i=r.next())i.value.innerText=""}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}},t.prototype.renderRows=function(e,t){for(var r=this._bufferService.buffer.ybase+this._bufferService.buffer.y,i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),n=this._optionsService.rawOptions.cursorBlink,o=e;o<=t;o++){var s=this._rowElements[o];s.innerText="";var a=o+this._bufferService.buffer.ydisp,c=this._bufferService.buffer.lines.get(a),l=this._optionsService.rawOptions.cursorStyle;s.appendChild(this._rowFactory.createRow(c,a,a===r,l,i,n,this.dimensions.actualCellWidth,this._bufferService.cols))}},Object.defineProperty(t.prototype,"_terminalSelector",{get:function(){return"."+v+this._terminalClass},enumerable:!1,configurable:!0}),t.prototype._onLinkHover=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0)},t.prototype._onLinkLeave=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1)},t.prototype._setCellUnderline=function(e,t,r,i,n,o){for(;e!==t||r!==i;){var s=this._rowElements[r];if(!s)return;var a=s.children[e];a&&(a.style.textDecoration=o?"underline":"none"),++e>=n&&(e=0,r++)}},o([s(6,f.IInstantiationService),s(7,u.ICharSizeService),s(8,f.IOptionsService),s(9,f.IBufferService)],t)}(h.Disposable);t.DomRenderer=S},3787:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.STRIKETHROUGH_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;var s=r(8803),a=r(643),c=r(511),l=r(2585),h=r(8055),u=r(4725),f=r(4269),_=r(1752);t.BOLD_CLASS="xterm-bold",t.DIM_CLASS="xterm-dim",t.ITALIC_CLASS="xterm-italic",t.UNDERLINE_CLASS="xterm-underline",t.STRIKETHROUGH_CLASS="xterm-strikethrough",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_BLINK_CLASS="xterm-cursor-blink",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var d=function(){function e(e,t,r,i,n,o){this._document=e,this._colors=t,this._characterJoinerService=r,this._optionsService=i,this._coreService=n,this._decorationService=o,this._workCell=new c.CellData,this._columnSelectMode=!1}return e.prototype.setColors=function(e){this._colors=e},e.prototype.onSelectionChanged=function(e,t,r){this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=r},e.prototype.createRow=function(e,r,i,n,c,l,u,_){for(var d,v,y=this._document.createDocumentFragment(),g=this._characterJoinerService.getJoinedCharacters(r),m=0,b=Math.min(e.length,_)-1;b>=0;b--)if(e.loadCell(b,this._workCell).getCode()!==a.NULL_CELL_CODE||i&&b===c){m=b+1;break}for(b=0;b<m;b++){e.loadCell(b,this._workCell);var S=this._workCell.getWidth();if(0!==S){var C=!1,w=b,L=this._workCell;if(g.length>0&&b===g[0][0]){C=!0;var E=g.shift();L=new f.JoinedCellData(this._workCell,e.translateToString(!0,E[0],E[1]),E[1]-E[0]),w=E[1]-1,S=L.getWidth()}var x=this._document.createElement("span");if(S>1&&(x.style.width=u*S+"px"),C&&(x.style.display="inline",c>=b&&c<=w&&(c=b)),!this._coreService.isCursorHidden&&i&&b===c)switch(x.classList.add(t.CURSOR_CLASS),l&&x.classList.add(t.CURSOR_BLINK_CLASS),n){case"bar":x.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":x.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:x.classList.add(t.CURSOR_STYLE_BLOCK_CLASS)}L.isBold()&&x.classList.add(t.BOLD_CLASS),L.isItalic()&&x.classList.add(t.ITALIC_CLASS),L.isDim()&&x.classList.add(t.DIM_CLASS),L.isUnderline()&&x.classList.add(t.UNDERLINE_CLASS),L.isInvisible()?x.textContent=a.WHITESPACE_CELL_CHAR:x.textContent=L.getChars()||a.WHITESPACE_CELL_CHAR,L.isStrikethrough()&&x.classList.add(t.STRIKETHROUGH_CLASS);var R=L.getFgColor(),k=L.getFgColorMode(),M=L.getBgColor(),A=L.getBgColorMode(),O=!!L.isInverse();if(O){var D=R;R=M,M=D;var T=k;k=A,A=T}var B=void 0,P=void 0,I=!1;try{for(var H=(d=void 0,o(this._decorationService.getDecorationsAtCell(b,r))),j=H.next();!j.done;j=H.next()){var F=j.value;"top"!==F.options.layer&&I||(F.backgroundColorRGB&&(A=50331648,M=F.backgroundColorRGB.rgba>>8&16777215,B=F.backgroundColorRGB),F.foregroundColorRGB&&(k=50331648,R=F.foregroundColorRGB.rgba>>8&16777215,P=F.foregroundColorRGB),I="top"===F.options.layer)}}catch(e){d={error:e}}finally{try{j&&!j.done&&(v=H.return)&&v.call(H)}finally{if(d)throw d.error}}var W=this._isCellInSelection(b,r);I||this._colors.selectionForeground&&W&&(k=50331648,R=this._colors.selectionForeground.rgba>>8&16777215,P=this._colors.selectionForeground),W&&(B=this._colors.selectionOpaque,I=!0),I&&x.classList.add("xterm-decoration-top");var U=void 0;switch(A){case 16777216:case 33554432:U=this._colors.ansi[M],x.classList.add("xterm-bg-"+M);break;case 50331648:U=h.rgba.toColor(M>>16,M>>8&255,255&M),this._addStyle(x,"background-color:#"+p((M>>>0).toString(16),"0",6));break;default:O?(U=this._colors.foreground,x.classList.add("xterm-bg-"+s.INVERTED_DEFAULT_COLOR)):U=this._colors.background}switch(k){case 16777216:case 33554432:L.isBold()&&R<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(R+=8),this._applyMinimumContrast(x,U,this._colors.ansi[R],L,B,void 0)||x.classList.add("xterm-fg-"+R);break;case 50331648:var q=h.rgba.toColor(R>>16&255,R>>8&255,255&R);this._applyMinimumContrast(x,U,q,L,B,P)||this._addStyle(x,"color:#"+p(R.toString(16),"0",6));break;default:this._applyMinimumContrast(x,U,this._colors.foreground,L,B,void 0)||O&&x.classList.add("xterm-fg-"+s.INVERTED_DEFAULT_COLOR)}y.appendChild(x),b=w}}return y},e.prototype._applyMinimumContrast=function(e,t,r,i,n,o){if(1===this._optionsService.rawOptions.minimumContrastRatio||(0,_.excludeFromContrastRatioDemands)(i.getCode()))return!1;var s=void 0;return n||o||(s=this._colors.contrastCache.getColor(t.rgba,r.rgba)),void 0===s&&(s=h.color.ensureContrastRatio(n||t,o||r,this._optionsService.rawOptions.minimumContrastRatio),this._colors.contrastCache.setColor((n||t).rgba,(o||r).rgba,null!=s?s:null)),!!s&&(this._addStyle(e,"color:"+s.css),!0)},e.prototype._addStyle=function(e,t){e.setAttribute("style",""+(e.getAttribute("style")||"")+t+";")},e.prototype._isCellInSelection=function(e,t){var r=this._selectionStart,i=this._selectionEnd;return!(!r||!i)&&(this._columnSelectMode?r[0]<=i[0]?e>=r[0]&&t>=r[1]&&e<i[0]&&t<=i[1]:e<r[0]&&t>=r[1]&&e>=i[0]&&t<=i[1]:t>r[1]&&t<i[1]||r[1]===i[1]&&t===r[1]&&e>=r[0]&&e<i[0]||r[1]<i[1]&&t===i[1]&&e<i[0]||r[1]<i[1]&&t===r[1]&&e>=r[0])},i([n(2,u.ICharacterJoinerService),n(3,l.IOptionsService),n(4,l.ICoreService),n(5,l.IDecorationService)],e)}();function p(e,t,r){for(;e.length<r;)e=t+e;return e}t.DomRendererRowFactory=d},456:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0;var r=function(){function e(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0}return e.prototype.clearSelection=function(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(e.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"finalSelectionEnd",{get:function(){return this.isSelectAllActive?[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1]:this.selectionStart?!this.selectionEnd||this.areSelectionValuesReversed()?(e=this.selectionStart[0]+this.selectionStartLength)>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]:this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?(e=this.selectionStart[0]+this.selectionStartLength)>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[Math.max(e,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd:void 0;var e},enumerable:!1,configurable:!0}),e.prototype.areSelectionValuesReversed=function(){var e=this.selectionStart,t=this.selectionEnd;return!(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])},e.prototype.onTrim=function(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},e}();t.SelectionModel=r},428:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;var o=r(2585),s=r(8460),a=function(){function e(e,t,r){this._optionsService=r,this.width=0,this.height=0,this._onCharSizeChange=new s.EventEmitter,this._measureStrategy=new c(e,t,this._optionsService)}return Object.defineProperty(e.prototype,"hasValidSize",{get:function(){return this.width>0&&this.height>0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCharSizeChange",{get:function(){return this._onCharSizeChange.event},enumerable:!1,configurable:!0}),e.prototype.measure=function(){var e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire())},i([n(2,o.IOptionsService)],e)}();t.CharSizeService=a;var c=function(){function e(e,t,r){this._document=e,this._parentElement=t,this._optionsService=r,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement)}return e.prototype.measure=function(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result},e}()},4269:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;var a=r(3734),c=r(643),l=r(511),h=r(2585),u=function(e){function t(t,r,i){var n=e.call(this)||this;return n.content=0,n.combinedData="",n.fg=t.fg,n.bg=t.bg,n.combinedData=r,n._width=i,n}return n(t,e),t.prototype.isCombined=function(){return 2097152},t.prototype.getWidth=function(){return this._width},t.prototype.getChars=function(){return this.combinedData},t.prototype.getCode=function(){return 2097151},t.prototype.setFromCharData=function(e){throw new Error("not implemented")},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.JoinedCellData=u;var f=function(){function e(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new l.CellData}return e.prototype.register=function(e){var t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id},e.prototype.deregister=function(e){for(var t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return!1},e.prototype.getJoinedCharacters=function(e){if(0===this._characterJoiners.length)return[];var t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return[];for(var r=[],i=t.translateToString(!0),n=0,o=0,s=0,a=t.getFg(0),l=t.getBg(0),h=0;h<t.getTrimmedLength();h++)if(t.loadCell(h,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==a||this._workCell.bg!==l){if(h-n>1)for(var u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);n=h,s=o,a=this._workCell.fg,l=this._workCell.bg}o+=this._workCell.getChars().length||c.WHITESPACE_CELL_CHAR.length}if(this._bufferService.cols-n>1)for(u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);return r},e.prototype._getJoinedRanges=function(t,r,i,n,o){var s=t.substring(r,i),a=[];try{a=this._characterJoiners[0].handler(s)}catch(e){console.error(e)}for(var c=1;c<this._characterJoiners.length;c++)try{for(var l=this._characterJoiners[c].handler(s),h=0;h<l.length;h++)e._mergeRanges(a,l[h])}catch(e){console.error(e)}return this._stringRangesToCellRanges(a,n,o),a},e.prototype._stringRangesToCellRanges=function(e,t,r){var i=0,n=!1,o=0,s=e[i];if(s){for(var a=r;a<this._bufferService.cols;a++){var l=t.getWidth(a),h=t.getString(a).length||c.WHITESPACE_CELL_CHAR.length;if(0!==l){if(!n&&s[0]<=o&&(s[0]=a,n=!0),s[1]<=o){if(s[1]=a,!(s=e[++i]))break;s[0]<=o?(s[0]=a,n=!0):n=!1}o+=h}}s&&(s[1]=this._bufferService.cols)}},e._mergeRanges=function(e,t){for(var r=!1,i=0;i<e.length;i++){var n=e[i];if(r){if(t[1]<=n[0])return e[i-1][1]=t[1],e;if(t[1]<=n[1])return e[i-1][1]=Math.max(t[1],n[1]),e.splice(i,1),e;e.splice(i,1),i--}else{if(t[1]<=n[0])return e.splice(i,0,t),e;if(t[1]<=n[1])return n[0]=Math.min(t[0],n[0]),e;t[0]<n[1]&&(n[0]=Math.min(t[0],n[0]),r=!0)}}return r?e[e.length-1][1]=t[1]:e.push(t),e},e=o([s(0,h.IBufferService)],e)}();t.CharacterJoinerService=f},5114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0;var r=function(){function e(e){this._textarea=e}return Object.defineProperty(e.prototype,"isFocused",{get:function(){return(this._textarea.getRootNode?this._textarea.getRootNode():document).activeElement===this._textarea&&document.hasFocus()},enumerable:!1,configurable:!0}),e}();t.CoreBrowserService=r},8934:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;var o=r(4725),s=r(9806),a=function(){function e(e,t){this._renderService=e,this._charSizeService=t}return e.prototype.getCoords=function(e,t,r,i,n){return(0,s.getCoords)(window,e,t,r,i,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,n)},e.prototype.getRawByteCoords=function(e,t,r,i){var n=this.getCoords(e,t,r,i);return(0,s.getRawByteCoords)(n)},i([n(0,o.IRenderService),n(1,o.ICharSizeService)],e)}();t.MouseService=a},3230:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;var a=r(6193),c=r(8460),l=r(844),h=r(5596),u=r(3656),f=r(2585),_=r(4725),d=function(e){function t(t,r,i,n,o,s,l){var f=e.call(this)||this;if(f._renderer=t,f._rowCount=r,f._charSizeService=o,f._isPaused=!1,f._needsFullRefresh=!1,f._isNextRenderRedrawOnly=!0,f._needsSelectionRefresh=!1,f._canvasWidth=0,f._canvasHeight=0,f._selectionState={start:void 0,end:void 0,columnSelectMode:!1},f._onDimensionsChange=new c.EventEmitter,f._onRenderedViewportChange=new c.EventEmitter,f._onRender=new c.EventEmitter,f._onRefreshRequest=new c.EventEmitter,f.register({dispose:function(){return f._renderer.dispose()}}),f._renderDebouncer=new a.RenderDebouncer((function(e,t){return f._renderRows(e,t)})),f.register(f._renderDebouncer),f._screenDprMonitor=new h.ScreenDprMonitor,f._screenDprMonitor.setListener((function(){return f.onDevicePixelRatioChange()})),f.register(f._screenDprMonitor),f.register(l.onResize((function(){return f._fullRefresh()}))),f.register(l.buffers.onBufferActivate((function(){var e;return null===(e=f._renderer)||void 0===e?void 0:e.clear()}))),f.register(n.onOptionChange((function(){return f._handleOptionsChanged()}))),f.register(f._charSizeService.onCharSizeChange((function(){return f.onCharSizeChanged()}))),f.register(s.onDecorationRegistered((function(){return f._fullRefresh()}))),f.register(s.onDecorationRemoved((function(){return f._fullRefresh()}))),f._renderer.onRequestRedraw((function(e){return f.refreshRows(e.start,e.end,!0)})),f.register((0,u.addDisposableDomListener)(window,"resize",(function(){return f.onDevicePixelRatioChange()}))),"IntersectionObserver"in window){var _=new IntersectionObserver((function(e){return f._onIntersectionChange(e[e.length-1])}),{threshold:0});_.observe(i),f.register({dispose:function(){return _.disconnect()}})}return f}return n(t,e),Object.defineProperty(t.prototype,"onDimensionsChange",{get:function(){return this._onDimensionsChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRenderedViewportChange",{get:function(){return this._onRenderedViewportChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRefreshRequest",{get:function(){return this._onRefreshRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return this._renderer.dimensions},enumerable:!1,configurable:!0}),t.prototype._onIntersectionChange=function(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1)},t.prototype.refreshRows=function(e,t,r){void 0===r&&(r=!1),this._isPaused?this._needsFullRefresh=!0:(r||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount))},t.prototype._renderRows=function(e,t){this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:e,end:t}),this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0},t.prototype.resize=function(e,t){this._rowCount=t,this._fireOnCanvasResize()},t.prototype._handleOptionsChanged=function(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize()},t.prototype._fireOnCanvasResize=function(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions)},t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype.setRenderer=function(e){var t=this;this._renderer.dispose(),this._renderer=e,this._renderer.onRequestRedraw((function(e){return t.refreshRows(e.start,e.end,!0)})),this._needsSelectionRefresh=!0,this._fullRefresh()},t.prototype.addRefreshCallback=function(e){return this._renderDebouncer.addRefreshCallback(e)},t.prototype._fullRefresh=function(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1)},t.prototype.clearTextureAtlas=function(){var e,t;null===(t=null===(e=this._renderer)||void 0===e?void 0:e.clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh()},t.prototype.setColors=function(e){this._renderer.setColors(e),this._fullRefresh()},t.prototype.onDevicePixelRatioChange=function(){this._charSizeService.measure(),this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1)},t.prototype.onResize=function(e,t){this._renderer.onResize(e,t),this._fullRefresh()},t.prototype.onCharSizeChanged=function(){this._renderer.onCharSizeChanged()},t.prototype.onBlur=function(){this._renderer.onBlur()},t.prototype.onFocus=function(){this._renderer.onFocus()},t.prototype.onSelectionChanged=function(e,t,r){this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=r,this._renderer.onSelectionChanged(e,t,r)},t.prototype.onCursorMove=function(){this._renderer.onCursorMove()},t.prototype.clear=function(){this._renderer.clear()},o([s(3,f.IOptionsService),s(4,_.ICharSizeService),s(5,f.IDecorationService),s(6,f.IBufferService)],t)}(l.Disposable);t.RenderService=d},9312:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;var a=r(6114),c=r(456),l=r(511),h=r(8460),u=r(4725),f=r(2585),_=r(9806),d=r(9504),p=r(844),v=r(4841),y=String.fromCharCode(160),g=new RegExp(y,"g"),m=function(e){function t(t,r,i,n,o,s,a,u){var f=e.call(this)||this;return f._element=t,f._screenElement=r,f._linkifier=i,f._bufferService=n,f._coreService=o,f._mouseService=s,f._optionsService=a,f._renderService=u,f._dragScrollAmount=0,f._enabled=!0,f._workCell=new l.CellData,f._mouseDownTimeStamp=0,f._oldHasSelection=!1,f._oldSelectionStart=void 0,f._oldSelectionEnd=void 0,f._onLinuxMouseSelection=f.register(new h.EventEmitter),f._onRedrawRequest=f.register(new h.EventEmitter),f._onSelectionChange=f.register(new h.EventEmitter),f._onRequestScrollLines=f.register(new h.EventEmitter),f._mouseMoveListener=function(e){return f._onMouseMove(e)},f._mouseUpListener=function(e){return f._onMouseUp(e)},f._coreService.onUserInput((function(){f.hasSelection&&f.clearSelection()})),f._trimListener=f._bufferService.buffer.lines.onTrim((function(e){return f._onTrim(e)})),f.register(f._bufferService.buffers.onBufferActivate((function(e){return f._onBufferActivate(e)}))),f.enable(),f._model=new c.SelectionModel(f._bufferService),f._activeSelectionMode=0,f}return n(t,e),Object.defineProperty(t.prototype,"onLinuxMouseSelection",{get:function(){return this._onLinuxMouseSelection.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRedrawRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestScrollLines",{get:function(){return this._onRequestScrollLines.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._removeMouseDownListeners()},t.prototype.reset=function(){this.clearSelection()},t.prototype.disable=function(){this.clearSelection(),this._enabled=!1},t.prototype.enable=function(){this._enabled=!0},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasSelection",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return!(!e||!t||e[0]===t[0]&&e[1]===t[1])},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionText",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return"";var r=this._bufferService.buffer,i=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return"";for(var n=e[0]<t[0]?e[0]:t[0],o=e[0]<t[0]?t[0]:e[0],s=e[1];s<=t[1];s++){var c=r.translateBufferLineToString(s,!0,n,o);i.push(c)}}else{var l=e[1]===t[1]?t[0]:void 0;for(i.push(r.translateBufferLineToString(e[1],!0,e[0],l)),s=e[1]+1;s<=t[1]-1;s++){var h=r.lines.get(s);c=r.translateBufferLineToString(s,!0),(null==h?void 0:h.isWrapped)?i[i.length-1]+=c:i.push(c)}e[1]!==t[1]&&(h=r.lines.get(t[1]),c=r.translateBufferLineToString(t[1],!0,0,t[0]),h&&h.isWrapped?i[i.length-1]+=c:i.push(c))}return i.map((function(e){return e.replace(g," ")})).join(a.isWindows?"\r\n":"\n")},enumerable:!1,configurable:!0}),t.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire()},t.prototype.refresh=function(e){var t=this;this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame((function(){return t._refresh()}))),a.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText)},t.prototype._refresh=function(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})},t.prototype._isClickInSelection=function(e){var t=this._getMouseBufferCoords(e),r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return!!(r&&i&&t)&&this._areCoordsInSelection(t,r,i)},t.prototype.isCellInSelection=function(e,t){var r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return!(!r||!i)&&this._areCoordsInSelection([e,t],r,i)},t.prototype._areCoordsInSelection=function(e,t,r){return e[1]>t[1]&&e[1]<r[1]||t[1]===r[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<r[0]||t[1]<r[1]&&e[1]===r[1]&&e[0]<r[0]||t[1]<r[1]&&e[1]===t[1]&&e[0]>=t[0]},t.prototype._selectWordAtCursor=function(e,t){var r,i,n=null===(i=null===(r=this._linkifier.currentLink)||void 0===r?void 0:r.link)||void 0===i?void 0:i.range;if(n)return this._model.selectionStart=[n.start.x-1,n.start.y-1],this._model.selectionStartLength=(0,v.getRangeLength)(n,this._bufferService.cols),this._model.selectionEnd=void 0,!0;var o=this._getMouseBufferCoords(e);return!!o&&(this._selectWordAt(o,t),this._model.selectionEnd=void 0,!0)},t.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire()},t.prototype.selectLines=function(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire()},t.prototype._onTrim=function(e){this._model.onTrim(e)&&this.refresh()},t.prototype._getMouseBufferCoords=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t},t.prototype._getMouseEventScrollAmount=function(e){var t=(0,_.getCoordsRelativeToElement)(window,e,this._screenElement)[1],r=this._renderService.dimensions.canvasHeight;return t>=0&&t<=r?0:(t>r&&(t-=r),t=Math.min(Math.max(t,-50),50),(t/=50)/Math.abs(t)+Math.round(14*t))},t.prototype.shouldForceSelection=function(e){return a.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey},t.prototype.onMouseDown=function(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation()}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0)}},t.prototype._addMouseDownListeners=function(){var e=this;this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=window.setInterval((function(){return e._dragScroll()}),50)},t.prototype._removeMouseDownListeners=function(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0},t.prototype._onIncrementalClick=function(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e))},t.prototype._onSingleClick=function(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),this._model.selectionStart){this._model.selectionEnd=void 0;var t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++}},t.prototype._onDoubleClick=function(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1)},t.prototype._onTripleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]))},t.prototype.shouldColumnSelect=function(e){return e.altKey&&!(a.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)},t.prototype._onMouseMove=function(e){if(e.stopImmediatePropagation(),this._model.selectionStart){var t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),this._model.selectionEnd){2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));var r=this._bufferService.buffer;if(this._model.selectionEnd[1]<r.lines.length){var i=r.lines.get(this._model.selectionEnd[1]);i&&0===i.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)}},t.prototype._dragScroll=function(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});var e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh()}},t.prototype._onMouseUp=function(e){var t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.getOption("altClickMovesCursor")){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){var r=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(r&&void 0!==r[0]&&void 0!==r[1]){var i=(0,d.moveToCellSequence)(r[0]-1,r[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(i,!0)}}}else this._fireEventIfSelectionChanged()},t.prototype._fireEventIfSelectionChanged=function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,r=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);r?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,r)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,r)},t.prototype._fireOnSelectionChange=function(e,t,r){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=r,this._onSelectionChange.fire()},t.prototype._onBufferActivate=function(e){var t=this;this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((function(e){return t._onTrim(e)}))},t.prototype._convertViewportColToCharacterIndex=function(e,t){for(var r=t[0],i=0;t[0]>=i;i++){var n=e.loadCell(i,this._workCell).getChars().length;0===this._workCell.getWidth()?r--:n>1&&t[0]!==i&&(r+=n-1)}return r},t.prototype.setSelection=function(e,t,r){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=r,this.refresh(),this._fireEventIfSelectionChanged()},t.prototype.rightClickSelect=function(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged())},t.prototype._getWordAt=function(e,t,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=!0),!(e[0]>=this._bufferService.cols)){var n=this._bufferService.buffer,o=n.lines.get(e[1]);if(o){var s=n.translateBufferLineToString(e[1],!1),a=this._convertViewportColToCharacterIndex(o,e),c=a,l=e[0]-a,h=0,u=0,f=0,_=0;if(" "===s.charAt(a)){for(;a>0&&" "===s.charAt(a-1);)a--;for(;c<s.length&&" "===s.charAt(c+1);)c++}else{var d=e[0],p=e[0];0===o.getWidth(d)&&(h++,d--),2===o.getWidth(p)&&(u++,p++);var v=o.getString(p).length;for(v>1&&(_+=v-1,c+=v-1);d>0&&a>0&&!this._isCharWordSeparator(o.loadCell(d-1,this._workCell));){o.loadCell(d-1,this._workCell);var y=this._workCell.getChars().length;0===this._workCell.getWidth()?(h++,d--):y>1&&(f+=y-1,a-=y-1),a--,d--}for(;p<o.length&&c+1<s.length&&!this._isCharWordSeparator(o.loadCell(p+1,this._workCell));){o.loadCell(p+1,this._workCell);var g=this._workCell.getChars().length;2===this._workCell.getWidth()?(u++,p++):g>1&&(_+=g-1,c+=g-1),c++,p++}}c++;var m=a+l-h+f,b=Math.min(this._bufferService.cols,c-a+h+u-f-_);if(t||""!==s.slice(a,c).trim()){if(r&&0===m&&32!==o.getCodePoint(0)){var S=n.lines.get(e[1]-1);if(S&&o.isWrapped&&32!==S.getCodePoint(this._bufferService.cols-1)){var C=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(C){var w=this._bufferService.cols-C.start;m-=w,b+=w}}}if(i&&m+b===this._bufferService.cols&&32!==o.getCodePoint(this._bufferService.cols-1)){var L=n.lines.get(e[1]+1);if((null==L?void 0:L.isWrapped)&&32!==L.getCodePoint(0)){var E=this._getWordAt([0,e[1]+1],!1,!1,!0);E&&(b+=E.length)}}return{start:m,length:b}}}}},t.prototype._selectWordAt=function(e,t){var r=this._getWordAt(e,t);if(r){for(;r.start<0;)r.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[r.start,e[1]],this._model.selectionStartLength=r.length}},t.prototype._selectToWordAt=function(e){var t=this._getWordAt(e,!0);if(t){for(var r=e[1];t.start<0;)t.start+=this._bufferService.cols,r--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,r++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,r]}},t.prototype._isCharWordSeparator=function(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0},t.prototype._selectLineAt=function(e){var t=this._bufferService.buffer.getWrappedRangeForLine(e),r={start:{x:0,y:t.first},end:{x:this._bufferService.cols-1,y:t.last}};this._model.selectionStart=[0,t.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0,v.getRangeLength)(r,this._bufferService.cols)},o([s(3,f.IBufferService),s(4,f.ICoreService),s(5,u.IMouseService),s(6,f.IOptionsService),s(7,u.IRenderService)],t)}(p.Disposable);t.SelectionService=m},4725:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ICharacterJoinerService=t.ISoundService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;var i=r(8343);t.ICharSizeService=(0,i.createDecorator)("CharSizeService"),t.ICoreBrowserService=(0,i.createDecorator)("CoreBrowserService"),t.IMouseService=(0,i.createDecorator)("MouseService"),t.IRenderService=(0,i.createDecorator)("RenderService"),t.ISelectionService=(0,i.createDecorator)("SelectionService"),t.ISoundService=(0,i.createDecorator)("SoundService"),t.ICharacterJoinerService=(0,i.createDecorator)("CharacterJoinerService")},357:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SoundService=void 0;var o=r(2585),s=function(){function e(e){this._optionsService=e}return Object.defineProperty(e,"audioContext",{get:function(){if(!e._audioContext){var t=window.AudioContext||window.webkitAudioContext;if(!t)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;e._audioContext=new t}return e._audioContext},enumerable:!1,configurable:!0}),e.prototype.playBellSound=function(){var t=e.audioContext;if(t){var r=t.createBufferSource();t.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)),(function(e){r.buffer=e,r.connect(t.destination),r.start(0)}))}},e.prototype._base64ToArrayBuffer=function(e){for(var t=window.atob(e),r=t.length,i=new Uint8Array(r),n=0;n<r;n++)i[n]=t.charCodeAt(n);return i.buffer},e.prototype._removeMimeType=function(e){return e.split(",")[1]},e=i([n(0,o.IOptionsService)],e)}();t.SoundService=s},6349:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;var i=r(8460),n=function(){function e(e){this._maxLength=e,this.onDeleteEmitter=new i.EventEmitter,this.onInsertEmitter=new i.EventEmitter,this.onTrimEmitter=new i.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0}return Object.defineProperty(e.prototype,"onDelete",{get:function(){return this.onDeleteEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onInsert",{get:function(){return this.onInsertEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTrim",{get:function(){return this.onTrimEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(e){if(this._maxLength!==e){for(var t=new Array(e),r=0;r<Math.min(e,this.length);r++)t[r]=this._array[this._getCyclicIndex(r)];this._array=t,this._maxLength=e,this._startIndex=0}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(e){if(e>this._length)for(var t=this._length;t<e;t++)this._array[t]=void 0;this._length=e},enumerable:!1,configurable:!0}),e.prototype.get=function(e){return this._array[this._getCyclicIndex(e)]},e.prototype.set=function(e,t){this._array[this._getCyclicIndex(e)]=t},e.prototype.push=function(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++},e.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(e.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!1,configurable:!0}),e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(e,t){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];if(t){for(var n=e;n<this._length-t;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t})}for(n=this._length-1;n>=e;n--)this._array[this._getCyclicIndex(n+r.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<r.length;n++)this._array[this._getCyclicIndex(e+n)]=r[n];if(r.length&&this.onInsertEmitter.fire({index:e,amount:r.length}),this._length+r.length>this._maxLength){var o=this._length+r.length-this._maxLength;this._startIndex+=o,this._length=this._maxLength,this.onTrimEmitter.fire(o)}else this._length+=r.length},e.prototype.trimStart=function(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e)},e.prototype.shiftElements=function(e,t,r){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+r<0)throw new Error("Cannot shift elements in list beyond index 0");if(r>0){for(var i=t-1;i>=0;i--)this.set(e+i+r,this.get(e+i));var n=e+t+r-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1)}else for(i=0;i<t;i++)this.set(e+i+r,this.get(e+i))}},e.prototype._getCyclicIndex=function(e){return(this._startIndex+e)%this._maxLength},e}();t.CircularList=n},1439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,r){if(void 0===r&&(r=5),"object"!=typeof t)return t;var i=Array.isArray(t)?[]:{};for(var n in t)i[n]=r<=1?t[n]:t[n]&&e(t[n],r-1);return i}},8055:function(e,t){var r,i,n,o,s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};function a(e){var t=e.toString(16);return t.length<2?"0"+t:t}function c(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=void 0,function(e){e.toCss=function(e,t,r,i){return void 0!==i?"#"+a(e)+a(t)+a(r)+a(i):"#"+a(e)+a(t)+a(r)},e.toRgba=function(e,t,r,i){return void 0===i&&(i=255),(e<<24|t<<16|r<<8|i)>>>0}}(r=t.channels||(t.channels={})),(i=t.color||(t.color={})).blend=function(e,t){var i=(255&t.rgba)/255;if(1===i)return{css:t.css,rgba:t.rgba};var n=t.rgba>>24&255,o=t.rgba>>16&255,s=t.rgba>>8&255,a=e.rgba>>24&255,c=e.rgba>>16&255,l=e.rgba>>8&255,h=a+Math.round((n-a)*i),u=c+Math.round((o-c)*i),f=l+Math.round((s-l)*i);return{css:r.toCss(h,u,f),rgba:r.toRgba(h,u,f)}},i.isOpaque=function(e){return 255==(255&e.rgba)},i.ensureContrastRatio=function(e,t,r){var i=o.ensureContrastRatio(e.rgba,t.rgba,r);if(i)return o.toColor(i>>24&255,i>>16&255,i>>8&255)},i.opaque=function(e){var t=(255|e.rgba)>>>0,i=s(o.toChannels(t),3),n=i[0],a=i[1],c=i[2];return{css:r.toCss(n,a,c),rgba:t}},i.opacity=function(e,t){var i=Math.round(255*t),n=s(o.toChannels(e.rgba),3),a=n[0],c=n[1],l=n[2];return{css:r.toCss(a,c,l,i),rgba:r.toRgba(a,c,l,i)}},i.toColorRGB=function(e){return[e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]},(t.css||(t.css={})).toColor=function(e){if(e.match(/#[0-9a-f]{3,8}/i))switch(e.length){case 4:var t=parseInt(e.slice(1,2).repeat(2),16),r=parseInt(e.slice(2,3).repeat(2),16),i=parseInt(e.slice(3,4).repeat(2),16);return o.toColor(t,r,i);case 5:t=parseInt(e.slice(1,2).repeat(2),16),r=parseInt(e.slice(2,3).repeat(2),16),i=parseInt(e.slice(3,4).repeat(2),16);var n=parseInt(e.slice(4,5).repeat(2),16);return o.toColor(t,r,i,n);case 7:return{css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return{css:e,rgba:parseInt(e.slice(1),16)>>>0}}var s=e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);if(s)return t=parseInt(s[1]),r=parseInt(s[2]),i=parseInt(s[3]),n=Math.round(255*(void 0===s[5]?1:parseFloat(s[5]))),o.toColor(t,r,i,n);throw new Error("css.toColor: Unsupported css format")},function(e){function t(e,t,r){var i=e/255,n=t/255,o=r/255;return.2126*(i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t}(n=t.rgb||(t.rgb={})),function(e){function t(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));u<r&&(a>0||l>0||h>0);)a-=Math.max(0,Math.ceil(.1*a)),l-=Math.max(0,Math.ceil(.1*l)),h-=Math.max(0,Math.ceil(.1*h)),u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));return(a<<24|l<<16|h<<8|255)>>>0}function i(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));u<r&&(a<255||l<255||h<255);)a=Math.min(255,a+Math.ceil(.1*(255-a))),l=Math.min(255,l+Math.ceil(.1*(255-l))),h=Math.min(255,h+Math.ceil(.1*(255-h))),u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));return(a<<24|l<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,r,o){var s=n.relativeLuminance(e>>8),a=n.relativeLuminance(r>>8);if(c(s,a)<o){if(a<s){var l=t(e,r,o),h=c(s,n.relativeLuminance(l>>8));if(h<o){var u=i(e,e,o);return h>c(s,n.relativeLuminance(u>>8))?l:u}return l}var f=i(e,r,o),_=c(s,n.relativeLuminance(f>>8));return _<o?(u=t(e,e,o),_>c(s,n.relativeLuminance(u>>8))?f:u):f}},e.reduceLuminance=t,e.increaseLuminance=i,e.toChannels=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,i,n){return{css:r.toCss(e,t,i,n),rgba:r.toRgba(e,t,i,n)}}}(o=t.rgba||(t.rgba={})),t.toPaddedHex=a,t.contrastRatio=c},8969:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;var s=r(844),a=r(2585),c=r(4348),l=r(7866),h=r(744),u=r(7302),f=r(6975),_=r(8460),d=r(1753),p=r(3730),v=r(1480),y=r(7994),g=r(9282),m=r(5435),b=r(5981),S=!1,C=function(e){function t(t){var r=e.call(this)||this;return r._onBinary=new _.EventEmitter,r._onData=new _.EventEmitter,r._onLineFeed=new _.EventEmitter,r._onResize=new _.EventEmitter,r._onScroll=new _.EventEmitter,r._onWriteParsed=new _.EventEmitter,r._instantiationService=new c.InstantiationService,r.optionsService=new u.OptionsService(t),r._instantiationService.setService(a.IOptionsService,r.optionsService),r._bufferService=r.register(r._instantiationService.createInstance(h.BufferService)),r._instantiationService.setService(a.IBufferService,r._bufferService),r._logService=r._instantiationService.createInstance(l.LogService),r._instantiationService.setService(a.ILogService,r._logService),r.coreService=r.register(r._instantiationService.createInstance(f.CoreService,(function(){return r.scrollToBottom()}))),r._instantiationService.setService(a.ICoreService,r.coreService),r.coreMouseService=r._instantiationService.createInstance(d.CoreMouseService),r._instantiationService.setService(a.ICoreMouseService,r.coreMouseService),r._dirtyRowService=r._instantiationService.createInstance(p.DirtyRowService),r._instantiationService.setService(a.IDirtyRowService,r._dirtyRowService),r.unicodeService=r._instantiationService.createInstance(v.UnicodeService),r._instantiationService.setService(a.IUnicodeService,r.unicodeService),r._charsetService=r._instantiationService.createInstance(y.CharsetService),r._instantiationService.setService(a.ICharsetService,r._charsetService),r._inputHandler=new m.InputHandler(r._bufferService,r._charsetService,r.coreService,r._dirtyRowService,r._logService,r.optionsService,r.coreMouseService,r.unicodeService),r.register((0,_.forwardEvent)(r._inputHandler.onLineFeed,r._onLineFeed)),r.register(r._inputHandler),r.register((0,_.forwardEvent)(r._bufferService.onResize,r._onResize)),r.register((0,_.forwardEvent)(r.coreService.onData,r._onData)),r.register((0,_.forwardEvent)(r.coreService.onBinary,r._onBinary)),r.register(r.optionsService.onOptionChange((function(e){return r._updateOptions(e)}))),r.register(r._bufferService.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom)}))),r.register(r._inputHandler.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom)}))),r._writeBuffer=new b.WriteBuffer((function(e,t){return r._inputHandler.parse(e,t)})),r.register((0,_.forwardEvent)(r._writeBuffer.onWriteParsed,r._onWriteParsed)),r}return n(t,e),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onWriteParsed",{get:function(){return this._onWriteParsed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){var e=this;return this._onScrollApi||(this._onScrollApi=new _.EventEmitter,this.register(this._onScroll.event((function(t){var r;null===(r=e._onScrollApi)||void 0===r||r.fire(t.position)})))),this._onScrollApi.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this._bufferService.cols},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rows",{get:function(){return this._bufferService.rows},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buffers",{get:function(){return this._bufferService.buffers},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.optionsService.options},set:function(e){for(var t in e)this.optionsService.options[t]=e[t]},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)},t.prototype.write=function(e,t){this._writeBuffer.write(e,t)},t.prototype.writeSync=function(e,t){this._logService.logLevel<=a.LogLevelEnum.WARN&&!S&&(this._logService.warn("writeSync is unreliable and will be removed soon."),S=!0),this._writeBuffer.writeSync(e,t)},t.prototype.resize=function(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,h.MINIMUM_COLS),t=Math.max(t,h.MINIMUM_ROWS),this._bufferService.resize(e,t))},t.prototype.scroll=function(e,t){void 0===t&&(t=!1),this._bufferService.scroll(e,t)},t.prototype.scrollLines=function(e,t,r){this._bufferService.scrollLines(e,t,r)},t.prototype.scrollPages=function(e){this._bufferService.scrollPages(e)},t.prototype.scrollToTop=function(){this._bufferService.scrollToTop()},t.prototype.scrollToBottom=function(){this._bufferService.scrollToBottom()},t.prototype.scrollToLine=function(e){this._bufferService.scrollToLine(e)},t.prototype.registerEscHandler=function(e,t){return this._inputHandler.registerEscHandler(e,t)},t.prototype.registerDcsHandler=function(e,t){return this._inputHandler.registerDcsHandler(e,t)},t.prototype.registerCsiHandler=function(e,t){return this._inputHandler.registerCsiHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._inputHandler.registerOscHandler(e,t)},t.prototype._setup=function(){this.optionsService.rawOptions.windowsMode&&this._enableWindowsMode()},t.prototype.reset=function(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset()},t.prototype._updateOptions=function(e){var t;switch(e){case"scrollback":this.buffers.resize(this.cols,this.rows);break;case"windowsMode":this.optionsService.rawOptions.windowsMode?this._enableWindowsMode():(null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)}},t.prototype._enableWindowsMode=function(){var e=this;if(!this._windowsMode){var t=[];t.push(this.onLineFeed(g.updateWindowsModeWrappedState.bind(null,this._bufferService))),t.push(this.registerCsiHandler({final:"H"},(function(){return(0,g.updateWindowsModeWrappedState)(e._bufferService),!1}))),this._windowsMode={dispose:function(){var e,r;try{for(var i=o(t),n=i.next();!n.done;n=i.next())n.value.dispose()}catch(t){e={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}}}}},t}(s.Disposable);t.CoreTerminal=C},8460:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0;var r=function(){function e(){this._listeners=[],this._disposed=!1}return Object.defineProperty(e.prototype,"event",{get:function(){var e=this;return this._event||(this._event=function(t){return e._listeners.push(t),{dispose:function(){if(!e._disposed)for(var r=0;r<e._listeners.length;r++)if(e._listeners[r]===t)return void e._listeners.splice(r,1)}}}),this._event},enumerable:!1,configurable:!0}),e.prototype.fire=function(e,t){for(var r=[],i=0;i<this._listeners.length;i++)r.push(this._listeners[i]);for(i=0;i<r.length;i++)r[i].call(void 0,e,t)},e.prototype.dispose=function(){this._listeners&&(this._listeners.length=0),this._disposed=!0},e}();t.EventEmitter=r,t.forwardEvent=function(e,t){return e((function(e){return t.fire(e)}))}},5435:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;var o,s=r(2584),a=r(7116),c=r(2015),l=r(844),h=r(8273),u=r(482),f=r(8437),_=r(8460),d=r(643),p=r(511),v=r(3734),y=r(2585),g=r(6242),m=r(6351),b=r(5941),S={"(":0,")":1,"*":2,"+":3,"-":1,".":2},C=131072;function w(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return!!t.restoreWin;case 2:return!!t.minimizeWin;case 3:return!!t.setWinPosition;case 4:return!!t.setWinSizePixels;case 5:return!!t.raiseWin;case 6:return!!t.lowerWin;case 7:return!!t.refreshWin;case 8:return!!t.setWinSizeChars;case 9:return!!t.maximizeWin;case 10:return!!t.fullscreenWin;case 11:return!!t.getWinState;case 13:return!!t.getWinPosition;case 14:return!!t.getWinSizePixels;case 15:return!!t.getScreenSizePixels;case 16:return!!t.getCellSizePixels;case 18:return!!t.getWinSizeChars;case 19:return!!t.getScreenSizeChars;case 20:return!!t.getIconTitle;case 21:return!!t.getWinTitle;case 22:return!!t.pushTitle;case 23:return!!t.popTitle;case 24:return!!t.setWinLines}return!1}!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS"}(o=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));var L=function(){function e(e,t,r,i){this._bufferService=e,this._coreService=t,this._logService=r,this._optionsService=i,this._data=new Uint32Array(0)}return e.prototype.hook=function(e){this._data=new Uint32Array(0)},e.prototype.put=function(e,t,r){this._data=(0,h.concat)(this._data,e.subarray(t,r))},e.prototype.unhook=function(e){if(!e)return this._data=new Uint32Array(0),!0;var t=(0,u.utf32ToString)(this._data);switch(this._data=new Uint32Array(0),t){case'"q':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r0"q'+s.C0.ESC+"\\");break;case'"p':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r61;1"p'+s.C0.ESC+"\\");break;case"r":var r=this._bufferService.buffer.scrollTop+1+";"+(this._bufferService.buffer.scrollBottom+1)+"r";this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+r+s.C0.ESC+"\\");break;case"m":this._coreService.triggerDataEvent(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\");break;case" q":var i={block:2,underline:4,bar:6}[this._optionsService.rawOptions.cursorStyle];i-=this._optionsService.rawOptions.cursorBlink?1:0,this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+i+" q"+s.C0.ESC+"\\");break;default:this._logService.debug("Unknown DCS $q %s",t),this._coreService.triggerDataEvent(s.C0.ESC+"P0$r"+s.C0.ESC+"\\")}return!0},e}(),E=function(e){function t(t,r,i,n,o,l,h,d,v){void 0===v&&(v=new c.EscapeSequenceParser);var y=e.call(this)||this;y._bufferService=t,y._charsetService=r,y._coreService=i,y._dirtyRowService=n,y._logService=o,y._optionsService=l,y._coreMouseService=h,y._unicodeService=d,y._parser=v,y._parseBuffer=new Uint32Array(4096),y._stringDecoder=new u.StringToUtf32,y._utf8Decoder=new u.Utf8ToUtf32,y._workCell=new p.CellData,y._windowTitle="",y._iconName="",y._windowTitleStack=[],y._iconNameStack=[],y._curAttrData=f.DEFAULT_ATTR_DATA.clone(),y._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone(),y._onRequestBell=new _.EventEmitter,y._onRequestRefreshRows=new _.EventEmitter,y._onRequestReset=new _.EventEmitter,y._onRequestSendFocus=new _.EventEmitter,y._onRequestSyncScrollBar=new _.EventEmitter,y._onRequestWindowsOptionsReport=new _.EventEmitter,y._onA11yChar=new _.EventEmitter,y._onA11yTab=new _.EventEmitter,y._onCursorMove=new _.EventEmitter,y._onLineFeed=new _.EventEmitter,y._onScroll=new _.EventEmitter,y._onTitleChange=new _.EventEmitter,y._onColor=new _.EventEmitter,y._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},y._specialColors=[256,257,258],y.register(y._parser),y._activeBuffer=y._bufferService.buffer,y.register(y._bufferService.buffers.onBufferActivate((function(e){return y._activeBuffer=e.activeBuffer}))),y._parser.setCsiHandlerFallback((function(e,t){y._logService.debug("Unknown CSI code: ",{identifier:y._parser.identToString(e),params:t.toArray()})})),y._parser.setEscHandlerFallback((function(e){y._logService.debug("Unknown ESC code: ",{identifier:y._parser.identToString(e)})})),y._parser.setExecuteHandlerFallback((function(e){y._logService.debug("Unknown EXECUTE code: ",{code:e})})),y._parser.setOscHandlerFallback((function(e,t,r){y._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:r})})),y._parser.setDcsHandlerFallback((function(e,t,r){"HOOK"===t&&(r=r.toArray()),y._logService.debug("Unknown DCS code: ",{identifier:y._parser.identToString(e),action:t,payload:r})})),y._parser.setPrintHandler((function(e,t,r){return y.print(e,t,r)})),y._parser.registerCsiHandler({final:"@"},(function(e){return y.insertChars(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"@"},(function(e){return y.scrollLeft(e)})),y._parser.registerCsiHandler({final:"A"},(function(e){return y.cursorUp(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"A"},(function(e){return y.scrollRight(e)})),y._parser.registerCsiHandler({final:"B"},(function(e){return y.cursorDown(e)})),y._parser.registerCsiHandler({final:"C"},(function(e){return y.cursorForward(e)})),y._parser.registerCsiHandler({final:"D"},(function(e){return y.cursorBackward(e)})),y._parser.registerCsiHandler({final:"E"},(function(e){return y.cursorNextLine(e)})),y._parser.registerCsiHandler({final:"F"},(function(e){return y.cursorPrecedingLine(e)})),y._parser.registerCsiHandler({final:"G"},(function(e){return y.cursorCharAbsolute(e)})),y._parser.registerCsiHandler({final:"H"},(function(e){return y.cursorPosition(e)})),y._parser.registerCsiHandler({final:"I"},(function(e){return y.cursorForwardTab(e)})),y._parser.registerCsiHandler({final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.registerCsiHandler({prefix:"?",final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.registerCsiHandler({final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.registerCsiHandler({prefix:"?",final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.registerCsiHandler({final:"L"},(function(e){return y.insertLines(e)})),y._parser.registerCsiHandler({final:"M"},(function(e){return y.deleteLines(e)})),y._parser.registerCsiHandler({final:"P"},(function(e){return y.deleteChars(e)})),y._parser.registerCsiHandler({final:"S"},(function(e){return y.scrollUp(e)})),y._parser.registerCsiHandler({final:"T"},(function(e){return y.scrollDown(e)})),y._parser.registerCsiHandler({final:"X"},(function(e){return y.eraseChars(e)})),y._parser.registerCsiHandler({final:"Z"},(function(e){return y.cursorBackwardTab(e)})),y._parser.registerCsiHandler({final:"`"},(function(e){return y.charPosAbsolute(e)})),y._parser.registerCsiHandler({final:"a"},(function(e){return y.hPositionRelative(e)})),y._parser.registerCsiHandler({final:"b"},(function(e){return y.repeatPrecedingCharacter(e)})),y._parser.registerCsiHandler({final:"c"},(function(e){return y.sendDeviceAttributesPrimary(e)})),y._parser.registerCsiHandler({prefix:">",final:"c"},(function(e){return y.sendDeviceAttributesSecondary(e)})),y._parser.registerCsiHandler({final:"d"},(function(e){return y.linePosAbsolute(e)})),y._parser.registerCsiHandler({final:"e"},(function(e){return y.vPositionRelative(e)})),y._parser.registerCsiHandler({final:"f"},(function(e){return y.hVPosition(e)})),y._parser.registerCsiHandler({final:"g"},(function(e){return y.tabClear(e)})),y._parser.registerCsiHandler({final:"h"},(function(e){return y.setMode(e)})),y._parser.registerCsiHandler({prefix:"?",final:"h"},(function(e){return y.setModePrivate(e)})),y._parser.registerCsiHandler({final:"l"},(function(e){return y.resetMode(e)})),y._parser.registerCsiHandler({prefix:"?",final:"l"},(function(e){return y.resetModePrivate(e)})),y._parser.registerCsiHandler({final:"m"},(function(e){return y.charAttributes(e)})),y._parser.registerCsiHandler({final:"n"},(function(e){return y.deviceStatus(e)})),y._parser.registerCsiHandler({prefix:"?",final:"n"},(function(e){return y.deviceStatusPrivate(e)})),y._parser.registerCsiHandler({intermediates:"!",final:"p"},(function(e){return y.softReset(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"q"},(function(e){return y.setCursorStyle(e)})),y._parser.registerCsiHandler({final:"r"},(function(e){return y.setScrollRegion(e)})),y._parser.registerCsiHandler({final:"s"},(function(e){return y.saveCursor(e)})),y._parser.registerCsiHandler({final:"t"},(function(e){return y.windowOptions(e)})),y._parser.registerCsiHandler({final:"u"},(function(e){return y.restoreCursor(e)})),y._parser.registerCsiHandler({intermediates:"'",final:"}"},(function(e){return y.insertColumns(e)})),y._parser.registerCsiHandler({intermediates:"'",final:"~"},(function(e){return y.deleteColumns(e)})),y._parser.setExecuteHandler(s.C0.BEL,(function(){return y.bell()})),y._parser.setExecuteHandler(s.C0.LF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.VT,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.FF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.CR,(function(){return y.carriageReturn()})),y._parser.setExecuteHandler(s.C0.BS,(function(){return y.backspace()})),y._parser.setExecuteHandler(s.C0.HT,(function(){return y.tab()})),y._parser.setExecuteHandler(s.C0.SO,(function(){return y.shiftOut()})),y._parser.setExecuteHandler(s.C0.SI,(function(){return y.shiftIn()})),y._parser.setExecuteHandler(s.C1.IND,(function(){return y.index()})),y._parser.setExecuteHandler(s.C1.NEL,(function(){return y.nextLine()})),y._parser.setExecuteHandler(s.C1.HTS,(function(){return y.tabSet()})),y._parser.registerOscHandler(0,new g.OscHandler((function(e){return y.setTitle(e),y.setIconName(e),!0}))),y._parser.registerOscHandler(1,new g.OscHandler((function(e){return y.setIconName(e)}))),y._parser.registerOscHandler(2,new g.OscHandler((function(e){return y.setTitle(e)}))),y._parser.registerOscHandler(4,new g.OscHandler((function(e){return y.setOrReportIndexedColor(e)}))),y._parser.registerOscHandler(10,new g.OscHandler((function(e){return y.setOrReportFgColor(e)}))),y._parser.registerOscHandler(11,new g.OscHandler((function(e){return y.setOrReportBgColor(e)}))),y._parser.registerOscHandler(12,new g.OscHandler((function(e){return y.setOrReportCursorColor(e)}))),y._parser.registerOscHandler(104,new g.OscHandler((function(e){return y.restoreIndexedColor(e)}))),y._parser.registerOscHandler(110,new g.OscHandler((function(e){return y.restoreFgColor(e)}))),y._parser.registerOscHandler(111,new g.OscHandler((function(e){return y.restoreBgColor(e)}))),y._parser.registerOscHandler(112,new g.OscHandler((function(e){return y.restoreCursorColor(e)}))),y._parser.registerEscHandler({final:"7"},(function(){return y.saveCursor()})),y._parser.registerEscHandler({final:"8"},(function(){return y.restoreCursor()})),y._parser.registerEscHandler({final:"D"},(function(){return y.index()})),y._parser.registerEscHandler({final:"E"},(function(){return y.nextLine()})),y._parser.registerEscHandler({final:"H"},(function(){return y.tabSet()})),y._parser.registerEscHandler({final:"M"},(function(){return y.reverseIndex()})),y._parser.registerEscHandler({final:"="},(function(){return y.keypadApplicationMode()})),y._parser.registerEscHandler({final:">"},(function(){return y.keypadNumericMode()})),y._parser.registerEscHandler({final:"c"},(function(){return y.fullReset()})),y._parser.registerEscHandler({final:"n"},(function(){return y.setgLevel(2)})),y._parser.registerEscHandler({final:"o"},(function(){return y.setgLevel(3)})),y._parser.registerEscHandler({final:"|"},(function(){return y.setgLevel(3)})),y._parser.registerEscHandler({final:"}"},(function(){return y.setgLevel(2)})),y._parser.registerEscHandler({final:"~"},(function(){return y.setgLevel(1)})),y._parser.registerEscHandler({intermediates:"%",final:"@"},(function(){return y.selectDefaultCharset()})),y._parser.registerEscHandler({intermediates:"%",final:"G"},(function(){return y.selectDefaultCharset()}));var m=function(e){b._parser.registerEscHandler({intermediates:"(",final:e},(function(){return y.selectCharset("("+e)})),b._parser.registerEscHandler({intermediates:")",final:e},(function(){return y.selectCharset(")"+e)})),b._parser.registerEscHandler({intermediates:"*",final:e},(function(){return y.selectCharset("*"+e)})),b._parser.registerEscHandler({intermediates:"+",final:e},(function(){return y.selectCharset("+"+e)})),b._parser.registerEscHandler({intermediates:"-",final:e},(function(){return y.selectCharset("-"+e)})),b._parser.registerEscHandler({intermediates:".",final:e},(function(){return y.selectCharset("."+e)})),b._parser.registerEscHandler({intermediates:"/",final:e},(function(){return y.selectCharset("/"+e)}))},b=this;for(var S in a.CHARSETS)m(S);return y._parser.registerEscHandler({intermediates:"#",final:"8"},(function(){return y.screenAlignmentPattern()})),y._parser.setErrorHandler((function(e){return y._logService.error("Parsing error: ",e),e})),y._parser.registerDcsHandler({intermediates:"$",final:"q"},new L(y._bufferService,y._coreService,y._logService,y._optionsService)),y}return n(t,e),Object.defineProperty(t.prototype,"onRequestBell",{get:function(){return this._onRequestBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRefreshRows",{get:function(){return this._onRequestRefreshRows.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestReset",{get:function(){return this._onRequestReset.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSendFocus",{get:function(){return this._onRequestSendFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSyncScrollBar",{get:function(){return this._onRequestSyncScrollBar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestWindowsOptionsReport",{get:function(){return this._onRequestWindowsOptionsReport.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yChar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTab.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onColor",{get:function(){return this._onColor.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype._preserveStack=function(e,t,r,i){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=r,this._parseStack.position=i},t.prototype._logSlowResolvingAsync=function(e){this._logService.logLevel<=y.LogLevelEnum.WARN&&Promise.race([e,new Promise((function(e,t){return setTimeout((function(){return t("#SLOW_TIMEOUT")}),5e3)}))]).catch((function(e){if("#SLOW_TIMEOUT"!==e)throw e;console.warn("async parser handler taking longer than 5000 ms")}))},t.prototype.parse=function(e,t){var r,i=this._activeBuffer.x,n=this._activeBuffer.y,o=0,s=this._parseStack.paused;if(s){if(r=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(r),r;i=this._parseStack.cursorStartX,n=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>C&&(o=this._parseStack.position+C)}if(this._logService.logLevel<=y.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+("string"==typeof e?' "'+e+'"':' "'+Array.prototype.map.call(e,(function(e){return String.fromCharCode(e)})).join("")+'"'),"string"==typeof e?e.split("").map((function(e){return e.charCodeAt(0)})):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<C&&(this._parseBuffer=new Uint32Array(Math.min(e.length,C))),s||this._dirtyRowService.clearRange(),e.length>C)for(var a=o;a<e.length;a+=C){var c=a+C<e.length?a+C:e.length,l="string"==typeof e?this._stringDecoder.decode(e.substring(a,c),this._parseBuffer):this._utf8Decoder.decode(e.subarray(a,c),this._parseBuffer);if(r=this._parser.parse(this._parseBuffer,l))return this._preserveStack(i,n,l,a),this._logSlowResolvingAsync(r),r}else if(!s&&(l="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer),r=this._parser.parse(this._parseBuffer,l)))return this._preserveStack(i,n,l,0),this._logSlowResolvingAsync(r),r;this._activeBuffer.x===i&&this._activeBuffer.y===n||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end)},t.prototype.print=function(e,t,r){var i,n,o=this._charsetService.charset,s=this._optionsService.rawOptions.screenReaderMode,a=this._bufferService.cols,c=this._coreService.decPrivateModes.wraparound,l=this._coreService.modes.insertMode,h=this._curAttrData,f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowService.markDirty(this._activeBuffer.y),this._activeBuffer.x&&r-t>0&&2===f.getWidth(this._activeBuffer.x-1)&&f.setCellFromCodePoint(this._activeBuffer.x-1,0,1,h.fg,h.bg,h.extended);for(var _=t;_<r;++_){if(i=e[_],n=this._unicodeService.wcwidth(i),i<127&&o){var p=o[String.fromCharCode(i)];p&&(i=p.charCodeAt(0))}if(s&&this._onA11yChar.fire((0,u.stringFromCodePoint)(i)),n||!this._activeBuffer.x){if(this._activeBuffer.x+n-1>=a)if(c){for(;this._activeBuffer.x<a;)f.setCellFromCodePoint(this._activeBuffer.x++,0,1,h.fg,h.bg,h.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y)}else if(this._activeBuffer.x=a-1,2===n)continue;if(l&&(f.insertCells(this._activeBuffer.x,n,this._activeBuffer.getNullCell(h),h),2===f.getWidth(a-1)&&f.setCellFromCodePoint(a-1,d.NULL_CELL_CODE,d.NULL_CELL_WIDTH,h.fg,h.bg,h.extended)),f.setCellFromCodePoint(this._activeBuffer.x++,i,n,h.fg,h.bg,h.extended),n>0)for(;--n;)f.setCellFromCodePoint(this._activeBuffer.x++,0,0,h.fg,h.bg,h.extended)}else f.getWidth(this._activeBuffer.x-1)?f.addCodepointToCell(this._activeBuffer.x-1,i):f.addCodepointToCell(this._activeBuffer.x-2,i)}r-t>0&&(f.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<a&&r-t>0&&0===f.getWidth(this._activeBuffer.x)&&!f.hasContent(this._activeBuffer.x)&&f.setCellFromCodePoint(this._activeBuffer.x,0,1,h.fg,h.bg,h.extended),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype.registerCsiHandler=function(e,t){var r=this;return"t"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(function(e){return!w(e.params[0],r._optionsService.rawOptions.windowOptions)||t(e)}))},t.prototype.registerDcsHandler=function(e,t){return this._parser.registerDcsHandler(e,new m.DcsHandler(t))},t.prototype.registerEscHandler=function(e,t){return this._parser.registerEscHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._parser.registerOscHandler(e,new g.OscHandler(t))},t.prototype.bell=function(){return this._onRequestBell.fire(),!0},t.prototype.lineFeed=function(){return this._dirtyRowService.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowService.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0},t.prototype.carriageReturn=function(){return this._activeBuffer.x=0,!0},t.prototype.backspace=function(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);t.hasWidth(this._activeBuffer.x)&&!t.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--}return this._restrictCursor(),!0},t.prototype.tab=function(){if(this._activeBuffer.x>=this._bufferService.cols)return!0;var e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0},t.prototype.shiftOut=function(){return this._charsetService.setgLevel(1),!0},t.prototype.shiftIn=function(){return this._charsetService.setgLevel(0),!0},t.prototype._restrictCursor=function(e){void 0===e&&(e=this._bufferService.cols-1),this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype._setCursor=function(e,t){this._dirtyRowService.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype._moveCursor=function(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t)},t.prototype.cursorUp=function(e){var t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0},t.prototype.cursorDown=function(e){var t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0},t.prototype.cursorForward=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.cursorBackward=function(e){return this._moveCursor(-(e.params[0]||1),0),!0},t.prototype.cursorNextLine=function(e){return this.cursorDown(e),this._activeBuffer.x=0,!0},t.prototype.cursorPrecedingLine=function(e){return this.cursorUp(e),this._activeBuffer.x=0,!0},t.prototype.cursorCharAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.cursorPosition=function(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0},t.prototype.charPosAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.hPositionRelative=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.linePosAbsolute=function(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0},t.prototype.vPositionRelative=function(e){return this._moveCursor(0,e.params[0]||1),!0},t.prototype.hVPosition=function(e){return this.cursorPosition(e),!0},t.prototype.tabClear=function(e){var t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0},t.prototype.cursorForwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return!0},t.prototype.cursorBackwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return!0},t.prototype._eraseInBufferLine=function(e,t,r,i){void 0===i&&(i=!1);var n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,r,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i&&(n.isWrapped=!1)},t.prototype._resetBufferLine=function(e){var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);t.fill(this._activeBuffer.getNullCell(this._eraseAttrData())),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),t.isWrapped=!1},t.prototype.eraseInDisplay=function(e){var t;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);t<this._bufferService.rows;t++)this._resetBufferLine(t);this._dirtyRowService.markDirty(t);break;case 1:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t,0,this._activeBuffer.x+1,!0),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(t+1).isWrapped=!1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 2:for(t=this._bufferService.rows,this._dirtyRowService.markDirty(t-1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 3:var r=this._activeBuffer.lines.length-this._bufferService.rows;r>0&&(this._activeBuffer.lines.trimStart(r),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-r,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-r,0),this._onScroll.fire(0))}return!0},t.prototype.eraseInLine=function(e){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0)}return this._dirtyRowService.markDirty(this._activeBuffer.y),!0},t.prototype.insertLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var r=this._activeBuffer.ybase+this._activeBuffer.y,i=this._bufferService.rows-1-this._activeBuffer.scrollBottom,n=this._bufferService.rows-1+this._activeBuffer.ybase-i+1;t--;)this._activeBuffer.lines.splice(n-1,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.deleteLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;var r,i=this._activeBuffer.ybase+this._activeBuffer.y;for(r=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-r;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.insertChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.deleteChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.scrollUp=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollDown=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(f.DEFAULT_ATTR_DATA));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollLeft=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollRight=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.insertColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.deleteColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.eraseChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.repeatPrecedingCharacter=function(e){if(!this._parser.precedingCodepoint)return!0;for(var t=e.params[0]||1,r=new Uint32Array(t),i=0;i<t;++i)r[i]=this._parser.precedingCodepoint;return this.print(r,0,r.length),!0},t.prototype.sendDeviceAttributesPrimary=function(e){return e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(s.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(s.C0.ESC+"[?6c")),!0},t.prototype.sendDeviceAttributesSecondary=function(e){return e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(s.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(s.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(s.C0.ESC+"[>83;40003;0c")),!0},t.prototype._is=function(e){return 0===(this._optionsService.rawOptions.termName+"").indexOf(e)},t.prototype.setMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!0);return!0},t.prototype.setModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),this._charsetService.setgCharset(1,a.DEFAULT_CHARSET),this._charsetService.setgCharset(2,a.DEFAULT_CHARSET),this._charsetService.setgCharset(3,a.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0}return!0},t.prototype.resetMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!1);return!0},t.prototype.resetModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1}return!0},t.prototype._updateAttrColor=function(e,t,r,i,n){return 2===t?(e|=50331648,e&=-16777216,e|=v.AttributeData.fromColorRGB([r,i,n])):5===t&&(e&=-50331904,e|=33554432|255&r),e},t.prototype._extractColor=function(e,t,r){var i=[0,0,-1,0,0,0],n=0,o=0;do{if(i[o+n]=e.params[t+o],e.hasSubParams(t+o)){var s=e.getSubParams(t+o),a=0;do{5===i[1]&&(n=1),i[o+a+1+n]=s[a]}while(++a<s.length&&a+o+1+n<i.length);break}if(5===i[1]&&o+n>=2||2===i[1]&&o+n>=5)break;i[1]&&(n=1)}while(++o+t<e.length&&o+n<i.length);for(a=2;a<i.length;++a)-1===i[a]&&(i[a]=0);switch(i[0]){case 38:r.fg=this._updateAttrColor(r.fg,i[1],i[3],i[4],i[5]);break;case 48:r.bg=this._updateAttrColor(r.bg,i[1],i[3],i[4],i[5]);break;case 58:r.extended=r.extended.clone(),r.extended.underlineColor=this._updateAttrColor(r.extended.underlineColor,i[1],i[3],i[4],i[5])}return o},t.prototype._processUnderline=function(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended()},t.prototype.charAttributes=function(e){if(1===e.length&&0===e.params[0])return this._curAttrData.fg=f.DEFAULT_ATTR_DATA.fg,this._curAttrData.bg=f.DEFAULT_ATTR_DATA.bg,!0;for(var t,r=e.length,i=this._curAttrData,n=0;n<r;n++)(t=e.params[n])>=30&&t<=37?(i.fg&=-50331904,i.fg|=16777216|t-30):t>=40&&t<=47?(i.bg&=-50331904,i.bg|=16777216|t-40):t>=90&&t<=97?(i.fg&=-50331904,i.fg|=16777224|t-90):t>=100&&t<=107?(i.bg&=-50331904,i.bg|=16777224|t-100):0===t?(i.fg=f.DEFAULT_ATTR_DATA.fg,i.bg=f.DEFAULT_ATTR_DATA.bg):1===t?i.fg|=134217728:3===t?i.bg|=67108864:4===t?(i.fg|=268435456,this._processUnderline(e.hasSubParams(n)?e.getSubParams(n)[0]:1,i)):5===t?i.fg|=536870912:7===t?i.fg|=67108864:8===t?i.fg|=1073741824:9===t?i.fg|=2147483648:2===t?i.bg|=134217728:21===t?this._processUnderline(2,i):22===t?(i.fg&=-134217729,i.bg&=-134217729):23===t?i.bg&=-67108865:24===t?i.fg&=-268435457:25===t?i.fg&=-536870913:27===t?i.fg&=-67108865:28===t?i.fg&=-1073741825:29===t?i.fg&=2147483647:39===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg):49===t?(i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):38===t||48===t||58===t?n+=this._extractColor(e,n,i):59===t?(i.extended=i.extended.clone(),i.extended.underlineColor=-1,i.updateExtended()):100===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg,i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",t);return!0},t.prototype.deviceStatus=function(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(s.C0.ESC+"[0n");break;case 6:var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"["+t+";"+r+"R")}return!0},t.prototype.deviceStatusPrivate=function(e){if(6===e.params[0]){var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"[?"+t+";"+r+"R")}return!0},t.prototype.softReset=function(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0},t.prototype.setCursorStyle=function(e){var t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar"}var r=t%2==1;return this._optionsService.options.cursorBlink=r,!0},t.prototype.setScrollRegion=function(e){var t,r=e.params[0]||1;return(e.length<2||(t=e.params[1])>this._bufferService.rows||0===t)&&(t=this._bufferService.rows),t>r&&(this._activeBuffer.scrollTop=r-1,this._activeBuffer.scrollBottom=t-1,this._setCursor(0,0)),!0},t.prototype.windowOptions=function(e){if(!w(e.params[0],this._optionsService.rawOptions.windowOptions))return!0;var t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(o.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(o.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(s.C0.ESC+"[8;"+this._bufferService.rows+";"+this._bufferService.cols+"t");break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop())}return!0},t.prototype.saveCursor=function(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0},t.prototype.restoreCursor=function(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0},t.prototype.setTitle=function(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0},t.prototype.setIconName=function(e){return this._iconName=e,!0},t.prototype.setOrReportIndexedColor=function(e){for(var t=[],r=e.split(";");r.length>1;){var i=r.shift(),n=r.shift();if(/^\d+$/.exec(i)){var o=parseInt(i);if(0<=o&&o<256)if("?"===n)t.push({type:0,index:o});else{var s=(0,b.parseColor)(n);s&&t.push({type:1,index:o,color:s})}}}return t.length&&this._onColor.fire(t),!0},t.prototype._setOrReportSpecialColor=function(e,t){for(var r=e.split(";"),i=0;i<r.length&&!(t>=this._specialColors.length);++i,++t)if("?"===r[i])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else{var n=(0,b.parseColor)(r[i]);n&&this._onColor.fire([{type:1,index:this._specialColors[t],color:n}])}return!0},t.prototype.setOrReportFgColor=function(e){return this._setOrReportSpecialColor(e,0)},t.prototype.setOrReportBgColor=function(e){return this._setOrReportSpecialColor(e,1)},t.prototype.setOrReportCursorColor=function(e){return this._setOrReportSpecialColor(e,2)},t.prototype.restoreIndexedColor=function(e){if(!e)return this._onColor.fire([{type:2}]),!0;for(var t=[],r=e.split(";"),i=0;i<r.length;++i)if(/^\d+$/.exec(r[i])){var n=parseInt(r[i]);0<=n&&n<256&&t.push({type:2,index:n})}return t.length&&this._onColor.fire(t),!0},t.prototype.restoreFgColor=function(e){return this._onColor.fire([{type:2,index:256}]),!0},t.prototype.restoreBgColor=function(e){return this._onColor.fire([{type:2,index:257}]),!0},t.prototype.restoreCursorColor=function(e){return this._onColor.fire([{type:2,index:258}]),!0},t.prototype.nextLine=function(){return this._activeBuffer.x=0,this.index(),!0},t.prototype.keypadApplicationMode=function(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0},t.prototype.keypadNumericMode=function(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0},t.prototype.selectDefaultCharset=function(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),!0},t.prototype.selectCharset=function(e){return 2!==e.length?(this.selectDefaultCharset(),!0):("/"===e[0]||this._charsetService.setgCharset(S[e[0]],a.CHARSETS[e[1]]||a.DEFAULT_CHARSET),!0)},t.prototype.index=function(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0},t.prototype.tabSet=function(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0},t.prototype.reverseIndex=function(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){var e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom)}else this._activeBuffer.y--,this._restrictCursor();return!0},t.prototype.fullReset=function(){return this._parser.reset(),this._onRequestReset.fire(),!0},t.prototype.reset=function(){this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone()},t.prototype._eraseAttrData=function(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal},t.prototype.setgLevel=function(e){return this._charsetService.setgLevel(e),!0},t.prototype.screenAlignmentPattern=function(){var e=new p.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(var t=0;t<this._bufferService.rows;++t){var r=this._activeBuffer.ybase+this._activeBuffer.y+t,i=this._activeBuffer.lines.get(r);i&&(i.fill(e),i.isWrapped=!1)}return this._dirtyRowService.markAllDirty(),this._setCursor(0,0),!0},t}(l.Disposable);t.InputHandler=E},844:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.Disposable=void 0;var i=function(){function e(){this._disposables=[],this._isDisposed=!1}return e.prototype.dispose=function(){var e,t;this._isDisposed=!0;try{for(var i=r(this._disposables),n=i.next();!n.done;n=i.next())n.value.dispose()}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}this._disposables.length=0},e.prototype.register=function(e){return this._disposables.push(e),e},e.prototype.unregister=function(e){var t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1)},e}();function n(e){var t,i;try{for(var n=r(e),o=n.next();!o.done;o=n.next())o.value.dispose()}catch(e){t={error:e}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(t)throw t.error}}e.length=0}t.Disposable=i,t.disposeArray=n,t.getDisposeArrayDisposable=function(e){return{dispose:function(){return n(e)}}}},6114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.isSafari=t.isLegacyEdge=t.isFirefox=void 0;var r="undefined"==typeof navigator,i=r?"node":navigator.userAgent,n=r?"node":navigator.platform;t.isFirefox=i.includes("Firefox"),t.isLegacyEdge=i.includes("Edge"),t.isSafari=/^((?!chrome|android).)*safari/i.test(i),t.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(n),t.isIpad="iPad"===n,t.isIphone="iPhone"===n,t.isWindows=["Windows","Win16","Win32","WinCE"].includes(n),t.isLinux=n.indexOf("Linux")>=0},6106:function(e,t){var r=this&&this.__generator||function(e,t){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],i=0}finally{r=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SortedList=void 0;var i=function(){function e(e){this._getKey=e,this._array=[]}return e.prototype.clear=function(){this._array.length=0},e.prototype.insert=function(e){if(0!==this._array.length){var t=this._search(this._getKey(e),0,this._array.length-1);this._array.splice(t,0,e)}else this._array.push(e)},e.prototype.delete=function(e){if(0===this._array.length)return!1;var t=this._getKey(e),r=this._search(t,0,this._array.length-1);if(this._getKey(this._array[r])!==t)return!1;do{if(this._array[r]===e)return this._array.splice(r,1),!0}while(++r<this._array.length&&this._getKey(this._array[r])===t);return!1},e.prototype.getKeyIterator=function(e){var t;return r(this,(function(r){switch(r.label){case 0:if(0===this._array.length)return[2];if((t=this._search(e,0,this._array.length-1))<0||t>=this._array.length)return[2];if(this._getKey(this._array[t])!==e)return[2];r.label=1;case 1:return[4,this._array[t]];case 2:r.sent(),r.label=3;case 3:if(++t<this._array.length&&this._getKey(this._array[t])===e)return[3,1];r.label=4;case 4:return[2]}}))},e.prototype.values=function(){return this._array.values()},e.prototype._search=function(e,t,r){if(r<t)return t;var i=Math.floor((t+r)/2);if(this._getKey(this._array[i])>e)return this._search(e,t,i-1);if(this._getKey(this._array[i])<e)return this._search(e,i+1,r);for(;i>0&&this._getKey(this._array[i-1])===e;)i--;return i},e}();t.SortedList=i},8273:(e,t)=>{function r(e,t,r,i){if(void 0===r&&(r=0),void 0===i&&(i=e.length),r>=e.length)return e;r=(e.length+r)%e.length,i=i>=e.length?e.length:(e.length+i)%e.length;for(var n=r;n<i;++n)e[n]=t;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.concat=t.fillFallback=t.fill=void 0,t.fill=function(e,t,i,n){return e.fill?e.fill(t,i,n):r(e,t,i,n)},t.fillFallback=r,t.concat=function(e,t){var r=new e.constructor(e.length+t.length);return r.set(e),r.set(t,e.length),r}},9282:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;var i=r(643);t.updateWindowsModeWrappedState=function(e){var t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),r=null==t?void 0:t.get(e.cols-1),n=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);n&&r&&(n.isWrapped=r[i.CHAR_DATA_CODE_INDEX]!==i.NULL_CELL_CODE&&r[i.CHAR_DATA_CODE_INDEX]!==i.WHITESPACE_CELL_CODE)}},3734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;var r=function(){function e(){this.fg=0,this.bg=0,this.extended=new i}return e.toColorRGB=function(e){return[e>>>16&255,e>>>8&255,255&e]},e.fromColorRGB=function(e){return(255&e[0])<<16|(255&e[1])<<8|255&e[2]},e.prototype.clone=function(){var t=new e;return t.fg=this.fg,t.bg=this.bg,t.extended=this.extended.clone(),t},e.prototype.isInverse=function(){return 67108864&this.fg},e.prototype.isBold=function(){return 134217728&this.fg},e.prototype.isUnderline=function(){return 268435456&this.fg},e.prototype.isBlink=function(){return 536870912&this.fg},e.prototype.isInvisible=function(){return 1073741824&this.fg},e.prototype.isItalic=function(){return 67108864&this.bg},e.prototype.isDim=function(){return 134217728&this.bg},e.prototype.isStrikethrough=function(){return 2147483648&this.fg},e.prototype.getFgColorMode=function(){return 50331648&this.fg},e.prototype.getBgColorMode=function(){return 50331648&this.bg},e.prototype.isFgRGB=function(){return 50331648==(50331648&this.fg)},e.prototype.isBgRGB=function(){return 50331648==(50331648&this.bg)},e.prototype.isFgPalette=function(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)},e.prototype.isBgPalette=function(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)},e.prototype.isFgDefault=function(){return 0==(50331648&this.fg)},e.prototype.isBgDefault=function(){return 0==(50331648&this.bg)},e.prototype.isAttributeDefault=function(){return 0===this.fg&&0===this.bg},e.prototype.getFgColor=function(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}},e.prototype.getBgColor=function(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}},e.prototype.hasExtendedAttrs=function(){return 268435456&this.bg},e.prototype.updateExtended=function(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456},e.prototype.getUnderlineColor=function(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()},e.prototype.getUnderlineColorMode=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()},e.prototype.isUnderlineColorRGB=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()},e.prototype.isUnderlineColorPalette=function(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()},e.prototype.isUnderlineColorDefault=function(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()},e.prototype.getUnderlineStyle=function(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0},e}();t.AttributeData=r;var i=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=-1),this.underlineStyle=e,this.underlineColor=t}return e.prototype.clone=function(){return new e(this.underlineStyle,this.underlineColor)},e.prototype.isEmpty=function(){return 0===this.underlineStyle},e}();t.ExtendedAttrs=i},9092:function(e,t,r){var i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},n=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferStringIterator=t.Buffer=t.MAX_BUFFER_SIZE=void 0;var o=r(6349),s=r(8437),a=r(511),c=r(643),l=r(4634),h=r(4863),u=r(7116),f=r(3734);t.MAX_BUFFER_SIZE=4294967295;var _=function(){function e(e,t,r){this._hasScrollback=e,this._optionsService=t,this._bufferService=r,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=s.DEFAULT_ATTR_DATA.clone(),this.savedCharset=u.DEFAULT_CHARSET,this.markers=[],this._nullCell=a.CellData.fromCharData([0,c.NULL_CELL_CHAR,c.NULL_CELL_WIDTH,c.NULL_CELL_CODE]),this._whitespaceCell=a.CellData.fromCharData([0,c.WHITESPACE_CELL_CHAR,c.WHITESPACE_CELL_WIDTH,c.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new o.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}return e.prototype.getNullCell=function(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new f.ExtendedAttrs),this._nullCell},e.prototype.getWhitespaceCell=function(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new f.ExtendedAttrs),this._whitespaceCell},e.prototype.getBlankLine=function(e,t){return new s.BufferLine(this._bufferService.cols,this.getNullCell(e),t)},Object.defineProperty(e.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isCursorInViewport",{get:function(){var e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows},enumerable:!1,configurable:!0}),e.prototype._getCorrectBufferLength=function(e){if(!this._hasScrollback)return e;var r=e+this._optionsService.rawOptions.scrollback;return r>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:r},e.prototype.fillViewportRows=function(e){if(0===this.lines.length){void 0===e&&(e=s.DEFAULT_ATTR_DATA);for(var t=this._rows;t--;)this.lines.push(this.getBlankLine(e))}},e.prototype.clear=function(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new o.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()},e.prototype.resize=function(e,t){var r=this.getNullCell(s.DEFAULT_ATTR_DATA),i=this._getCorrectBufferLength(t);if(i>this.lines.maxLength&&(this.lines.maxLength=i),this.lines.length>0){if(this._cols<e)for(var n=0;n<this.lines.length;n++)this.lines.get(n).resize(e,r);var o=0;if(this._rows<t)for(var a=this._rows;a<t;a++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode?this.lines.push(new s.BufferLine(e,r)):this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1?(this.ybase--,o++,this.ydisp>0&&this.ydisp--):this.lines.push(new s.BufferLine(e,r)));else for(a=this._rows;a>t;a--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(i<this.lines.maxLength){var c=this.lines.length-i;c>0&&(this.lines.trimStart(c),this.ybase=Math.max(this.ybase-c,0),this.ydisp=Math.max(this.ydisp-c,0),this.savedY=Math.max(this.savedY-c,0)),this.lines.maxLength=i}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),o&&(this.y+=o),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(n=0;n<this.lines.length;n++)this.lines.get(n).resize(e,r);this._cols=e,this._rows=t},Object.defineProperty(e.prototype,"_isReflowEnabled",{get:function(){return this._hasScrollback&&!this._optionsService.rawOptions.windowsMode},enumerable:!1,configurable:!0}),e.prototype._reflow=function(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t))},e.prototype._reflowLarger=function(e,t){var r=(0,l.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(s.DEFAULT_ATTR_DATA));if(r.length>0){var i=(0,l.reflowLargerCreateNewLayout)(this.lines,r);(0,l.reflowLargerApplyNewLayout)(this.lines,i.layout),this._reflowLargerAdjustViewport(e,t,i.countRemoved)}},e.prototype._reflowLargerAdjustViewport=function(e,t,r){for(var i=this.getNullCell(s.DEFAULT_ATTR_DATA),n=r;n-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new s.BufferLine(e,i))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-r,0)},e.prototype._reflowSmaller=function(e,t){for(var r=this.getNullCell(s.DEFAULT_ATTR_DATA),o=[],a=0,c=this.lines.length-1;c>=0;c--){var h=this.lines.get(c);if(!(!h||!h.isWrapped&&h.getTrimmedLength()<=e)){for(var u=[h];h.isWrapped&&c>0;)h=this.lines.get(--c),u.unshift(h);var f=this.ybase+this.y;if(!(f>=c&&f<c+u.length)){var _,d=u[u.length-1].getTrimmedLength(),p=(0,l.reflowSmallerGetNewLineLengths)(u,this._cols,e),v=p.length-u.length;_=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+v):Math.max(0,this.lines.length-this.lines.maxLength+v);for(var y=[],g=0;g<v;g++){var m=this.getBlankLine(s.DEFAULT_ATTR_DATA,!0);y.push(m)}y.length>0&&(o.push({start:c+u.length+a,newLines:y}),a+=y.length),u.push.apply(u,n([],i(y),!1));var b=p.length-1,S=p[b];0===S&&(S=p[--b]);for(var C=u.length-v-1,w=d;C>=0;){var L=Math.min(w,S);if(void 0===u[b])break;if(u[b].copyCellsFrom(u[C],w-L,S-L,L,!0),0==(S-=L)&&(S=p[--b]),0==(w-=L)){C--;var E=Math.max(C,0);w=(0,l.getWrappedLineTrimmedLength)(u,E,this._cols)}}for(g=0;g<u.length;g++)p[g]<e&&u[g].setCell(p[g],r);for(var x=v-_;x-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+a)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+v,this.ybase+t-1)}}}if(o.length>0){var R=[],k=[];for(g=0;g<this.lines.length;g++)k.push(this.lines.get(g));var M=this.lines.length,A=M-1,O=0,D=o[O];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+a);var T=0;for(g=Math.min(this.lines.maxLength-1,M+a-1);g>=0;g--)if(D&&D.start>A+T){for(var B=D.newLines.length-1;B>=0;B--)this.lines.set(g--,D.newLines[B]);g++,R.push({index:A+1,amount:D.newLines.length}),T+=D.newLines.length,D=o[++O]}else this.lines.set(g,k[A--]);var P=0;for(g=R.length-1;g>=0;g--)R[g].index+=P,this.lines.onInsertEmitter.fire(R[g]),P+=R[g].amount;var I=Math.max(0,M+a-this.lines.maxLength);I>0&&this.lines.onTrimEmitter.fire(I)}},e.prototype.stringIndexToBufferIndex=function(e,t,r){for(void 0===r&&(r=!1);t;){var i=this.lines.get(e);if(!i)return[-1,-1];for(var n=r?i.getTrimmedLength():i.length,o=0;o<n;++o)if(i.get(o)[c.CHAR_DATA_WIDTH_INDEX]&&(t-=i.get(o)[c.CHAR_DATA_CHAR_INDEX].length||1),t<0)return[e,o];e++}return[e,0]},e.prototype.translateBufferLineToString=function(e,t,r,i){void 0===r&&(r=0);var n=this.lines.get(e);return n?n.translateToString(t,r,i):""},e.prototype.getWrappedRangeForLine=function(e){for(var t=e,r=e;t>0&&this.lines.get(t).isWrapped;)t--;for(;r+1<this.lines.length&&this.lines.get(r+1).isWrapped;)r++;return{first:t,last:r}},e.prototype.setupTabStops=function(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0},e.prototype.prevStop=function(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.nextStop=function(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.clearMarkers=function(e){this._isClearing=!0;for(var t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));this._isClearing=!1},e.prototype.clearAllMarkers=function(){this._isClearing=!0;for(var e=0;e<this.markers.length;e++)this.markers[e].dispose(),this.markers.splice(e--,1);this._isClearing=!1},e.prototype.addMarker=function(e){var t=this,r=new h.Marker(e);return this.markers.push(r),r.register(this.lines.onTrim((function(e){r.line-=e,r.line<0&&r.dispose()}))),r.register(this.lines.onInsert((function(e){r.line>=e.index&&(r.line+=e.amount)}))),r.register(this.lines.onDelete((function(e){r.line>=e.index&&r.line<e.index+e.amount&&r.dispose(),r.line>e.index&&(r.line-=e.amount)}))),r.register(r.onDispose((function(){return t._removeMarker(r)}))),r},e.prototype._removeMarker=function(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1)},e.prototype.iterator=function(e,t,r,i,n){return new d(this,e,t,r,i,n)},e}();t.Buffer=_;var d=function(){function e(e,t,r,i,n,o){void 0===r&&(r=0),void 0===i&&(i=e.lines.length),void 0===n&&(n=0),void 0===o&&(o=0),this._buffer=e,this._trimRight=t,this._startIndex=r,this._endIndex=i,this._startOverscan=n,this._endOverscan=o,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}return e.prototype.hasNext=function(){return this._current<this._endIndex},e.prototype.next=function(){var e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);for(var t="",r=e.first;r<=e.last;++r)t+=this._buffer.translateBufferLineToString(r,this._trimRight);return this._current=e.last+1,{range:e,content:t}},e}();t.BufferStringIterator=d},8437:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;var i=r(482),n=r(643),o=r(511),s=r(3734);t.DEFAULT_ATTR_DATA=Object.freeze(new s.AttributeData);var a=function(){function e(e,t,r){void 0===r&&(r=!1),this.isWrapped=r,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);for(var i=t||o.CellData.fromCharData([0,n.NULL_CELL_CHAR,n.NULL_CELL_WIDTH,n.NULL_CELL_CODE]),s=0;s<e;++s)this.setCell(s,i);this.length=e}return e.prototype.get=function(e){var t=this._data[3*e+0],r=2097151&t;return[this._data[3*e+1],2097152&t?this._combined[e]:r?(0,i.stringFromCodePoint)(r):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):r]},e.prototype.set=function(e,t){this._data[3*e+1]=t[n.CHAR_DATA_ATTR_INDEX],t[n.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[n.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[n.CHAR_DATA_WIDTH_INDEX]<<22},e.prototype.getWidth=function(e){return this._data[3*e+0]>>22},e.prototype.hasWidth=function(e){return 12582912&this._data[3*e+0]},e.prototype.getFg=function(e){return this._data[3*e+1]},e.prototype.getBg=function(e){return this._data[3*e+2]},e.prototype.hasContent=function(e){return 4194303&this._data[3*e+0]},e.prototype.getCodePoint=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t},e.prototype.isCombined=function(e){return 2097152&this._data[3*e+0]},e.prototype.getString=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0,i.stringFromCodePoint)(2097151&t):""},e.prototype.loadCell=function(e,t){var r=3*e;return t.content=this._data[r+0],t.fg=this._data[r+1],t.bg=this._data[r+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t},e.prototype.setCell=function(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg},e.prototype.setCellFromCodePoint=function(e,t,r,i,n,o){268435456&n&&(this._extendedAttrs[e]=o),this._data[3*e+0]=t|r<<22,this._data[3*e+1]=i,this._data[3*e+2]=n},e.prototype.addCodepointToCell=function(e,t){var r=this._data[3*e+0];2097152&r?this._combined[e]+=(0,i.stringFromCodePoint)(t):(2097151&r?(this._combined[e]=(0,i.stringFromCodePoint)(2097151&r)+(0,i.stringFromCodePoint)(t),r&=-2097152,r|=2097152):r=t|1<<22,this._data[3*e+0]=r)},e.prototype.insertCells=function(e,t,r,i){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length-e){for(var n=new o.CellData,a=this.length-e-t-1;a>=0;--a)this.setCell(e+t+a,this.loadCell(e+a,n));for(a=0;a<t;++a)this.setCell(e+a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.deleteCells=function(e,t,r,i){if(e%=this.length,t<this.length-e){for(var n=new o.CellData,a=0;a<this.length-e-t;++a)this.setCell(e+a,this.loadCell(e+t+a,n));for(a=this.length-t;a<this.length;++a)this.setCell(a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.replaceCells=function(e,t,r,i){for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,r)},e.prototype.resize=function(e,t){if(e!==this.length){if(e>this.length){var r=new Uint32Array(3*e);this.length&&(3*e<this._data.length?r.set(this._data.subarray(0,3*e)):r.set(this._data)),this._data=r;for(var i=this.length;i<e;++i)this.setCell(i,t)}else if(e){(r=new Uint32Array(3*e)).set(this._data.subarray(0,3*e)),this._data=r;var n=Object.keys(this._combined);for(i=0;i<n.length;i++){var o=parseInt(n[i],10);o>=e&&delete this._combined[o]}}else this._data=new Uint32Array(0),this._combined={};this.length=e}},e.prototype.fill=function(e){this._combined={},this._extendedAttrs={};for(var t=0;t<this.length;++t)this.setCell(t,e)},e.prototype.copyFrom=function(e){for(var t in this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={},e._combined)this._combined[t]=e._combined[t];for(var t in this._extendedAttrs={},e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped},e.prototype.clone=function(){var t=new e(0);for(var r in t._data=new Uint32Array(this._data),t.length=this.length,this._combined)t._combined[r]=this._combined[r];for(var r in this._extendedAttrs)t._extendedAttrs[r]=this._extendedAttrs[r];return t.isWrapped=this.isWrapped,t},e.prototype.getTrimmedLength=function(){for(var e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0},e.prototype.copyCellsFrom=function(e,t,r,i,n){var o=e._data;if(n)for(var s=i-1;s>=0;s--)for(var a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];else for(s=0;s<i;s++)for(a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];var c=Object.keys(e._combined);for(a=0;a<c.length;a++){var l=parseInt(c[a],10);l>=t&&(this._combined[l-t+r]=e._combined[l])}},e.prototype.translateToString=function(e,t,r){void 0===e&&(e=!1),void 0===t&&(t=0),void 0===r&&(r=this.length),e&&(r=Math.min(r,this.getTrimmedLength()));for(var o="";t<r;){var s=this._data[3*t+0],a=2097151&s;o+=2097152&s?this._combined[t]:a?(0,i.stringFromCodePoint)(a):n.WHITESPACE_CELL_CHAR,t+=s>>22||1}return o},e}();t.BufferLine=a},4841:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error("Buffer range end ("+e.end.x+", "+e.end.y+") cannot be before start ("+e.start.x+", "+e.start.y+")");return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)}},4634:(e,t)=>{function r(e,t,r){if(t===e.length-1)return e[t].getTrimmedLength();var i=!e[t].hasContent(r-1)&&1===e[t].getWidth(r-1),n=2===e[t+1].getWidth(0);return i&&n?r-1:r}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,i,n,o){for(var s=[],a=0;a<e.length-1;a++){var c=a,l=e.get(++c);if(l.isWrapped){for(var h=[e.get(a)];c<e.length&&l.isWrapped;)h.push(l),l=e.get(++c);if(n>=a&&n<c)a+=h.length-1;else{for(var u=0,f=r(h,u,t),_=1,d=0;_<h.length;){var p=r(h,_,t),v=p-d,y=i-f,g=Math.min(v,y);h[u].copyCellsFrom(h[_],d,f,g,!1),(f+=g)===i&&(u++,f=0),(d+=g)===p&&(_++,d=0),0===f&&0!==u&&2===h[u-1].getWidth(i-1)&&(h[u].copyCellsFrom(h[u-1],i-1,f++,1,!1),h[u-1].setCell(i-1,o))}h[u].replaceCells(f,i,o);for(var m=0,b=h.length-1;b>0&&(b>u||0===h[b].getTrimmedLength());b--)m++;m>0&&(s.push(a+h.length-m),s.push(m)),a+=h.length-1}}}return s},t.reflowLargerCreateNewLayout=function(e,t){for(var r=[],i=0,n=t[i],o=0,s=0;s<e.length;s++)if(n===s){var a=t[++i];e.onDeleteEmitter.fire({index:s-o,amount:a}),s+=a-1,o+=a,n=t[++i]}else r.push(s);return{layout:r,countRemoved:o}},t.reflowLargerApplyNewLayout=function(e,t){for(var r=[],i=0;i<t.length;i++)r.push(e.get(t[i]));for(i=0;i<r.length;i++)e.set(i,r[i]);e.length=t.length},t.reflowSmallerGetNewLineLengths=function(e,t,i){for(var n=[],o=e.map((function(i,n){return r(e,n,t)})).reduce((function(e,t){return e+t})),s=0,a=0,c=0;c<o;){if(o-c<i){n.push(o-c);break}s+=i;var l=r(e,a,t);s>l&&(s-=l,a++);var h=2===e[a].getWidth(s-1);h&&s--;var u=h?i-1:i;n.push(u),c+=u}return n},t.getWrappedLineTrimmedLength=r},5295:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;var o=r(9092),s=r(8460),a=function(e){function t(t,r){var i=e.call(this)||this;return i._optionsService=t,i._bufferService=r,i._onBufferActivate=i.register(new s.EventEmitter),i.reset(),i}return n(t,e),Object.defineProperty(t.prototype,"onBufferActivate",{get:function(){return this._onBufferActivate.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this._normal=new o.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new o.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops()},Object.defineProperty(t.prototype,"alt",{get:function(){return this._alt},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"normal",{get:function(){return this._normal},enumerable:!1,configurable:!0}),t.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}))},t.prototype.activateAltBuffer=function(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}))},t.prototype.resize=function(e,t){this._normal.resize(e,t),this._alt.resize(e,t)},t.prototype.setupTabStops=function(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e)},t}(r(844).Disposable);t.BufferSet=a},511:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;var o=r(482),s=r(643),a=r(3734),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.content=0,t.fg=0,t.bg=0,t.extended=new a.ExtendedAttrs,t.combinedData="",t}return n(t,e),t.fromCharData=function(e){var r=new t;return r.setFromCharData(e),r},t.prototype.isCombined=function(){return 2097152&this.content},t.prototype.getWidth=function(){return this.content>>22},t.prototype.getChars=function(){return 2097152&this.content?this.combinedData:2097151&this.content?(0,o.stringFromCodePoint)(2097151&this.content):""},t.prototype.getCode=function(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content},t.prototype.setFromCharData=function(e){this.fg=e[s.CHAR_DATA_ATTR_INDEX],this.bg=0;var t=!1;if(e[s.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[s.CHAR_DATA_CHAR_INDEX].length){var r=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=r&&r<=56319){var i=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=i&&i<=57343?this.content=1024*(r-55296)+i-56320+65536|e[s.CHAR_DATA_WIDTH_INDEX]<<22:t=!0}else t=!0}else this.content=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[s.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[s.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[s.CHAR_DATA_WIDTH_INDEX]<<22)},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.CellData=c},643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=256,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32},4863:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;var o=r(8460),s=function(e){function t(r){var i=e.call(this)||this;return i.line=r,i._id=t._nextId++,i.isDisposed=!1,i._onDispose=new o.EventEmitter,i}return n(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDispose",{get:function(){return this._onDispose.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),e.prototype.dispose.call(this))},t._nextId=1,t}(r(844).Disposable);t.Marker=s},7116:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}},2584:(e,t)=>{var r,i;Object.defineProperty(t,"__esModule",{value:!0}),t.C1_ESCAPED=t.C1=t.C0=void 0,function(e){e.NUL="\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\b",e.HT="\t",e.LF="\n",e.VT="\v",e.FF="\f",e.CR="\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL=""}(r=t.C0||(t.C0={})),(i=t.C1||(t.C1={})).PAD="",i.HOP="",i.BPH="",i.NBH="",i.IND="",i.NEL="",i.SSA="",i.ESA="",i.HTS="",i.HTJ="",i.VTS="",i.PLD="",i.PLU="",i.RI="",i.SS2="",i.SS3="",i.DCS="",i.PU1="",i.PU2="",i.STS="",i.CCH="",i.MW="",i.SPA="",i.EPA="",i.SOS="",i.SGCI="",i.SCI="",i.CSI="",i.ST="",i.OSC="",i.PM="",i.APC="",(t.C1_ESCAPED||(t.C1_ESCAPED={})).ST=r.ESC+"\\"},7399:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;var i=r(2584),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,r,o){var s={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B");break;case 8:if(e.shiftKey){s.key=i.C0.BS;break}if(e.altKey){s.key=i.C0.ESC+i.C0.DEL;break}s.key=i.C0.DEL;break;case 9:if(e.shiftKey){s.key=i.C0.ESC+"[Z";break}s.key=i.C0.HT,s.cancel=!0;break;case 13:s.key=e.altKey?i.C0.ESC+i.C0.CR:i.C0.CR,s.cancel=!0;break;case 27:s.key=i.C0.ESC,e.altKey&&(s.key=i.C0.ESC+i.C0.ESC),s.cancel=!0;break;case 37:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"D",s.key===i.C0.ESC+"[1;3D"&&(s.key=i.C0.ESC+(r?"b":"[1;5D"))):s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"C",s.key===i.C0.ESC+"[1;3C"&&(s.key=i.C0.ESC+(r?"f":"[1;5C"))):s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"A",r||s.key!==i.C0.ESC+"[1;3A"||(s.key=i.C0.ESC+"[1;5A")):s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"B",r||s.key!==i.C0.ESC+"[1;3B"||(s.key=i.C0.ESC+"[1;5B")):s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(s.key=i.C0.ESC+"[2~");break;case 46:s.key=a?i.C0.ESC+"[3;"+(a+1)+"~":i.C0.ESC+"[3~";break;case 36:s.key=a?i.C0.ESC+"[1;"+(a+1)+"H":t?i.C0.ESC+"OH":i.C0.ESC+"[H";break;case 35:s.key=a?i.C0.ESC+"[1;"+(a+1)+"F":t?i.C0.ESC+"OF":i.C0.ESC+"[F";break;case 33:e.shiftKey?s.type=2:e.ctrlKey?s.key=i.C0.ESC+"[5;"+(a+1)+"~":s.key=i.C0.ESC+"[5~";break;case 34:e.shiftKey?s.type=3:e.ctrlKey?s.key=i.C0.ESC+"[6;"+(a+1)+"~":s.key=i.C0.ESC+"[6~";break;case 112:s.key=a?i.C0.ESC+"[1;"+(a+1)+"P":i.C0.ESC+"OP";break;case 113:s.key=a?i.C0.ESC+"[1;"+(a+1)+"Q":i.C0.ESC+"OQ";break;case 114:s.key=a?i.C0.ESC+"[1;"+(a+1)+"R":i.C0.ESC+"OR";break;case 115:s.key=a?i.C0.ESC+"[1;"+(a+1)+"S":i.C0.ESC+"OS";break;case 116:s.key=a?i.C0.ESC+"[15;"+(a+1)+"~":i.C0.ESC+"[15~";break;case 117:s.key=a?i.C0.ESC+"[17;"+(a+1)+"~":i.C0.ESC+"[17~";break;case 118:s.key=a?i.C0.ESC+"[18;"+(a+1)+"~":i.C0.ESC+"[18~";break;case 119:s.key=a?i.C0.ESC+"[19;"+(a+1)+"~":i.C0.ESC+"[19~";break;case 120:s.key=a?i.C0.ESC+"[20;"+(a+1)+"~":i.C0.ESC+"[20~";break;case 121:s.key=a?i.C0.ESC+"[21;"+(a+1)+"~":i.C0.ESC+"[21~";break;case 122:s.key=a?i.C0.ESC+"[23;"+(a+1)+"~":i.C0.ESC+"[23~";break;case 123:s.key=a?i.C0.ESC+"[24;"+(a+1)+"~":i.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(r&&!o||!e.altKey||e.metaKey)!r||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?s.key=e.key:e.key&&e.ctrlKey&&("_"===e.key&&(s.key=i.C0.US),"@"===e.key&&(s.key=i.C0.NUL)):65===e.keyCode&&(s.type=1);else{var c=n[e.keyCode],l=null==c?void 0:c[e.shiftKey?1:0];if(l)s.key=i.C0.ESC+l;else if(e.keyCode>=65&&e.keyCode<=90){var h=e.ctrlKey?e.keyCode-64:e.keyCode+32,u=String.fromCharCode(h);e.shiftKey&&(u=u.toUpperCase()),s.key=i.C0.ESC+u}else"Dead"===e.key&&e.code.startsWith("Key")&&(u=e.code.slice(3,4),e.shiftKey||(u=u.toLowerCase()),s.key=i.C0.ESC+u,s.cancel=!0)}else e.keyCode>=65&&e.keyCode<=90?s.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?s.key=i.C0.NUL:e.keyCode>=51&&e.keyCode<=55?s.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?s.key=i.C0.DEL:219===e.keyCode?s.key=i.C0.ESC:220===e.keyCode?s.key=i.C0.FS:221===e.keyCode&&(s.key=i.C0.GS)}return s}},482:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var i="",n=t;n<r;++n){var o=e[n];o>65535?(o-=65536,i+=String.fromCharCode(55296+(o>>10))+String.fromCharCode(o%1024+56320)):i+=String.fromCharCode(o)}return i};var r=function(){function e(){this._interim=0}return e.prototype.clear=function(){this._interim=0},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i=0,n=0;this._interim&&(56320<=(a=e.charCodeAt(n++))&&a<=57343?t[i++]=1024*(this._interim-55296)+a-56320+65536:(t[i++]=this._interim,t[i++]=a),this._interim=0);for(var o=n;o<r;++o){var s=e.charCodeAt(o);if(55296<=s&&s<=56319){if(++o>=r)return this._interim=s,i;var a;56320<=(a=e.charCodeAt(o))&&a<=57343?t[i++]=1024*(s-55296)+a-56320+65536:(t[i++]=s,t[i++]=a)}else 65279!==s&&(t[i++]=s)}return i},e}();t.StringToUtf32=r;var i=function(){function e(){this.interim=new Uint8Array(3)}return e.prototype.clear=function(){this.interim.fill(0)},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i,n,o,s,a=0,c=0,l=0;if(this.interim[0]){var h=!1,u=this.interim[0];u&=192==(224&u)?31:224==(240&u)?15:7;for(var f=0,_=void 0;(_=63&this.interim[++f])&&f<4;)u<<=6,u|=_;for(var d=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,p=d-f;l<p;){if(l>=r)return 0;if(128!=(192&(_=e[l++]))){l--,h=!0;break}this.interim[f++]=_,u<<=6,u|=63&_}h||(2===d?u<128?l--:t[a++]=u:3===d?u<2048||u>=55296&&u<=57343||65279===u||(t[a++]=u):u<65536||u>1114111||(t[a++]=u)),this.interim.fill(0)}for(var v=r-4,y=l;y<r;){for(;!(!(y<v)||128&(i=e[y])||128&(n=e[y+1])||128&(o=e[y+2])||128&(s=e[y+3]));)t[a++]=i,t[a++]=n,t[a++]=o,t[a++]=s,y+=4;if((i=e[y++])<128)t[a++]=i;else if(192==(224&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if((c=(31&i)<<6|63&n)<128){y--;continue}t[a++]=c}else if(224==(240&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[y++]))){y--;continue}if((c=(15&i)<<12|(63&n)<<6|63&o)<2048||c>=55296&&c<=57343||65279===c)continue;t[a++]=c}else if(240==(248&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,this.interim[2]=o,a;if(128!=(192&(s=e[y++]))){y--;continue}if((c=(7&i)<<18|(63&n)<<12|(63&o)<<6|63&s)<65536||c>1114111)continue;t[a++]=c}}return a},e}();t.Utf8ToUtf32=i},225:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;var i,n=r(8273),o=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]],a=function(){function e(){if(this.version="6",!i){i=new Uint8Array(65536),(0,n.fill)(i,1),i[0]=0,(0,n.fill)(i,0,1,32),(0,n.fill)(i,0,127,160),(0,n.fill)(i,2,4352,4448),i[9001]=2,i[9002]=2,(0,n.fill)(i,2,11904,42192),i[12351]=1,(0,n.fill)(i,2,44032,55204),(0,n.fill)(i,2,63744,64256),(0,n.fill)(i,2,65040,65050),(0,n.fill)(i,2,65072,65136),(0,n.fill)(i,2,65280,65377),(0,n.fill)(i,2,65504,65511);for(var e=0;e<o.length;++e)(0,n.fill)(i,0,o[e][0],o[e][1]+1)}}return e.prototype.wcwidth=function(e){return e<32?0:e<127?1:e<65536?i[e]:function(e,t){var r,i=0,n=t.length-1;if(e<t[0][0]||e>t[n][1])return!1;for(;n>=i;)if(e>t[r=i+n>>1][1])i=r+1;else{if(!(e<t[r][0]))return!0;n=r-1}return!1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1},e}();t.UnicodeV6=a},5981:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;var i=r(8460),n="undefined"==typeof queueMicrotask?function(e){Promise.resolve().then(e)}:queueMicrotask,o=function(){function e(e){this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._onWriteParsed=new i.EventEmitter}return Object.defineProperty(e.prototype,"onWriteParsed",{get:function(){return this._onWriteParsed.event},enumerable:!1,configurable:!0}),e.prototype.writeSync=function(e,t){if(void 0!==t&&this._syncCalls>t)this._syncCalls=0;else if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,!this._isSyncWriting){var r;for(this._isSyncWriting=!0;r=this._writeBuffer.shift();){this._action(r);var i=this._callbacks.shift();i&&i()}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0}},e.prototype.write=function(e,t){var r=this;if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");this._writeBuffer.length||(this._bufferOffset=0,setTimeout((function(){return r._innerWrite()}))),this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t)},e.prototype._innerWrite=function(e,t){var r=this;void 0===e&&(e=0),void 0===t&&(t=!0);for(var i=e||Date.now();this._writeBuffer.length>this._bufferOffset;){var o=this._writeBuffer[this._bufferOffset],s=this._action(o,t);if(s)return void s.catch((function(e){return n((function(){throw e})),Promise.resolve(!1)})).then((function(e){return Date.now()-i>=12?setTimeout((function(){return r._innerWrite(0,e)})):r._innerWrite(i,e)}));var a=this._callbacks[this._bufferOffset];if(a&&a(),this._bufferOffset++,this._pendingData-=o.length,Date.now()-i>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((function(){return r._innerWrite()}))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire()},e}();t.WriteBuffer=o},5941:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.toRgbString=t.parseColor=void 0;var i=/^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,n=/^[\da-f]+$/;function o(e,t){var r=e.toString(16),i=r.length<2?"0"+r:r;switch(t){case 4:return r[0];case 8:return i;case 12:return(i+i).slice(0,3);default:return i+i}}t.parseColor=function(e){if(e){var t=e.toLowerCase();if(0===t.indexOf("rgb:")){t=t.slice(4);var r=i.exec(t);if(r){var o=r[1]?15:r[4]?255:r[7]?4095:65535;return[Math.round(parseInt(r[1]||r[4]||r[7]||r[10],16)/o*255),Math.round(parseInt(r[2]||r[5]||r[8]||r[11],16)/o*255),Math.round(parseInt(r[3]||r[6]||r[9]||r[12],16)/o*255)]}}else if(0===t.indexOf("#")&&(t=t.slice(1),n.exec(t)&&[3,6,9,12].includes(t.length))){for(var s=t.length/3,a=[0,0,0],c=0;c<3;++c){var l=parseInt(t.slice(s*c,s*c+s),16);a[c]=1===s?l<<4:2===s?l:3===s?l>>4:l>>8}return a}}},t.toRgbString=function(e,t){void 0===t&&(t=16);var i=r(e,3),n=i[0],s=i[1],a=i[2];return"rgb:"+o(n,t)+"/"+o(s,t)+"/"+o(a,t)}},5770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7},6351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;var i=r(482),n=r(8742),o=r(5770),s=[],a=function(){function e(){this._handlers=Object.create(null),this._active=s,this._ident=0,this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}return e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=s},e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.reset=function(){if(this._active.length)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=s,this._ident=0},e.prototype.hook=function(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||s,this._active.length)for(var r=this._active.length-1;r>=0;r--)this._active[r].hook(t);else this._handlerFb(this._ident,"HOOK",t)},e.prototype.put=function(e,t,r){if(this._active.length)for(var n=this._active.length-1;n>=0;n--)this._active[n].put(e,t,r);else this._handlerFb(this._ident,"PUT",(0,i.utf32ToString)(e,t,r))},e.prototype.unhook=function(e,t){if(void 0===t&&(t=!0),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].unhook(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--}for(;i>=0;i--)if((r=this._active[i].unhook(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._ident,"UNHOOK",e);this._active=s,this._ident=0},e}();t.DcsParser=a;var c=new n.Params;c.addParam(0);var l=function(){function e(e){this._handler=e,this._data="",this._params=c,this._hitLimit=!1}return e.prototype.hook=function(e){this._params=e.length>1||e.params[0]?e.clone():c,this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0,i.utf32ToString)(e,t,r),this._data.length>o.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.unhook=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data,this._params))instanceof Promise)return r.then((function(e){return t._params=c,t._data="",t._hitLimit=!1,e}));return this._params=c,this._data="",this._hitLimit=!1,r},e}();t.DcsHandler=l},2015:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;var o=r(844),s=r(8273),a=r(8742),c=r(6242),l=r(6351),h=function(){function e(e){this.table=new Uint8Array(e)}return e.prototype.setDefault=function(e,t){(0,s.fill)(this.table,e<<4|t)},e.prototype.add=function(e,t,r,i){this.table[t<<8|e]=r<<4|i},e.prototype.addMany=function(e,t,r,i){for(var n=0;n<e.length;n++)this.table[t<<8|e[n]]=r<<4|i},e}();t.TransitionTable=h;var u=160;t.VT500_TRANSITION_TABLE=function(){var e=new h(4095),t=Array.apply(null,Array(256)).map((function(e,t){return t})),r=function(e,r){return t.slice(e,r)},i=r(32,127),n=r(0,24);n.push(25),n.push.apply(n,r(28,32));var o,s=r(0,14);for(o in e.setDefault(1,0),e.addMany(i,0,2,0),s)e.addMany([24,26,153,154],o,3,0),e.addMany(r(128,144),o,3,0),e.addMany(r(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(n,0,3,0),e.addMany(n,1,3,1),e.add(127,1,0,1),e.addMany(n,8,0,8),e.addMany(n,3,3,3),e.add(127,3,0,3),e.addMany(n,4,3,4),e.add(127,4,0,4),e.addMany(n,6,3,6),e.addMany(n,5,3,5),e.add(127,5,0,5),e.addMany(n,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(i,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(r(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(i,7,0,7),e.addMany(n,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(r(64,127),3,7,0),e.addMany(r(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(r(48,60),4,8,4),e.addMany(r(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(r(32,64),6,0,6),e.add(127,6,0,6),e.addMany(r(64,127),6,0,0),e.addMany(r(32,48),3,9,5),e.addMany(r(32,48),5,9,5),e.addMany(r(48,64),5,0,6),e.addMany(r(64,127),5,7,0),e.addMany(r(32,48),4,9,5),e.addMany(r(32,48),1,9,2),e.addMany(r(32,48),2,9,2),e.addMany(r(48,127),2,10,0),e.addMany(r(48,80),1,10,0),e.addMany(r(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(r(96,127),1,10,0),e.add(80,1,11,9),e.addMany(n,9,0,9),e.add(127,9,0,9),e.addMany(r(28,32),9,0,9),e.addMany(r(32,48),9,9,12),e.addMany(r(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(n,11,0,11),e.addMany(r(32,128),11,0,11),e.addMany(r(28,32),11,0,11),e.addMany(n,10,0,10),e.add(127,10,0,10),e.addMany(r(28,32),10,0,10),e.addMany(r(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(r(32,48),10,9,12),e.addMany(n,12,0,12),e.add(127,12,0,12),e.addMany(r(28,32),12,0,12),e.addMany(r(32,48),12,9,12),e.addMany(r(48,64),12,0,11),e.addMany(r(64,127),12,12,13),e.addMany(r(64,127),10,12,13),e.addMany(r(64,127),9,12,13),e.addMany(n,13,13,13),e.addMany(i,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(u,0,2,0),e.add(u,8,5,8),e.add(u,6,0,6),e.add(u,11,0,11),e.add(u,13,13,13),e}();var f=function(e){function r(r){void 0===r&&(r=t.VT500_TRANSITION_TABLE);var i=e.call(this)||this;return i._transitions=r,i._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},i.initialState=0,i.currentState=i.initialState,i._params=new a.Params,i._params.addParam(0),i._collect=0,i.precedingCodepoint=0,i._printHandlerFb=function(e,t,r){},i._executeHandlerFb=function(e){},i._csiHandlerFb=function(e,t){},i._escHandlerFb=function(e){},i._errorHandlerFb=function(e){return e},i._printHandler=i._printHandlerFb,i._executeHandlers=Object.create(null),i._csiHandlers=Object.create(null),i._escHandlers=Object.create(null),i._oscParser=new c.OscParser,i._dcsParser=new l.DcsParser,i._errorHandler=i._errorHandlerFb,i.registerEscHandler({final:"\\"},(function(){return!0})),i}return n(r,e),r.prototype._identifier=function(e,t){void 0===t&&(t=[64,126]);var r=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if((r=e.prefix.charCodeAt(0))&&60>r||r>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(var i=0;i<e.intermediates.length;++i){var n=e.intermediates.charCodeAt(i);if(32>n||n>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");r<<=8,r|=n}}if(1!==e.final.length)throw new Error("final must be a single byte");var o=e.final.charCodeAt(0);if(t[0]>o||o>t[1])throw new Error("final must be in range "+t[0]+" .. "+t[1]);return(r<<=8)|o},r.prototype.identToString=function(e){for(var t=[];e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")},r.prototype.dispose=function(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose()},r.prototype.setPrintHandler=function(e){this._printHandler=e},r.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb},r.prototype.registerEscHandler=function(e,t){var r=this._identifier(e,[48,126]);void 0===this._escHandlers[r]&&(this._escHandlers[r]=[]);var i=this._escHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.clearEscHandler=function(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])]},r.prototype.setEscHandlerFallback=function(e){this._escHandlerFb=e},r.prototype.setExecuteHandler=function(e,t){this._executeHandlers[e.charCodeAt(0)]=t},r.prototype.clearExecuteHandler=function(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)]},r.prototype.setExecuteHandlerFallback=function(e){this._executeHandlerFb=e},r.prototype.registerCsiHandler=function(e,t){var r=this._identifier(e);void 0===this._csiHandlers[r]&&(this._csiHandlers[r]=[]);var i=this._csiHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.clearCsiHandler=function(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)]},r.prototype.setCsiHandlerFallback=function(e){this._csiHandlerFb=e},r.prototype.registerDcsHandler=function(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)},r.prototype.clearDcsHandler=function(e){this._dcsParser.clearHandler(this._identifier(e))},r.prototype.setDcsHandlerFallback=function(e){this._dcsParser.setHandlerFallback(e)},r.prototype.registerOscHandler=function(e,t){return this._oscParser.registerHandler(e,t)},r.prototype.clearOscHandler=function(e){this._oscParser.clearHandler(e)},r.prototype.setOscHandlerFallback=function(e){this._oscParser.setHandlerFallback(e)},r.prototype.setErrorHandler=function(e){this._errorHandler=e},r.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb},r.prototype.reset=function(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[])},r.prototype._preserveStack=function(e,t,r,i,n){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=r,this._parseStack.transition=i,this._parseStack.chunkPos=n},r.prototype.parse=function(e,t,r){var i,n=0,o=0,s=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,s=this._parseStack.chunkPos+1;else{if(void 0===r||1===this._parseStack.state)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");var a=this._parseStack.handlers,c=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c](this._params));c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 4:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c]());c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 6:if(n=e[this._parseStack.chunkPos],i=this._dcsParser.unhook(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(n=e[this._parseStack.chunkPos],i=this._oscParser.end(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0}this._parseStack.state=0,s=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition}for(var l=s;l<t;++l){switch(n=e[l],(o=this._transitions.table[this.currentState<<8|(n<160?n:u)])>>4){case 2:for(var h=l+1;;++h){if(h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}}break;case 3:this._executeHandlers[n]?this._executeHandlers[n]():this._executeHandlerFb(n),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:l,code:n,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:for(var f=(a=this._csiHandlers[this._collect<<8|n])?a.length-1:-1;f>=0&&!0!==(i=a[f](this._params));f--)if(i instanceof Promise)return this._preserveStack(3,a,f,o,l),i;f<0&&this._csiHandlerFb(this._collect<<8|n,this._params),this.precedingCodepoint=0;break;case 8:do{switch(n){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(n-48)}}while(++l<t&&(n=e[l])>47&&n<60);l--;break;case 9:this._collect<<=8,this._collect|=n;break;case 10:for(var _=this._escHandlers[this._collect<<8|n],d=_?_.length-1:-1;d>=0&&!0!==(i=_[d]());d--)if(i instanceof Promise)return this._preserveStack(4,_,d,o,l),i;d<0&&this._escHandlerFb(this._collect<<8|n),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|n,this._params);break;case 13:for(var p=l+1;;++p)if(p>=t||24===(n=e[p])||26===n||27===n||n>127&&n<u){this._dcsParser.put(e,l,p),l=p-1;break}break;case 14:if(i=this._dcsParser.unhook(24!==n&&26!==n))return this._preserveStack(6,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(var v=l+1;;v++)if(v>=t||(n=e[v])<32||n>127&&n<u){this._oscParser.put(e,l,v),l=v-1;break}break;case 6:if(i=this._oscParser.end(24!==n&&26!==n))return this._preserveStack(5,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0}this.currentState=15&o}},r}(o.Disposable);t.EscapeSequenceParser=f},6242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;var i=r(5770),n=r(482),o=[],s=function(){function e(){this._state=0,this._active=o,this._id=-1,this._handlers=Object.create(null),this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}return e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=o},e.prototype.reset=function(){if(2===this._state)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=o,this._id=-1,this._state=0},e.prototype._start=function(){if(this._active=this._handlers[this._id]||o,this._active.length)for(var e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,"START")},e.prototype._put=function(e,t,r){if(this._active.length)for(var i=this._active.length-1;i>=0;i--)this._active[i].put(e,t,r);else this._handlerFb(this._id,"PUT",(0,n.utf32ToString)(e,t,r))},e.prototype.start=function(){this.reset(),this._state=1},e.prototype.put=function(e,t,r){if(3!==this._state){if(1===this._state)for(;t<r;){var i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48}2===this._state&&r-t>0&&this._put(e,t,r)}},e.prototype.end=function(e,t){if(void 0===t&&(t=!0),0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].end(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--}for(;i>=0;i--)if((r=this._active[i].end(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._id,"END",e);this._active=o,this._id=-1,this._state=0}},e}();t.OscParser=s;var a=function(){function e(e){this._handler=e,this._data="",this._hitLimit=!1}return e.prototype.start=function(){this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0,n.utf32ToString)(e,t,r),this._data.length>i.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.end=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data))instanceof Promise)return r.then((function(e){return t._data="",t._hitLimit=!1,e}));return this._data="",this._hitLimit=!1,r},e}();t.OscHandler=a},8742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;var r=2147483647,i=function(){function e(e,t){if(void 0===e&&(e=32),void 0===t&&(t=32),this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}return e.fromArray=function(t){var r=new e;if(!t.length)return r;for(var i=Array.isArray(t[0])?1:0;i<t.length;++i){var n=t[i];if(Array.isArray(n))for(var o=0;o<n.length;++o)r.addSubParam(n[o]);else r.addParam(n)}return r},e.prototype.clone=function(){var t=new e(this.maxLength,this.maxSubParamsLength);return t.params.set(this.params),t.length=this.length,t._subParams.set(this._subParams),t._subParamsLength=this._subParamsLength,t._subParamsIdx.set(this._subParamsIdx),t._rejectDigits=this._rejectDigits,t._rejectSubDigits=this._rejectSubDigits,t._digitIsSub=this._digitIsSub,t},e.prototype.toArray=function(){for(var e=[],t=0;t<this.length;++t){e.push(this.params[t]);var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&e.push(Array.prototype.slice.call(this._subParams,r,i))}return e},e.prototype.reset=function(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1},e.prototype.addParam=function(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>r?r:e}},e.prototype.addSubParam=function(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>r?r:e,this._subParamsIdx[this.length-1]++}},e.prototype.hasSubParams=function(e){return(255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0},e.prototype.getSubParams=function(e){var t=this._subParamsIdx[e]>>8,r=255&this._subParamsIdx[e];return r-t>0?this._subParams.subarray(t,r):null},e.prototype.getSubParamsAll=function(){for(var e={},t=0;t<this.length;++t){var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&(e[t]=this._subParams.slice(r,i))}return e},e.prototype.addDigit=function(e){var t;if(!(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)){var i=this._digitIsSub?this._subParams:this.params,n=i[t-1];i[t-1]=~n?Math.min(10*n+e,r):e}},e}();t.Params=i},5741:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0;var r=function(){function e(){this._addons=[]}return e.prototype.dispose=function(){for(var e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose()},e.prototype.loadAddon=function(e,t){var r=this,i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=function(){return r._wrappedAddonDispose(i)},t.activate(e)},e.prototype._wrappedAddonDispose=function(e){if(!e.isDisposed){for(var t=-1,r=0;r<this._addons.length;r++)if(this._addons[r]===e){t=r;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1)}},e}();t.AddonManager=r},8771:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferApiView=void 0;var i=r(3785),n=r(511),o=function(){function e(e,t){this._buffer=e,this.type=t}return e.prototype.init=function(e){return this._buffer=e,this},Object.defineProperty(e.prototype,"cursorY",{get:function(){return this._buffer.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cursorX",{get:function(){return this._buffer.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewportY",{get:function(){return this._buffer.ydisp},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"baseY",{get:function(){return this._buffer.ybase},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._buffer.lines.length},enumerable:!1,configurable:!0}),e.prototype.getLine=function(e){var t=this._buffer.lines.get(e);if(t)return new i.BufferLineApiView(t)},e.prototype.getNullCell=function(){return new n.CellData},e}();t.BufferApiView=o},3785:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLineApiView=void 0;var i=r(511),n=function(){function e(e){this._line=e}return Object.defineProperty(e.prototype,"isWrapped",{get:function(){return this._line.isWrapped},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._line.length},enumerable:!1,configurable:!0}),e.prototype.getCell=function(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new i.CellData)},e.prototype.translateToString=function(e,t,r){return this._line.translateToString(e,t,r)},e}();t.BufferLineApiView=n},8285:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferNamespaceApi=void 0;var i=r(8771),n=r(8460),o=function(){function e(e){var t=this;this._core=e,this._onBufferChange=new n.EventEmitter,this._normal=new i.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new i.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate((function(){return t._onBufferChange.fire(t.active)}))}return Object.defineProperty(e.prototype,"onBufferChange",{get:function(){return this._onBufferChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal.init(this._core.buffers.normal)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"alternate",{get:function(){return this._alternate.init(this._core.buffers.alt)},enumerable:!1,configurable:!0}),e}();t.BufferNamespaceApi=o},7975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ParserApi=void 0;var r=function(){function e(e){this._core=e}return e.prototype.registerCsiHandler=function(e,t){return this._core.registerCsiHandler(e,(function(e){return t(e.toArray())}))},e.prototype.addCsiHandler=function(e,t){return this.registerCsiHandler(e,t)},e.prototype.registerDcsHandler=function(e,t){return this._core.registerDcsHandler(e,(function(e,r){return t(e,r.toArray())}))},e.prototype.addDcsHandler=function(e,t){return this.registerDcsHandler(e,t)},e.prototype.registerEscHandler=function(e,t){return this._core.registerEscHandler(e,t)},e.prototype.addEscHandler=function(e,t){return this.registerEscHandler(e,t)},e.prototype.registerOscHandler=function(e,t){return this._core.registerOscHandler(e,t)},e.prototype.addOscHandler=function(e,t){return this.registerOscHandler(e,t)},e}();t.ParserApi=r},7090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeApi=void 0;var r=function(){function e(e){this._core=e}return e.prototype.register=function(e){this._core.unicodeService.register(e)},Object.defineProperty(e.prototype,"versions",{get:function(){return this._core.unicodeService.versions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._core.unicodeService.activeVersion},set:function(e){this._core.unicodeService.activeVersion=e},enumerable:!1,configurable:!0}),e}();t.UnicodeApi=r},744:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;var a=r(2585),c=r(5295),l=r(8460),h=r(844);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;var u=function(e){function r(r){var i=e.call(this)||this;return i._optionsService=r,i.isUserScrolling=!1,i._onResize=new l.EventEmitter,i._onScroll=new l.EventEmitter,i.cols=Math.max(r.rawOptions.cols||0,t.MINIMUM_COLS),i.rows=Math.max(r.rawOptions.rows||0,t.MINIMUM_ROWS),i.buffers=new c.BufferSet(r,i),i}return n(r,e),Object.defineProperty(r.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),r.prototype.dispose=function(){e.prototype.dispose.call(this),this.buffers.dispose()},r.prototype.resize=function(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:e,rows:t})},r.prototype.reset=function(){this.buffers.reset(),this.isUserScrolling=!1},r.prototype.scroll=function(e,t){void 0===t&&(t=!1);var r,i=this.buffer;(r=this._cachedBlankLine)&&r.length===this.cols&&r.getFg(0)===e.fg&&r.getBg(0)===e.bg||(r=i.getBlankLine(e,t),this._cachedBlankLine=r),r.isWrapped=t;var n=i.ybase+i.scrollTop,o=i.ybase+i.scrollBottom;if(0===i.scrollTop){var s=i.lines.isFull;o===i.lines.length-1?s?i.lines.recycle().copyFrom(r):i.lines.push(r.clone()):i.lines.splice(o+1,0,r.clone()),s?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++)}else{var a=o-n+1;i.lines.shiftElements(n+1,a-1,-1),i.lines.set(o,r.clone())}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp)},r.prototype.scrollLines=function(e,t,r){var i=this.buffer;if(e<0){if(0===i.ydisp)return;this.isUserScrolling=!0}else e+i.ydisp>=i.ybase&&(this.isUserScrolling=!1);var n=i.ydisp;i.ydisp=Math.max(Math.min(i.ydisp+e,i.ybase),0),n!==i.ydisp&&(t||this._onScroll.fire(i.ydisp))},r.prototype.scrollPages=function(e){this.scrollLines(e*(this.rows-1))},r.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp)},r.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)},r.prototype.scrollToLine=function(e){var t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t)},o([s(0,a.IOptionsService)],r)}(h.Disposable);t.BufferService=u},7994:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0;var r=function(){function e(){this.glevel=0,this._charsets=[]}return e.prototype.reset=function(){this.charset=void 0,this._charsets=[],this.glevel=0},e.prototype.setgLevel=function(e){this.glevel=e,this.charset=this._charsets[e]},e.prototype.setgCharset=function(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t)},e}();t.CharsetService=r},1753:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;var s=r(2585),a=r(8460),c={NONE:{events:0,restrict:function(){return!1}},X10:{events:1,restrict:function(e){return 4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)}},VT200:{events:19,restrict:function(e){return 32!==e.action}},DRAG:{events:23,restrict:function(e){return 32!==e.action||3!==e.button}},ANY:{events:31,restrict:function(e){return!0}}};function l(e,t){var r=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(r|=64,r|=e.action):(r|=3&e.button,4&e.button&&(r|=64),8&e.button&&(r|=128),32===e.action?r|=32:0!==e.action||t||(r|=3)),r}var h=String.fromCharCode,u={DEFAULT:function(e){var t=[l(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":"[M"+h(t[0])+h(t[1])+h(t[2])},SGR:function(e){var t=0===e.action&&4!==e.button?"m":"M";return"[<"+l(e,!0)+";"+e.col+";"+e.row+t}},f=function(){function e(e,t){var r,i,n,s;this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._onProtocolChange=new a.EventEmitter,this._lastEvent=null;try{for(var l=o(Object.keys(c)),h=l.next();!h.done;h=l.next()){var f=h.value;this.addProtocol(f,c[f])}}catch(e){r={error:e}}finally{try{h&&!h.done&&(i=l.return)&&i.call(l)}finally{if(r)throw r.error}}try{for(var _=o(Object.keys(u)),d=_.next();!d.done;d=_.next()){var p=d.value;this.addEncoding(p,u[p])}}catch(e){n={error:e}}finally{try{d&&!d.done&&(s=_.return)&&s.call(_)}finally{if(n)throw n.error}}this.reset()}return e.prototype.addProtocol=function(e,t){this._protocols[e]=t},e.prototype.addEncoding=function(e,t){this._encodings[e]=t},Object.defineProperty(e.prototype,"activeProtocol",{get:function(){return this._activeProtocol},set:function(e){if(!this._protocols[e])throw new Error('unknown protocol "'+e+'"');this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"areMouseEventsActive",{get:function(){return 0!==this._protocols[this._activeProtocol].events},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeEncoding",{get:function(){return this._activeEncoding},set:function(e){if(!this._encodings[e])throw new Error('unknown encoding "'+e+'"');this._activeEncoding=e},enumerable:!1,configurable:!0}),e.prototype.reset=function(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null},Object.defineProperty(e.prototype,"onProtocolChange",{get:function(){return this._onProtocolChange.event},enumerable:!1,configurable:!0}),e.prototype.triggerMouseEvent=function(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return!1;if(4===e.button&&32===e.action)return!1;if(3===e.button&&32!==e.action)return!1;if(4!==e.button&&(2===e.action||3===e.action))return!1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._compareEvents(this._lastEvent,e))return!1;if(!this._protocols[this._activeProtocol].restrict(e))return!1;var t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0},e.prototype.explainEvents=function(e){return{down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}},e.prototype._compareEvents=function(e,t){return e.col===t.col&&e.row===t.row&&e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift},i([n(0,s.IBufferService),n(1,s.ICoreService)],e)}();t.CoreMouseService=f},6975:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;var a=r(2585),c=r(8460),l=r(1439),h=r(844),u=Object.freeze({insertMode:!1}),f=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0}),_=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._bufferService=r,o._logService=i,o._optionsService=n,o.isCursorInitialized=!1,o.isCursorHidden=!1,o._onData=o.register(new c.EventEmitter),o._onUserInput=o.register(new c.EventEmitter),o._onBinary=o.register(new c.EventEmitter),o._scrollToBottom=t,o.register({dispose:function(){return o._scrollToBottom=void 0}}),o.modes=(0,l.clone)(u),o.decPrivateModes=(0,l.clone)(f),o}return n(t,e),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onUserInput",{get:function(){return this._onUserInput.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.modes=(0,l.clone)(u),this.decPrivateModes=(0,l.clone)(f)},t.prototype.triggerDataEvent=function(e,t){if(void 0===t&&(t=!1),!this._optionsService.rawOptions.disableStdin){var r=this._bufferService.buffer;r.ybase!==r.ydisp&&this._scrollToBottom(),t&&this._onUserInput.fire(),this._logService.debug('sending data "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onData.fire(e)}},t.prototype.triggerBinaryEvent=function(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug('sending binary "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onBinary.fire(e))},o([s(1,a.IBufferService),s(2,a.ILogService),s(3,a.IOptionsService)],t)}(h.Disposable);t.CoreService=_},9074:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__generator||function(e,t){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],i=0}finally{r=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DecorationService=void 0;var a=r(8055),c=r(8460),l=r(844),h=r(6106),u=function(e){function t(){var t=e.call(this)||this;return t._decorations=new h.SortedList((function(e){return e.marker.line})),t._onDecorationRegistered=t.register(new c.EventEmitter),t._onDecorationRemoved=t.register(new c.EventEmitter),t}return n(t,e),Object.defineProperty(t.prototype,"onDecorationRegistered",{get:function(){return this._onDecorationRegistered.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDecorationRemoved",{get:function(){return this._onDecorationRemoved.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"decorations",{get:function(){return this._decorations.values()},enumerable:!1,configurable:!0}),t.prototype.registerDecoration=function(e){var t=this;if(!e.marker.isDisposed){var r=new f(e);if(r){var i=r.marker.onDispose((function(){return r.dispose()}));r.onDispose((function(){r&&(t._decorations.delete(r)&&t._onDecorationRemoved.fire(r),i.dispose())})),this._decorations.insert(r),this._onDecorationRegistered.fire(r)}return r}},t.prototype.reset=function(){var e,t;try{for(var r=s(this._decorations.values()),i=r.next();!i.done;i=r.next())i.value.dispose()}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}this._decorations.clear()},t.prototype.getDecorationsAtLine=function(e){return o(this,(function(t){return[2,this._decorations.getKeyIterator(e)]}))},t.prototype.getDecorationsAtCell=function(e,t,r){var i,n,a,c,l,h,u,f,_,d,p;return o(this,(function(o){switch(o.label){case 0:i=0,n=0,o.label=1;case 1:o.trys.push([1,6,7,8]),a=s(this._decorations.getKeyIterator(t)),c=a.next(),o.label=2;case 2:return c.done?[3,5]:(l=c.value,i=null!==(_=l.options.x)&&void 0!==_?_:0,n=i+(null!==(d=l.options.width)&&void 0!==d?d:1),!(e>=i&&e<n)||r&&(null!==(p=l.options.layer)&&void 0!==p?p:"bottom")!==r?[3,4]:[4,l]);case 3:o.sent(),o.label=4;case 4:return c=a.next(),[3,2];case 5:return[3,8];case 6:return h=o.sent(),u={error:h},[3,8];case 7:try{c&&!c.done&&(f=a.return)&&f.call(a)}finally{if(u)throw u.error}return[7];case 8:return[2]}}))},t.prototype.dispose=function(){var e,t;try{for(var r=s(this._decorations.values()),i=r.next();!i.done;i=r.next()){var n=i.value;this._onDecorationRemoved.fire(n)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}this.reset()},t}(l.Disposable);t.DecorationService=u;var f=function(e){function t(t){var r=e.call(this)||this;return r.options=t,r.isDisposed=!1,r.onRenderEmitter=r.register(new c.EventEmitter),r.onRender=r.onRenderEmitter.event,r._onDispose=r.register(new c.EventEmitter),r.onDispose=r._onDispose.event,r._cachedBg=null,r._cachedFg=null,r.marker=t.marker,r.options.overviewRulerOptions&&!r.options.overviewRulerOptions.position&&(r.options.overviewRulerOptions.position="full"),r}return n(t,e),Object.defineProperty(t.prototype,"backgroundColorRGB",{get:function(){return null===this._cachedBg&&(this.options.backgroundColor?this._cachedBg=a.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"foregroundColorRGB",{get:function(){return null===this._cachedFg&&(this.options.foregroundColor?this._cachedFg=a.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this._onDispose.fire(),e.prototype.dispose.call(this))},t}(l.Disposable)},3730:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DirtyRowService=void 0;var o=r(2585),s=function(){function e(e){this._bufferService=e,this.clearRange()}return Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),e.prototype.clearRange=function(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y},e.prototype.markDirty=function(e){e<this._start?this._start=e:e>this._end&&(this._end=e)},e.prototype.markRangeDirty=function(e,t){if(e>t){var r=e;e=t,t=r}e<this._start&&(this._start=e),t>this._end&&(this._end=t)},e.prototype.markAllDirty=function(){this.markRangeDirty(0,this._bufferService.rows-1)},i([n(0,o.IBufferService)],e)}();t.DirtyRowService=s},4348:function(e,t,r){var i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;var s=r(2585),a=r(8343),c=function(){function e(){for(var e,t,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];this._entries=new Map;try{for(var s=i(r),a=s.next();!a.done;a=s.next()){var c=n(a.value,2),l=c[0],h=c[1];this.set(l,h)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}}return e.prototype.set=function(e,t){var r=this._entries.get(e);return this._entries.set(e,t),r},e.prototype.forEach=function(e){this._entries.forEach((function(t,r){return e(r,t)}))},e.prototype.has=function(e){return this._entries.has(e)},e.prototype.get=function(e){return this._entries.get(e)},e}();t.ServiceCollection=c;var l=function(){function e(){this._services=new c,this._services.set(s.IInstantiationService,this)}return e.prototype.setService=function(e,t){this._services.set(e,t)},e.prototype.getService=function(e){return this._services.get(e)},e.prototype.createInstance=function(e){for(var t,r,s=[],c=1;c<arguments.length;c++)s[c-1]=arguments[c];var l=(0,a.getServiceDependencies)(e).sort((function(e,t){return e.index-t.index})),h=[];try{for(var u=i(l),f=u.next();!f.done;f=u.next()){var _=f.value,d=this._services.get(_.id);if(!d)throw new Error("[createInstance] "+e.name+" depends on UNKNOWN service "+_.id+".");h.push(d)}}catch(e){t={error:e}}finally{try{f&&!f.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}var p=l.length>0?l[0].index:s.length;if(s.length!==p)throw new Error("[createInstance] First service dependency of "+e.name+" at position "+(p+1)+" conflicts with "+s.length+" static arguments");return new(e.bind.apply(e,o([void 0],n(o(o([],n(s),!1),n(h),!1)),!1)))},e}();t.InstantiationService=l},7866:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},s=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.LogService=void 0;var a=r(2585),c={debug:a.LogLevelEnum.DEBUG,info:a.LogLevelEnum.INFO,warn:a.LogLevelEnum.WARN,error:a.LogLevelEnum.ERROR,off:a.LogLevelEnum.OFF},l=function(){function e(e){var t=this;this._optionsService=e,this.logLevel=a.LogLevelEnum.OFF,this._updateLogLevel(),this._optionsService.onOptionChange((function(e){"logLevel"===e&&t._updateLogLevel()}))}return e.prototype._updateLogLevel=function(){this.logLevel=c[this._optionsService.rawOptions.logLevel]},e.prototype._evalLazyOptionalParams=function(e){for(var t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]())},e.prototype._log=function(e,t,r){this._evalLazyOptionalParams(r),e.call.apply(e,s([console,"xterm.js: "+t],o(r),!1))},e.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.DEBUG&&this._log(console.log,e,t)},e.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.INFO&&this._log(console.info,e,t)},e.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.WARN&&this._log(console.warn,e,t)},e.prototype.error=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.ERROR&&this._log(console.error,e,t)},i([n(0,a.IOptionsService)],e)}();t.LogService=l},7302:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=t.DEFAULT_BELL_SOUND=void 0;var n=r(8460),o=r(6114);t.DEFAULT_BELL_SOUND="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,customGlyphs:!0,bellSound:t.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,linkTooltipHoverDuration:500,letterSpacing:0,logLevel:"info",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!0,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:o.isMac,rendererType:"canvas",windowOptions:{},windowsMode:!1,wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1,overviewRulerWidth:void 0};var s=["normal","bold","100","200","300","400","500","600","700","800","900"],a=function(){function e(e){this._onOptionChange=new n.EventEmitter;var r=i({},t.DEFAULT_OPTIONS);for(var o in e)if(o in r)try{var s=e[o];r[o]=this._sanitizeAndValidateOption(o,s)}catch(e){console.error(e)}this.rawOptions=r,this.options=i({},r),this._setupOptions()}return Object.defineProperty(e.prototype,"onOptionChange",{get:function(){return this._onOptionChange.event},enumerable:!1,configurable:!0}),e.prototype._setupOptions=function(){var e=this,r=function(r){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');return e.rawOptions[r]},i=function(r,i){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');i=e._sanitizeAndValidateOption(r,i),e.rawOptions[r]!==i&&(e.rawOptions[r]=i,e._onOptionChange.fire(r))};for(var n in this.rawOptions){var o={get:r.bind(this,n),set:i.bind(this,n)};Object.defineProperty(this.options,n,o)}},e.prototype.setOption=function(e,t){this.options[e]=t},e.prototype._sanitizeAndValidateOption=function(e,r){switch(e){case"bellStyle":case"cursorStyle":case"rendererType":case"wordSeparator":r||(r=t.DEFAULT_OPTIONS[e]);break;case"fontWeight":case"fontWeightBold":if("number"==typeof r&&1<=r&&r<=1e3)break;r=s.includes(r)?r:t.DEFAULT_OPTIONS[e];break;case"cursorWidth":r=Math.floor(r);case"lineHeight":case"tabStopWidth":if(r<1)throw new Error(e+" cannot be less than 1, value: "+r);break;case"minimumContrastRatio":r=Math.max(1,Math.min(21,Math.round(10*r)/10));break;case"scrollback":if((r=Math.min(r,4294967295))<0)throw new Error(e+" cannot be less than 0, value: "+r);break;case"fastScrollSensitivity":case"scrollSensitivity":if(r<=0)throw new Error(e+" cannot be less than or equal to 0, value: "+r);case"rows":case"cols":if(!r&&0!==r)throw new Error(e+" must be numeric, value: "+r)}return r},e.prototype.getOption=function(e){return this.options[e]},e}();t.OptionsService=a},8343:(e,t)=>{function r(e,t,r){t.di$target===t?t.di$dependencies.push({id:e,index:r}):(t.di$dependencies=[{id:e,index:r}],t.di$target=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0,t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);var i=function(e,t,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");r(i,e,n)};return i.toString=function(){return e},t.serviceRegistry.set(e,i),i}},2585:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IDecorationService=t.IUnicodeService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.IDirtyRowService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;var i,n=r(8343);t.IBufferService=(0,n.createDecorator)("BufferService"),t.ICoreMouseService=(0,n.createDecorator)("CoreMouseService"),t.ICoreService=(0,n.createDecorator)("CoreService"),t.ICharsetService=(0,n.createDecorator)("CharsetService"),t.IDirtyRowService=(0,n.createDecorator)("DirtyRowService"),t.IInstantiationService=(0,n.createDecorator)("InstantiationService"),(i=t.LogLevelEnum||(t.LogLevelEnum={}))[i.DEBUG=0]="DEBUG",i[i.INFO=1]="INFO",i[i.WARN=2]="WARN",i[i.ERROR=3]="ERROR",i[i.OFF=4]="OFF",t.ILogService=(0,n.createDecorator)("LogService"),t.IOptionsService=(0,n.createDecorator)("OptionsService"),t.IUnicodeService=(0,n.createDecorator)("UnicodeService"),t.IDecorationService=(0,n.createDecorator)("DecorationService")},1480:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;var i=r(8460),n=r(225),o=function(){function e(){this._providers=Object.create(null),this._active="",this._onChange=new i.EventEmitter;var e=new n.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e}return Object.defineProperty(e.prototype,"onChange",{get:function(){return this._onChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"versions",{get:function(){return Object.keys(this._providers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._active},set:function(e){if(!this._providers[e])throw new Error('unknown Unicode version "'+e+'"');this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e)},enumerable:!1,configurable:!0}),e.prototype.register=function(e){this._providers[e.version]=e},e.prototype.wcwidth=function(e){return this._activeProvider.wcwidth(e)},e.prototype.getStringCellWidth=function(e){for(var t=0,r=e.length,i=0;i<r;++i){var n=e.charCodeAt(i);if(55296<=n&&n<=56319){if(++i>=r)return t+this.wcwidth(n);var o=e.charCodeAt(i);56320<=o&&o<=57343?n=1024*(n-55296)+o-56320+65536:t+=this.wcwidth(o)}t+=this.wcwidth(n)}return t},e}();t.UnicodeService=o}},t={};return function r(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,r),o.exports}(4389)})()}));
//# sourceMappingURL=xterm.js.map

/***/ }),

/***/ "./vendor/Broadway/Decoder.js":
/*!************************************!*\
  !*** ./vendor/Broadway/Decoder.js ***!
  \************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// universal module definition
(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
  
  var global;
  
  function initglobal(){
    global = this;
    if (!global){
      if (typeof window != "undefined"){
        global = window;
      }else if (typeof self != "undefined"){
        global = self;
      };
    };
  };
  initglobal();
  
  
  function error(message) {
    console.error(message);
    console.trace();
  };

  
  function assert(condition, message) {
    if (!condition) {
      error(message);
    };
  };
  
  
  
  
  var getModule = function(par_broadwayOnHeadersDecoded, par_broadwayOnPictureDecoded){
    
    
    /*var ModuleX = {
      'print': function(text) { console.log('stdout: ' + text); },
      'printErr': function(text) { console.log('stderr: ' + text); }
    };*/
    
    
    /*
    
      The reason why this is all packed into one file is that this file can also function as worker.
      you can integrate the file into your build system and provide the original file to be loaded into a worker.
    
    */
    
    //var Module = (function(){
    
    
var Module=typeof Module!=="undefined"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof null==="function"&&0&&0;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=(null)("fs");if(!nodePath)nodePath=(null)("path");filename=nodePath["normalize"](filename);ret=nodeFS["readFileSync"](filename);return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}Module["arguments"]=process["argv"].slice(2);if(true){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process["on"]("unhandledRejection",(function(reason,p){process["exit"](1)}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){Module["read"]=function shell_read(f){return read(f)}}Module["readBinary"]=function readBinary(f){var data;if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof quit==="function"){Module["quit"]=(function(status,toThrow){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module["setWindowTitle"]=(function(title){document.title=title})}else{throw new Error("not compiled for this environment")}Module["print"]=typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null;Module["printErr"]=typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||Module["print"];Module.print=Module["print"];Module.printErr=Module["printErr"];for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){assert(!staticSealed);var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}var asm2wasmImports={"f64-rem":(function(x,y){return x%y}),"debugger":(function(){debugger})};var functionPointers=new Array(0);var GLOBAL_BASE=1024;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||52428800;if(TOTAL_MEMORY<TOTAL_STACK)Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){Module["wasmMemory"]=new WebAssembly.Memory({"initial":TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module["wasmMemory"].buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_max=Math.max;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile="avc.wast";var wasmBinaryFile="avc.wasm";var asmjsCodeFile="avc.temp.asm.js";if(typeof Module["locateFile"]==="function"){if(!isDataURI(wasmTextFile)){wasmTextFile=Module["locateFile"](wasmTextFile)}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=Module["locateFile"](wasmBinaryFile)}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=Module["locateFile"](asmjsCodeFile)}}var wasmPageSize=64*1024;var info={"global":null,"env":null,"asm2wasm":asm2wasmImports,"parent":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module["buffer"];if(newBuffer.byteLength<oldBuffer.byteLength){Module["printErr"]("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here")}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews()}function fixImports(imports){return imports}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()})).catch((function(){return getBinary()}))}return new Promise((function(resolve,reject){resolve(getBinary())}))}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!=="object"){Module["printErr"]("no native wasm support detected");return false}if(!(Module["wasmMemory"]instanceof WebAssembly.Memory)){Module["printErr"]("no native wasm Memory in use");return false}env["memory"]=Module["wasmMemory"];info["global"]={"NaN":NaN,"Infinity":Infinity};info["global.Math"]=Math;info["env"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module["asm"]=exports;Module["usingWasm"]=true;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){Module["printErr"]("Module.instantiateWasm callback failed with error: "+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output["instance"],output["module"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver).catch((function(reason){Module["printErr"]("failed to asynchronously prepare wasm: "+reason);abort(reason)}))}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource).catch((function(reason){Module["printErr"]("wasm streaming compile failed: "+reason);Module["printErr"]("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)}))}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module["asmPreload"]=Module["asm"];var asmjsReallocBuffer=Module["reallocBuffer"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module["buffer"];var oldSize=old.byteLength;if(Module["usingWasm"]){try{var result=Module["wasmMemory"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module["buffer"]=Module["wasmMemory"].buffer}else{return null}}catch(e){return null}}});Module["reallocBuffer"]=(function(size){if(finalMethod==="asmjs"){return asmjsReallocBuffer(size)}else{return wasmReallocBuffer(size)}});var finalMethod="";Module["asm"]=(function(global,env,providedBuffer){env=fixImports(env);if(!env["table"]){var TABLE_SIZE=Module["wasmTableSize"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module["wasmMaxTableSize"];if(typeof WebAssembly==="object"&&typeof WebAssembly.Table==="function"){if(MAX_TABLE_SIZE!==undefined){env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,"maximum":MAX_TABLE_SIZE,"element":"anyfunc"})}else{env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,element:"anyfunc"})}}else{env["table"]=new Array(TABLE_SIZE)}Module["wasmTable"]=env["table"]}if(!env["memoryBase"]){env["memoryBase"]=Module["STATIC_BASE"]}if(!env["tableBase"]){env["tableBase"]=0}var exports;exports=doNativeWasm(global,env,providedBuffer);assert(exports,"no binaryen method succeeded.");return exports})}integrateWasmJS();STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+9888;__ATINIT__.push();var STATIC_BUMP=9888;Module["STATIC_BASE"]=STATIC_BASE;Module["STATIC_BUMP"]=STATIC_BUMP;STATICTOP+=16;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffers){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?Module["print"]:Module["printErr"])(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _broadwayOnHeadersDecoded(){par_broadwayOnHeadersDecoded()}Module["_broadwayOnHeadersDecoded"]=_broadwayOnHeadersDecoded;function _broadwayOnPictureDecoded($buffer,width,height){par_broadwayOnPictureDecoded($buffer,width,height)}Module["_broadwayOnPictureDecoded"]=_broadwayOnPictureDecoded;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;Module["wasmTableSize"]=10;Module["wasmMaxTableSize"]=10;Module.asmGlobalArg={};Module.asmLibraryArg={"abort":abort,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"___setErrNo":___setErrNo,"___syscall140":___syscall140,"___syscall146":___syscall146,"___syscall54":___syscall54,"___syscall6":___syscall6,"_broadwayOnHeadersDecoded":_broadwayOnHeadersDecoded,"_broadwayOnPictureDecoded":_broadwayOnPictureDecoded,"_emscripten_memcpy_big":_emscripten_memcpy_big,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"STACKTOP":STACKTOP};var asm=Module["asm"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);Module["asm"]=asm;var _broadwayCreateStream=Module["_broadwayCreateStream"]=(function(){return Module["asm"]["_broadwayCreateStream"].apply(null,arguments)});var _broadwayExit=Module["_broadwayExit"]=(function(){return Module["asm"]["_broadwayExit"].apply(null,arguments)});var _broadwayGetMajorVersion=Module["_broadwayGetMajorVersion"]=(function(){return Module["asm"]["_broadwayGetMajorVersion"].apply(null,arguments)});var _broadwayGetMinorVersion=Module["_broadwayGetMinorVersion"]=(function(){return Module["asm"]["_broadwayGetMinorVersion"].apply(null,arguments)});var _broadwayInit=Module["_broadwayInit"]=(function(){return Module["asm"]["_broadwayInit"].apply(null,arguments)});var _broadwayPlayStream=Module["_broadwayPlayStream"]=(function(){return Module["asm"]["_broadwayPlayStream"].apply(null,arguments)});Module["asm"]=asm;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]&&status===0){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}Module["quit"](status,new ExitStatus(status))}Module["exit"]=exit;function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run()



    //   return Module;
    //})();
    
    var resultModule;
    if (typeof global !== "undefined"){
      if (global.Module){
        resultModule = global.Module;
      };
    };
    if (typeof Module != "undefined"){
      resultModule = Module;
    };

    resultModule._broadwayOnHeadersDecoded = par_broadwayOnHeadersDecoded;
    resultModule._broadwayOnPictureDecoded = par_broadwayOnPictureDecoded;
    
    var moduleIsReady = false;
    var cbFun;
    var moduleReady = function(){
      moduleIsReady = true;
      if (cbFun){
        cbFun(resultModule);
      }
    };
    
    resultModule.onRuntimeInitialized = function(){
      moduleReady(resultModule);
    };
    return function(callback){
      if (moduleIsReady){
        callback(resultModule);
      }else{
        cbFun = callback;
      };
    };
  };

  return (function(){
    "use strict";
  
  
  var nowValue = function(){
    return (new Date()).getTime();
  };
  
  if (typeof performance != "undefined"){
    if (performance.now){
      nowValue = function(){
        return performance.now();
      };
    };
  };
  
  
  var Decoder = function(parOptions){
    this.options = parOptions || {};
    
    this.now = nowValue;
    
    var asmInstance;
    
    var fakeWindow = {
    };
    
    var toU8Array;
    var toU32Array;
    
    var onPicFun = function ($buffer, width, height) {
      var buffer = this.pictureBuffers[$buffer];
      if (!buffer) {
        buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);
      };
      
      var infos;
      var doInfo = false;
      if (this.infoAr.length){
        doInfo = true;
        infos = this.infoAr;
      };
      this.infoAr = [];
      
      if (this.options.rgb){
        if (!asmInstance){
          asmInstance = getAsm(width, height);
        };
        asmInstance.inp.set(buffer);
        asmInstance.doit();

        var copyU8 = new Uint8Array(asmInstance.outSize);
        copyU8.set( asmInstance.out );
        
        if (doInfo){
          infos[0].finishDecoding = nowValue();
        };
        
        this.onPictureDecoded(copyU8, width, height, infos);
        return;
        
      };
      
      if (doInfo){
        infos[0].finishDecoding = nowValue();
      };
      this.onPictureDecoded(buffer, width, height, infos);
    }.bind(this);
    
    var ignore = false;
    
    if (this.options.sliceMode){
      onPicFun = function ($buffer, width, height, $sliceInfo) {
        if (ignore){
          return;
        };
        var buffer = this.pictureBuffers[$buffer];
        if (!buffer) {
          buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);
        };
        var sliceInfo = this.pictureBuffers[$sliceInfo];
        if (!sliceInfo) {
          sliceInfo = this.pictureBuffers[$sliceInfo] = toU32Array($sliceInfo, 18);
        };

        var infos;
        var doInfo = false;
        if (this.infoAr.length){
          doInfo = true;
          infos = this.infoAr;
        };
        this.infoAr = [];

        /*if (this.options.rgb){
        
        no rgb in slice mode

        };*/

        infos[0].finishDecoding = nowValue();
        var sliceInfoAr = [];
        for (var i = 0; i < 20; ++i){
          sliceInfoAr.push(sliceInfo[i]);
        };
        infos[0].sliceInfoAr = sliceInfoAr;

        this.onPictureDecoded(buffer, width, height, infos);
      }.bind(this);
    };
    
    var ModuleCallback = getModule.apply(fakeWindow, [function () {
    }, onPicFun]);
    

    var MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;
    
    var instance = this;
    this.onPictureDecoded = function (buffer, width, height, infos) {

    };
    
    this.onDecoderReady = function(){};
    
    var bufferedCalls = [];
    this.decode = function decode(typedAr, parInfo, copyDoneFun) {
      bufferedCalls.push([typedAr, parInfo, copyDoneFun]);
    };
    
    ModuleCallback(function(Module){
      var HEAP8 = Module.HEAP8;
      var HEAPU8 = Module.HEAPU8;
      var HEAP16 = Module.HEAP16;
      var HEAP32 = Module.HEAP32;
      // from old constructor
      Module._broadwayInit();
      
      /**
     * Creates a typed array from a HEAP8 pointer. 
     */
      toU8Array = function(ptr, length) {
        return HEAPU8.subarray(ptr, ptr + length);
      };
      toU32Array = function(ptr, length) {
        //var tmp = HEAPU8.subarray(ptr, ptr + (length * 4));
        return new Uint32Array(HEAPU8.buffer, ptr, length);
      };
      instance.streamBuffer = toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);
      instance.pictureBuffers = {};
      // collect extra infos that are provided with the nal units
      instance.infoAr = [];

      /**
     * Decodes a stream buffer. This may be one single (unframed) NAL unit without the
     * start code, or a sequence of NAL units with framing start code prefixes. This
     * function overwrites stream buffer allocated by the codec with the supplied buffer.
     */

      var sliceNum = 0;
      if (instance.options.sliceMode){
        sliceNum = instance.options.sliceNum;

        instance.decode = function decode(typedAr, parInfo, copyDoneFun) {
          instance.infoAr.push(parInfo);
          parInfo.startDecoding = nowValue();
          var nals = parInfo.nals;
          var i;
          if (!nals){
            nals = [];
            parInfo.nals = nals;
            var l = typedAr.length;
            var foundSomething = false;
            var lastFound = 0;
            var lastStart = 0;
            for (i = 0; i < l; ++i){
              if (typedAr[i] === 1){
                if (
                  typedAr[i - 1] === 0 &&
                  typedAr[i - 2] === 0
                ){
                  var startPos = i - 2;
                  if (typedAr[i - 3] === 0){
                    startPos = i - 3;
                  };
                  // its a nal;
                  if (foundSomething){
                    nals.push({
                      offset: lastFound,
                      end: startPos,
                      type: typedAr[lastStart] & 31
                    });
                  };
                  lastFound = startPos;
                  lastStart = startPos + 3;
                  if (typedAr[i - 3] === 0){
                    lastStart = startPos + 4;
                  };
                  foundSomething = true;
                };
              };
            };
            if (foundSomething){
              nals.push({
                offset: lastFound,
                end: i,
                type: typedAr[lastStart] & 31
              });
            };
          };

          var currentSlice = 0;
          var playAr;
          var offset = 0;
          for (i = 0; i < nals.length; ++i){
            if (nals[i].type === 1 || nals[i].type === 5){
              if (currentSlice === sliceNum){
                playAr = typedAr.subarray(nals[i].offset, nals[i].end);
                instance.streamBuffer[offset] = 0;
                offset += 1;
                instance.streamBuffer.set(playAr, offset);
                offset += playAr.length;
              };
              currentSlice += 1;
            }else{
              playAr = typedAr.subarray(nals[i].offset, nals[i].end);
              instance.streamBuffer[offset] = 0;
              offset += 1;
              instance.streamBuffer.set(playAr, offset);
              offset += playAr.length;
              Module._broadwayPlayStream(offset);
              offset = 0;
            };
          };
          copyDoneFun();
          Module._broadwayPlayStream(offset);
        };

      }else{
        instance.decode = function decode(typedAr, parInfo) {
          // console.info("Decoding: " + buffer.length);
          // collect infos
          if (parInfo){
            instance.infoAr.push(parInfo);
            parInfo.startDecoding = nowValue();
          };

          instance.streamBuffer.set(typedAr);
          Module._broadwayPlayStream(typedAr.length);
        };
      };
      
      if (bufferedCalls.length){
        var bi = 0;
        for (bi = 0; bi < bufferedCalls.length; ++bi){
          instance.decode(bufferedCalls[bi][0], bufferedCalls[bi][1], bufferedCalls[bi][2]);
        };
        bufferedCalls = [];
      };
      
      instance.onDecoderReady(instance);

    });
  

  };

  
  Decoder.prototype = {
    
  };
  
  
  
  
  /*
  
    asm.js implementation of a yuv to rgb convertor
    provided by @soliton4
    
    based on 
    http://www.wordsaretoys.com/2013/10/18/making-yuv-conversion-a-little-faster/
  
  */
  
  
  // factory to create asm.js yuv -> rgb convertor for a given resolution
  var asmInstances = {};
  var getAsm = function(parWidth, parHeight){
    var idStr = "" + parWidth + "x" + parHeight;
    if (asmInstances[idStr]){
      return asmInstances[idStr];
    };

    var lumaSize = parWidth * parHeight;
    var chromaSize = (lumaSize|0) >> 2;

    var inpSize = lumaSize + chromaSize + chromaSize;
    var outSize = parWidth * parHeight * 4;
    var cacheSize = Math.pow(2, 24) * 4;
    var size = inpSize + outSize + cacheSize;

    var chunkSize = Math.pow(2, 24);
    var heapSize = chunkSize;
    while (heapSize < size){
      heapSize += chunkSize;
    };
    var heap = new ArrayBuffer(heapSize);

    var res = asmFactory(global, {}, heap);
    res.init(parWidth, parHeight);
    asmInstances[idStr] = res;

    res.heap = heap;
    res.out = new Uint8Array(heap, 0, outSize);
    res.inp = new Uint8Array(heap, outSize, inpSize);
    res.outSize = outSize;

    return res;
  };


  function asmFactory(stdlib, foreign, heap) {
    "use asm";

    var imul = stdlib.Math.imul;
    var min = stdlib.Math.min;
    var max = stdlib.Math.max;
    var pow = stdlib.Math.pow;
    var out = new stdlib.Uint8Array(heap);
    var out32 = new stdlib.Uint32Array(heap);
    var inp = new stdlib.Uint8Array(heap);
    var mem = new stdlib.Uint8Array(heap);
    var mem32 = new stdlib.Uint32Array(heap);

    // for double algo
    /*var vt = 1.370705;
    var gt = 0.698001;
    var gt2 = 0.337633;
    var bt = 1.732446;*/

    var width = 0;
    var height = 0;
    var lumaSize = 0;
    var chromaSize = 0;
    var inpSize = 0;
    var outSize = 0;

    var inpStart = 0;
    var outStart = 0;

    var widthFour = 0;

    var cacheStart = 0;


    function init(parWidth, parHeight){
      parWidth = parWidth|0;
      parHeight = parHeight|0;

      var i = 0;
      var s = 0;

      width = parWidth;
      widthFour = imul(parWidth, 4)|0;
      height = parHeight;
      lumaSize = imul(width|0, height|0)|0;
      chromaSize = (lumaSize|0) >> 2;
      outSize = imul(imul(width, height)|0, 4)|0;
      inpSize = ((lumaSize + chromaSize)|0 + chromaSize)|0;

      outStart = 0;
      inpStart = (outStart + outSize)|0;
      cacheStart = (inpStart + inpSize)|0;

      // initializing memory (to be on the safe side)
      s = ~~(+pow(+2, +24));
      s = imul(s, 4)|0;

      for (i = 0|0; ((i|0) < (s|0))|0; i = (i + 4)|0){
        mem32[((cacheStart + i)|0) >> 2] = 0;
      };
    };

    function doit(){
      var ystart = 0;
      var ustart = 0;
      var vstart = 0;

      var y = 0;
      var yn = 0;
      var u = 0;
      var v = 0;

      var o = 0;

      var line = 0;
      var col = 0;

      var usave = 0;
      var vsave = 0;

      var ostart = 0;
      var cacheAdr = 0;

      ostart = outStart|0;

      ystart = inpStart|0;
      ustart = (ystart + lumaSize|0)|0;
      vstart = (ustart + chromaSize)|0;

      for (line = 0; (line|0) < (height|0); line = (line + 2)|0){
        usave = ustart;
        vsave = vstart;
        for (col = 0; (col|0) < (width|0); col = (col + 2)|0){
          y = inp[ystart >> 0]|0;
          yn = inp[((ystart + width)|0) >> 0]|0;

          u = inp[ustart >> 0]|0;
          v = inp[vstart >> 0]|0;

          cacheAdr = (((((y << 16)|0) + ((u << 8)|0))|0) + v)|0;
          o = mem32[((cacheStart + cacheAdr)|0) >> 2]|0;
          if (o){}else{
            o = yuv2rgbcalc(y,u,v)|0;
            mem32[((cacheStart + cacheAdr)|0) >> 2] = o|0;
          };
          mem32[ostart >> 2] = o;

          cacheAdr = (((((yn << 16)|0) + ((u << 8)|0))|0) + v)|0;
          o = mem32[((cacheStart + cacheAdr)|0) >> 2]|0;
          if (o){}else{
            o = yuv2rgbcalc(yn,u,v)|0;
            mem32[((cacheStart + cacheAdr)|0) >> 2] = o|0;
          };
          mem32[((ostart + widthFour)|0) >> 2] = o;

          //yuv2rgb5(y, u, v, ostart);
          //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
          ostart = (ostart + 4)|0;

          // next step only for y. u and v stay the same
          ystart = (ystart + 1)|0;
          y = inp[ystart >> 0]|0;
          yn = inp[((ystart + width)|0) >> 0]|0;

          //yuv2rgb5(y, u, v, ostart);
          cacheAdr = (((((y << 16)|0) + ((u << 8)|0))|0) + v)|0;
          o = mem32[((cacheStart + cacheAdr)|0) >> 2]|0;
          if (o){}else{
            o = yuv2rgbcalc(y,u,v)|0;
            mem32[((cacheStart + cacheAdr)|0) >> 2] = o|0;
          };
          mem32[ostart >> 2] = o;

          //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
          cacheAdr = (((((yn << 16)|0) + ((u << 8)|0))|0) + v)|0;
          o = mem32[((cacheStart + cacheAdr)|0) >> 2]|0;
          if (o){}else{
            o = yuv2rgbcalc(yn,u,v)|0;
            mem32[((cacheStart + cacheAdr)|0) >> 2] = o|0;
          };
          mem32[((ostart + widthFour)|0) >> 2] = o;
          ostart = (ostart + 4)|0;

          //all positions inc 1

          ystart = (ystart + 1)|0;
          ustart = (ustart + 1)|0;
          vstart = (vstart + 1)|0;
        };
        ostart = (ostart + widthFour)|0;
        ystart = (ystart + width)|0;

      };

    };

    function yuv2rgbcalc(y, u, v){
      y = y|0;
      u = u|0;
      v = v|0;

      var r = 0;
      var g = 0;
      var b = 0;

      var o = 0;

      var a0 = 0;
      var a1 = 0;
      var a2 = 0;
      var a3 = 0;
      var a4 = 0;

      a0 = imul(1192, (y - 16)|0)|0;
      a1 = imul(1634, (v - 128)|0)|0;
      a2 = imul(832, (v - 128)|0)|0;
      a3 = imul(400, (u - 128)|0)|0;
      a4 = imul(2066, (u - 128)|0)|0;

      r = (((a0 + a1)|0) >> 10)|0;
      g = (((((a0 - a2)|0) - a3)|0) >> 10)|0;
      b = (((a0 + a4)|0) >> 10)|0;

      if ((((r & 255)|0) != (r|0))|0){
        r = min(255, max(0, r|0)|0)|0;
      };
      if ((((g & 255)|0) != (g|0))|0){
        g = min(255, max(0, g|0)|0)|0;
      };
      if ((((b & 255)|0) != (b|0))|0){
        b = min(255, max(0, b|0)|0)|0;
      };

      o = 255;
      o = (o << 8)|0;
      o = (o + b)|0;
      o = (o << 8)|0;
      o = (o + g)|0;
      o = (o << 8)|0;
      o = (o + r)|0;

      return o|0;

    };



    return {
      init: init,
      doit: doit
    };
  };

  
  /*
    potential worker initialization
  
  */
  
  
  if (typeof self != "undefined"){
    var isWorker = false;
    var decoder;
    var reuseMemory = false;
    var sliceMode = false;
    var sliceNum = 0;
    var sliceCnt = 0;
    var lastSliceNum = 0;
    var sliceInfoAr;
    var lastBuf;
    var awaiting = 0;
    var pile = [];
    var startDecoding;
    var finishDecoding;
    var timeDecoding;
    
    var memAr = [];
    var getMem = function(length){
      if (memAr.length){
        var u = memAr.shift();
        while (u && u.byteLength !== length){
          u = memAr.shift();
        };
        if (u){
          return u;
        };
      };
      return new ArrayBuffer(length);
    }; 
    
    var copySlice = function(source, target, infoAr, width, height){
      
      var length = width * height;
      var length4 = length / 4
      var plane2 = length;
      var plane3 = length + length4;
      
      var copy16 = function(parBegin, parEnd){
        var i = 0;
        for (i = 0; i < 16; ++i){
          var begin = parBegin + (width * i);
          var end = parEnd + (width * i)
          target.set(source.subarray(begin, end), begin);
        };
      };
      var copy8 = function(parBegin, parEnd){
        var i = 0;
        for (i = 0; i < 8; ++i){
          var begin = parBegin + ((width / 2) * i);
          var end = parEnd + ((width / 2) * i)
          target.set(source.subarray(begin, end), begin);
        };
      };
      var copyChunk = function(begin, end){
        target.set(source.subarray(begin, end), begin);
      };
      
      var begin = infoAr[0];
      var end = infoAr[1];
      if (end > 0){
        copy16(begin, end);
        copy8(infoAr[2], infoAr[3]);
        copy8(infoAr[4], infoAr[5]);
      };
      begin = infoAr[6];
      end = infoAr[7];
      if (end > 0){
        copy16(begin, end);
        copy8(infoAr[8], infoAr[9]);
        copy8(infoAr[10], infoAr[11]);
      };
      
      begin = infoAr[12];
      end = infoAr[15];
      if (end > 0){
        copyChunk(begin, end);
        copyChunk(infoAr[13], infoAr[16]);
        copyChunk(infoAr[14], infoAr[17]);
      };
      
    };
    
    var sliceMsgFun = function(){};
    
    var setSliceCnt = function(parSliceCnt){
      sliceCnt = parSliceCnt;
      lastSliceNum = sliceCnt - 1;
    };
    
    
    self.addEventListener('message', function(e) {
      
      if (isWorker){
        if (reuseMemory){
          if (e.data.reuse){
            memAr.push(e.data.reuse);
          };
        };
        if (e.data.buf){
          if (sliceMode && awaiting !== 0){
            pile.push(e.data);
          }else{
            decoder.decode(
              new Uint8Array(e.data.buf, e.data.offset || 0, e.data.length), 
              e.data.info, 
              function(){
                if (sliceMode && sliceNum !== lastSliceNum){
                  postMessage(e.data, [e.data.buf]);
                };
              }
            );
          };
          return;
        };
        
        if (e.data.slice){
          // update ref pic
          var copyStart = nowValue();
          copySlice(new Uint8Array(e.data.slice), lastBuf, e.data.infos[0].sliceInfoAr, e.data.width, e.data.height);
          // is it the one? then we need to update it
          if (e.data.theOne){
            copySlice(lastBuf, new Uint8Array(e.data.slice), sliceInfoAr, e.data.width, e.data.height);
            if (timeDecoding > e.data.infos[0].timeDecoding){
              e.data.infos[0].timeDecoding = timeDecoding;
            };
            e.data.infos[0].timeCopy += (nowValue() - copyStart);
          };
          // move on
          postMessage(e.data, [e.data.slice]);
          
          // next frame in the pipe?
          awaiting -= 1;
          if (awaiting === 0 && pile.length){
            var data = pile.shift();
            decoder.decode(
              new Uint8Array(data.buf, data.offset || 0, data.length), 
              data.info, 
              function(){
                if (sliceMode && sliceNum !== lastSliceNum){
                  postMessage(data, [data.buf]);
                };
              }
            );
          };
          return;
        };
        
        if (e.data.setSliceCnt){
          setSliceCnt(e.data.sliceCnt);
          return;
        };
        
      }else{
        if (e.data && e.data.type === "Broadway.js - Worker init"){
          isWorker = true;
          decoder = new Decoder(e.data.options);
          
          if (e.data.options.sliceMode){
            reuseMemory = true;
            sliceMode = true;
            sliceNum = e.data.options.sliceNum;
            setSliceCnt(e.data.options.sliceCnt);

            decoder.onPictureDecoded = function (buffer, width, height, infos) {
              
              // buffer needs to be copied because we give up ownership
              var copyU8 = new Uint8Array(getMem(buffer.length));
              copySlice(buffer, copyU8, infos[0].sliceInfoAr, width, height);
              
              startDecoding = infos[0].startDecoding;
              finishDecoding = infos[0].finishDecoding;
              timeDecoding = finishDecoding - startDecoding;
              infos[0].timeDecoding = timeDecoding;
              infos[0].timeCopy = 0;
              
              postMessage({
                slice: copyU8.buffer,
                sliceNum: sliceNum,
                width: width, 
                height: height, 
                infos: infos
              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership
              
              awaiting = sliceCnt - 1;
              
              lastBuf = buffer;
              sliceInfoAr = infos[0].sliceInfoAr;

            };
            
          }else if (e.data.options.reuseMemory){
            reuseMemory = true;
            decoder.onPictureDecoded = function (buffer, width, height, infos) {
              
              // buffer needs to be copied because we give up ownership
              var copyU8 = new Uint8Array(getMem(buffer.length));
              copyU8.set( buffer, 0, buffer.length );

              postMessage({
                buf: copyU8.buffer, 
                length: buffer.length,
                width: width, 
                height: height, 
                infos: infos
              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership

            };
            
          }else{
            decoder.onPictureDecoded = function (buffer, width, height, infos) {
              if (buffer) {
                buffer = new Uint8Array(buffer);
              };

              // buffer needs to be copied because we give up ownership
              var copyU8 = new Uint8Array(buffer.length);
              copyU8.set( buffer, 0, buffer.length );

              postMessage({
                buf: copyU8.buffer, 
                length: buffer.length,
                width: width, 
                height: height, 
                infos: infos
              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership

            };
          };
          postMessage({ consoleLog: "broadway worker initialized" });
        };
      };


    }, false);
  };
  
  Decoder.nowValue = nowValue;
  
  return Decoder;
  
  })();
  
  
}));



/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = fs;

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**************************!*\
  !*** ./src/app/index.ts ***!
  \**************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
__webpack_require__(/*! ../style/app.css */ "./src/style/app.css");
var StreamClientScrcpy_1 = __webpack_require__(/*! ./googDevice/client/StreamClientScrcpy */ "./src/app/googDevice/client/StreamClientScrcpy.ts");
var HostTracker_1 = __webpack_require__(/*! ./client/HostTracker */ "./src/app/client/HostTracker.ts");
window.onload = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var hash, parsedQuery, action, number, BroadwayPlayer, MsePlayer, TinyH264Player, WebCodecsPlayer, tools, ShellClient, DevtoolsClient, FileListingClient, DeviceTracker_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hash = location.hash.replace(/^#!/, '');
                    parsedQuery = new URLSearchParams(hash);
                    action = parsedQuery.get('action');
                    number = parsedQuery.get('number');
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./player/BroadwayPlayer */ "./src/app/player/BroadwayPlayer.ts")); })];
                case 1:
                    BroadwayPlayer = (_a.sent()).BroadwayPlayer;
                    StreamClientScrcpy_1.StreamClientScrcpy.registerPlayer(BroadwayPlayer);
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./player/MsePlayer */ "./src/app/player/MsePlayer.ts")); })];
                case 2:
                    MsePlayer = (_a.sent()).MsePlayer;
                    StreamClientScrcpy_1.StreamClientScrcpy.registerPlayer(MsePlayer);
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./player/TinyH264Player */ "./src/app/player/TinyH264Player.ts")); })];
                case 3:
                    TinyH264Player = (_a.sent()).TinyH264Player;
                    StreamClientScrcpy_1.StreamClientScrcpy.registerPlayer(TinyH264Player);
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./player/WebCodecsPlayer */ "./src/app/player/WebCodecsPlayer.ts")); })];
                case 4:
                    WebCodecsPlayer = (_a.sent()).WebCodecsPlayer;
                    StreamClientScrcpy_1.StreamClientScrcpy.registerPlayer(WebCodecsPlayer);
                    if (action === StreamClientScrcpy_1.StreamClientScrcpy.ACTION && typeof parsedQuery.get('udid') === 'string') {
                        document.title = "".concat(number, " + ").concat(parsedQuery.get('udid'));
                        StreamClientScrcpy_1.StreamClientScrcpy.start(parsedQuery);
                        return [2];
                    }
                    tools = [];
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./googDevice/client/ShellClient */ "./src/app/googDevice/client/ShellClient.ts")); })];
                case 5:
                    ShellClient = (_a.sent()).ShellClient;
                    if (action === ShellClient.ACTION && typeof parsedQuery.get('udid') === 'string') {
                        ShellClient.start(ShellClient.parseParameters(parsedQuery));
                        return [2];
                    }
                    tools.push(ShellClient);
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./googDevice/client/DevtoolsClient */ "./src/app/googDevice/client/DevtoolsClient.ts")); })];
                case 6:
                    DevtoolsClient = (_a.sent()).DevtoolsClient;
                    if (action === DevtoolsClient.ACTION) {
                        DevtoolsClient.start(DevtoolsClient.parseParameters(parsedQuery));
                        return [2];
                    }
                    tools.push(DevtoolsClient);
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./googDevice/client/FileListingClient */ "./src/app/googDevice/client/FileListingClient.ts")); })];
                case 7:
                    FileListingClient = (_a.sent()).FileListingClient;
                    if (action === FileListingClient.ACTION) {
                        FileListingClient.start(FileListingClient.parseParameters(parsedQuery));
                        return [2];
                    }
                    tools.push(FileListingClient);
                    if (!tools.length) return [3, 9];
                    return [4, Promise.resolve().then(function () { return tslib_1.__importStar(__webpack_require__(/*! ./googDevice/client/DeviceTracker */ "./src/app/googDevice/client/DeviceTracker.ts")); })];
                case 8:
                    DeviceTracker_1 = (_a.sent()).DeviceTracker;
                    tools.forEach(function (tool) {
                        DeviceTracker_1.registerTool(tool);
                    });
                    _a.label = 9;
                case 9:
                    HostTracker_1.HostTracker.start();
                    return [2];
            }
        });
    });
};

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,